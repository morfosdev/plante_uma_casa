

          // ---------- import React Packs
          import React from 'react';
          import * as RN from 'react-native';

          // ---------- import Variables Pack
          import { create } from 'zustand';

          // ---------- import Local Tools
          import { mapElements } from './tools/base/project/mapElements';
          import * as functions from './tools/base/functions';
          import * as Elements from './tools/base/Elements';
          import { Project } from './tools/base/project';
          import * as jsvals from './tools/base/jsvals';
          import { props } from './tools/base/props';
          import * as customs from './tools/customs';
          import * as stls from './tools/base/stls';
          import { tools } from './tools';

          // ---------- set Caps Inputs
          const currRoute = 'ab0login';

          let args: any = [];

          const screens = [
            
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"designsys",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.primary" }`, `{ padding: 20 }`],

          screenElements:[
        (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [
        (...args:any) => <Elements.Accordion pass={{
 configs: [`{ 
	defaultOpenIdx: 0,
	styles: {
			backgroundColor: '#ccc',
			width: "100%",
			borderRadius: 10,
			marginBottom: 14
	}
}`], arrElements: [
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 5,
	paddingHorizontal: 10,
}`
          ],

          children: [
            `Elementos de Formulários I`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 20 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ backgroundColor: "#EFEFEF", width: "100%", padding: 20 }`],
            arrProps: [],
            arrItems: [
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [" "],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.inputs.ipt1`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
	borderBottomColor: "#444",
	borderBottomWidth: 2
}`],

          path: [`sc.B3.forms.iptsChanges.name`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B3.forms.iptsChanges.name`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 100, height: 20, backgroundColor: "yellow", alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.box1`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "blue" }`
          ],

          children: [
            `Ocultar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 100, height: 20, backgroundColor: "yellow", alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.box1`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "blue" }`
          ],

          children: [
            `Mostrar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "100%", padding: 5, backgroundColor: "#FFF", flexDirection: "row", alignItems: "center"}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkbox1";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "$var_all.colors.secondary", borderRadius: 4, marginRight: 5}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    width={40}
    height={40}
    viewBox="0 0 40 40"
    {...props}
  >
    <Path
      stroke="#FFF"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={4.17}
      d="M33.333 10 15 28.333 6.667 20"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "14px",

      largura: "14px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, backgroundColor: "#FFF", borderRadius: 4, borderWidth: 2, borderColor: "#CCC", marginRight: 5}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `JavaScript`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ marginTop: 20 }`
          ],

          children: [
            `Check Dentro de Lista`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 100, height: 20, backgroundColor: "yellow", alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [`users`],
            arrFuncs: [()=>{}],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "blue" }`
          ],

          children: [
            `GetDocs: users`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
const item = tools.findFlatItem([[{idx: 0, item: {name: "João"}}]]);

console.log({item});
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Testar findFlatItem.ts`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.IptPicker pass={{
 configs: [`{
	searchable: true,
	pathItems: "sc.B3.statics.picker1",
	maxVisibleItems: 8,
	style: {backgroundColor: "#fff"},
	inputStyle: {
		backgroundColor: "#fff"
	},
	dropdownStyle: {
		backgroundColor: "#fff"
	},
	itemStyle: {
		backgroundColor: "#fff"
	}
}`], arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B3.forms.iptsChanges.options`],
          value: [`$arg_callback`]
        }})], args 
 }}/>, 
        (...args:any) => <Elements.IptPicker pass={{
 configs: [`{
	searchable: false,
	pathItems: "sc.B3.statics.picker1",
	maxVisibleItems: 4
}`], arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B3.forms.iptsChanges.options`],
          value: [`$arg_callback`]
        }})], args 
 }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
	keyboardType: 'phone-pad',
	maxLength: 20
}`],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0.forms.iptsChanges.pass`],

          funcsArray: [(txt) => {
const digits = String(txt).replace(/[^0-9]/g, '').slice(0, 11);
  const ddd = digits.slice(0, 2);
  const isCel = digits.length > 10;
  const first = digits.slice(2, isCel ? 7 : 6);
  const last  = digits.slice(isCel ? 7 : 6, isCel ? 11 : 10);

  const mask =
    (ddd ? '(' + ddd + ') ' : '') +
    (first ? first : '') +
    (last ? ' - ' + last : '');

  console.log({ mask });
	tools.setData({path: "sc.A0.forms.iptsChanges.pass", value: mask });
}],

          args,
        }}/>, (...args:any) => <Elements.Accordion pass={{
 configs: [`{ 
	defaultOpenIdx: 0,
	styles: {
			backgroundColor: '#ccc',
			width: "100%",
			borderRadius: 10,
			marginBottom: 14
	}
}`], arrElements: [
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Opção X`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Opção X`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Opção X`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ], args 
 }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 5,
	paddingHorizontal: 10,
}`
          ],

          children: [
            `Elementos Base I`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 20 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
  flexDirection: "row",
  backgroundColor: "#0064fe",
  alignItems: "center",
  width: "100%",
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.box1", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
  width: 30,
  height: 30,
  alignItems: "center",
  justifyContent: "center",
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
  flex: 1,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  color: "#FFF",
  textAlign: "left",
}`
          ],

          children: [
            `Minha Tela`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

 (...args:any) => <Elements.Custom pass={{
  arrItems: [() => {
  const [userName, setUserName] = React.useState("");
  const [userPassword, setUserPassword] = React.useState("");
  const [mensagemErro, setMensagemErro] = React.useState("");
  const handleLogin = () => {
    if (!userName.trim()) {
      setMensagemErro("O nome de usuário precisa ser preenchido.");
      return;
    }
    if (!userPassword.trim()) {
      setMensagemErro("A senha precisa ser preenchida.");
      return;
    }

    setMensagemErro("");
    console.log("Login realizado com sucesso!");
const path1 = "all.toggles.box1";
    const value = false;
    const pass1 = { keyPath: [path1], value: [value] };
    tools.functions.setVar({ args: "", pass: pass1 });
  };

  return (
    <RN.View
      style={{
        padding: 20,
        alignItems: "center",
        justifyContent: "center",
       flex: 1,
      }}
    >
      <RN.TextInput
        placeholder="Nome de usuário"
        style={{
          borderWidth: 1,
          borderColor: "#65686e",
          paddingVertical: 10,
          paddingHorizontal: 15,
          borderRadius: 8,
          marginBottom: 10,
        }}
        value={userName}
        onChangeText={setUserName}
      />

      <RN.TextInput
        placeholder="Senha"
        style={{
          borderWidth: 1,
          borderColor: "#65686e",
          paddingVertical: 10,
          paddingHorizontal: 15,
          borderRadius: 8,
        }}
        value={userPassword}
        onChangeText={setUserPassword}
        secureTextEntry
      />

      {mensagemErro !== "" && (
        <RN.Text
          style={{
            color: "red",
            marginBottom: 10,
          }}
        >
          {mensagemErro}
        </RN.Text>
      )}

      <RN.Pressable
        style={{
          backgroundColor: "#007BFF",
          paddingVertical: 12,
          paddingHorizontal: 24,
          borderRadius: 8,
          alignItems: "center",
        }}
        onPress={handleLogin}
      >
        <RN.Text
          style={{
            color: "#FFFFFF",
            fontSize: 16,
          }}
        >
          Login
        </RN.Text>
      </RN.Pressable>
    </RN.View>
  );
}] 
}}/>
],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 100, height: 20, backgroundColor: "yellow", alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.box1`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "blue" }`
          ],

          children: [
            `Mostrar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 100, height: 20, backgroundColor: "yellow", alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.box1`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "blue" }`
          ],

          children: [
            `Ocultar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Entrar c/ Google`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "$var_all.colors.primary",
	alignItems: "center",
}

`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
	color: "#FFF"
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "$var_all.colors.primary",
	alignItems: "center",
}

`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg     xmlns="http://www.w3.org/2000/svg"
width={14}     height={12}     fill="red"     viewBox="0 0 14 12"     {...props}   >
<Path       stroke="#FFF"       strokeLinecap="round"       strokeLinejoin="round"       d="M13.5 1H.5m13 5H.5m13 5H.5"     />   </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
	color: "#FFF"
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ backgroundColor: "#EFEFEF", width: "100%", padding: 20 }`],
            arrProps: [],
            arrItems: [
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
width: '20%',
backgroundColor: '#FFF',
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
alignItems: 'center',
justifyContent: 'center',
height: '100px',
}`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
width: '116px',
height: '40px',
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/images%2FAdmin.png?alt=media&token=94ebd672-5bdd-4e25-81b7-a1b36e29e6e0`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
backgroundColor: '#F6F6F6',
borderRadius: '8px',
width: '155px',
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={25}
    fill="red"
    viewBox="0 0 24 25"
    {...props}
  >
    <Path
      stroke="#0E1422"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M5.23 10.167h13.54m-13.54 0v8.166c0 .31.13.607.361.825.231.219.544.342.87.342H17.54c.326 0 .639-.123.87-.342.23-.219.36-.515.36-.825v-8.166m-13.538 0C4.55 10.167 4 9.644 4 9V6.667C4 6.022 4.551 5.5 5.23 5.5h13.54c.679 0 1.23.522 1.23 1.167V9c0 .644-.551 1.167-1.23 1.167m-8.616 3.5h3.692"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.23077 10.1667H18.7692M5.23077 10.1667V18.3333C5.23077 18.6427 5.36044 18.9395 5.59125 19.1583C5.82207 19.377 6.13511 19.5 6.46154 19.5H17.5385C17.8649 19.5 18.178 19.377 18.4087 19.1583C18.6395 18.9395 18.7692 18.6427 18.7692 18.3333V10.1667M5.23077 10.1667C4.55103 10.1667 4 9.64433 4 9V6.66667C4 6.02234 4.55103 5.5 5.23077 5.5H18.7692C19.449 5.5 20 6.02234 20 6.66667V9C20 9.64433 19.449 10.1667 18.7692 10.1667M10.1538 13.6667H13.8462" stroke="#0E1422" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: [`#FFF`],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'initial',
alignItems: 'center',
height: '100px',
flexDirection: 'row',
paddingHorizontal: '5px',
paddingVertical: '20px',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#5C5F6A",
}`
          ],

          children: [
            `Admin > `
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#0E1422",
}`
          ],

          children: [
            `Products`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1, }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '15px',
justifyContent: 'center',
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    fill="red"
    viewBox="0 0 24 24"
    {...props}
  >
    <Path
      fill="#0F1729"
      fillRule="evenodd"
      d="M2 6.5A4.5 4.5 0 0 1 6.5 2H12a4 4 0 0 1 4 4v1a1 1 0 1 1-2 0V6a2 2 0 0 0-2-2H6.5A2.5 2.5 0 0 0 4 6.5v11A2.5 2.5 0 0 0 6.5 20H12a2 2 0 0 0 2-2v-1a1 1 0 1 1 2 0v1a4 4 0 0 1-4 4H6.5A4.5 4.5 0 0 1 2 17.5v-11Zm16.293 1.793a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L19.586 13H11a1 1 0 1 1 0-2h8.586l-1.293-1.293a1 1 0 0 1 0-1.414Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M2 6.5C2 4.01472 4.01472 2 6.5 2H12C14.2091 2 16 3.79086 16 6V7C16 7.55228 15.5523 8 15 8C14.4477 8 14 7.55228 14 7V6C14 4.89543 13.1046 4 12 4H6.5C5.11929 4 4 5.11929 4 6.5V17.5C4 18.8807 5.11929 20 6.5 20H12C13.1046 20 14 19.1046 14 18V17C14 16.4477 14.4477 16 15 16C15.5523 16 16 16.4477 16 17V18C16 20.2091 14.2091 22 12 22H6.5C4.01472 22 2 19.9853 2 17.5V6.5ZM18.2929 8.29289C18.6834 7.90237 19.3166 7.90237 19.7071 8.29289L22.7071 11.2929C23.0976 11.6834 23.0976 12.3166 22.7071 12.7071L19.7071 15.7071C19.3166 16.0976 18.6834 16.0976 18.2929 15.7071C17.9024 15.3166 17.9024 14.6834 18.2929 14.2929L19.5858 13L11 13C10.4477 13 10 12.5523 10 12C10 11.4477 10.4477 11 11 11L19.5858 11L18.2929 9.70711C17.9024 9.31658 17.9024 8.68342 18.2929 8.29289Z" fill="#0F1729"/>
</svg>
      `,

      altura: "15px",

      largura: "15px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.Login pass={{
 configs: [''], arrFuncs: [() => {console.log('function default')}], args 
 }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 5,
	paddingHorizontal: 10,
}`
          ],

          children: [
            `Estilos Base I`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 20 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ alignItems: "center", justifyContent: "center" }`, 
        `{ width: "100%", height: "100%" }`, 
        `{ padding: 20, backgrondColor: "#FFF" }`, 
        `{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`, 
        `{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`, 
        `{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`, 
        `{ 
	width: 50,
	height: 50,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`, 
        `{ width: "100%", flexDirection: "row", alignItems: "center" }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, 
        `{ width: "100%", flexDirection: "row", alignItems: "flex-end" }`, 
        `{ backgroundColor: "$var_all.colors.primary" }`, 
        `{ flex: 1 }`, 
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, 
        `{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`, 
        `{ color: "#FFF" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Estilos Base I`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 5,
	paddingHorizontal: 10,
}`
          ],

          children: [
            `Funções Base I`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 20 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[
        async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [()=>{}]
 , trigger: 'on press'
}}), async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [()=>{}]
 , trigger: 'on press'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ], args 
 }}/>, (...args:any) => <Elements.Accordion pass={{
 configs: [`{ 
	defaultOpenIdx: 0,
	styles: {
			backgroundColor: '#ccc',
			width: "100%",
			borderRadius: 10,
			marginBottom: 14
	}
}`], arrElements: [
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Meu Titulo`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[
              {
                height: "50px",
                width: "80px",
                backgroundColor: "#FDFDFD",
                borderWidth: 2,
                borderColor: "#EEE"
              }
              ],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Opção X`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Opção X`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `Opção X`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ], args 
 }}/>],
            args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[``],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            "Escreva..."
          ],

          args,

        }}/>],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"ab0login",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ alignItems: "center", justifyContent: "center" }`, `{ backgroundColor: "$var_all.colors.primary" }`],

          screenElements:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Ir p/ Adm`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Ir p/ Parceiros`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c1login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Ir p/ APP`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("designsys");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Design System`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a0login",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ alignItems: "center", justifyContent: "center" }`, `{ backgroundColor: "$var_all.colors.smoke" }`],

          screenElements:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	padding: 0
}`, `{ 
	width: 400,
	height: 450,
	backgroundColor: "#FFF",
	borderRadius: 20,
	alignItems: "center",
	justifyContent: "center",
	padding: 25,
	shadowColor: '#000',
  shadowOffset: { width: 0, height: 4 },
  shadowOpacity: 0.2,
  shadowRadius: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: "400px",
	height: "147px",
	backgroundColor: "$var_all.colors.primary",		
	alignItems: 'center',
	justifyContent: 'center',
	borderTopLeftRadius: 20,
  borderTopRightRadius: 20,
}`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 163,
	height: 98,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 400,
	height: 303,
	backgroundColor: "#FFF",
	alignItems: "center",
	paddingHorizontal: 25,
	paddingVertical: 30,
	borderBottomLeftRadius: 20,
  borderBottomRightRadius: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 14,
	fontWeight: '500',
	color: '#555555',
}`
          ],

          children: [
            `Login`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{ 
	padding: 5,
	borderBottomColor: "#CCCCCC",
	borderBottomWidth: 1,
	width: '100%',
}`],

          path: [`sc.A0.forms.iptsChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 14,
	fontWeight: '500',
	color: '#555555',
}`
          ],

          children: [
            `Senha`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
	width: '105%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{ 
	padding: 5,
	borderBottomColor: "#CCCCCC",
	borderBottomWidth: 1,
	width: '100%',
}`],

          path: [`sc.A0.forms.iptsChanges.userPassword`],

          funcsArray: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [`$arg_callback`]
        }}), (txt) => {
	const x = '';
	console.log({txt});
	tools.setData({path: "sc.A0.forms.iptsChanges.pass2", value: txt });
}],

          args,
        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	right: '30px',
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={16}
    height={12}
    fill="red"
    viewBox="0 0 16 12"
    {...props}
  >
    <Path
      fill="#555"
      d="M15.328 5.758c-.023-.05-.565-1.254-1.771-2.46C11.95 1.691 9.92.842 7.686.842c-2.234 0-4.264.849-5.871 2.456C.609 4.504.064 5.71.044 5.758a.512.512 0 0 0 0 .417c.022.05.565 1.253 1.77 2.46 1.608 1.606 3.638 2.455 5.872 2.455s4.264-.85 5.87-2.456c1.207-1.206 1.75-2.409 1.772-2.46a.513.513 0 0 0 0-.416Zm-7.642 4.307c-1.972 0-3.694-.717-5.12-2.13a8.551 8.551 0 0 1-1.478-1.97 8.538 8.538 0 0 1 1.478-1.969c1.426-1.413 3.148-2.13 5.12-2.13 1.971 0 3.694.717 5.12 2.13a8.548 8.548 0 0 1 1.48 1.97c-.462.862-2.473 4.099-6.6 4.099Zm0-7.174a3.075 3.075 0 1 0 0 6.15 3.075 3.075 0 0 0 0-6.15Zm0 5.124a2.05 2.05 0 1 1 0-4.099 2.05 2.05 0 0 1 0 4.1Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="16" height="12" viewBox="0 0 16 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.3277 5.75824C15.3052 5.70764 14.7627 4.50412 13.5566 3.29804C11.9496 1.69099 9.91982 0.841675 7.68572 0.841675C5.45162 0.841675 3.42183 1.69099 1.81479 3.29804C0.608708 4.50412 0.063633 5.70956 0.0437772 5.75824C0.0146423 5.82377 -0.000411987 5.89469 -0.000411987 5.96641C-0.000411987 6.03812 0.0146423 6.10904 0.0437772 6.17457C0.0661951 6.22517 0.608708 7.42805 1.81479 8.63414C3.42183 10.2405 5.45162 11.0899 7.68572 11.0899C9.91982 11.0899 11.9496 10.2405 13.5566 8.63414C14.7627 7.42805 15.3052 6.22517 15.3277 6.17457C15.3568 6.10904 15.3719 6.03812 15.3719 5.96641C15.3719 5.89469 15.3568 5.82377 15.3277 5.75824ZM7.68572 10.065C5.71423 10.065 3.99189 9.34831 2.56611 7.93534C1.98112 7.35354 1.48341 6.69014 1.08845 5.96577C1.48325 5.24129 1.98098 4.57787 2.56611 3.99619C3.99189 2.58323 5.71423 1.86649 7.68572 1.86649C9.65721 1.86649 11.3795 2.58323 12.8053 3.99619C13.3915 4.57778 13.8903 5.24119 14.2862 5.96577C13.8244 6.82789 11.8125 10.065 7.68572 10.065ZM7.68572 2.89131C7.07765 2.89131 6.48324 3.07163 5.97764 3.40945C5.47205 3.74728 5.07799 4.22744 4.84529 4.78922C4.6126 5.35101 4.55171 5.96918 4.67034 6.56556C4.78897 7.16195 5.08178 7.70976 5.51175 8.13973C5.94172 8.56971 6.48954 8.86252 7.08592 8.98115C7.68231 9.09978 8.30048 9.03889 8.86226 8.80619C9.42405 8.57349 9.90421 8.17943 10.242 7.67384C10.5799 7.16825 10.7602 6.57384 10.7602 5.96577C10.7593 5.15063 10.4351 4.36912 9.85875 3.79273C9.28236 3.21635 8.50086 2.89216 7.68572 2.89131ZM7.68572 8.0154C7.28034 8.0154 6.88406 7.89519 6.547 7.66998C6.20994 7.44476 5.94723 7.12465 5.7921 6.75013C5.63697 6.37561 5.59638 5.96349 5.67547 5.5659C5.75455 5.16831 5.94976 4.8031 6.23641 4.51645C6.52305 4.22981 6.88826 4.0346 7.28586 3.95551C7.68345 3.87643 8.09556 3.91702 8.47008 4.07215C8.8446 4.22728 9.16471 4.48999 9.38993 4.82705C9.61515 5.16411 9.73536 5.56039 9.73536 5.96577C9.73536 6.50936 9.51941 7.0307 9.13503 7.41508C8.75065 7.79946 8.22932 8.0154 7.68572 8.0154Z" fill="#555555"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: "red"
}`
          ],

          children: [
            `$var_sc.A0.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 130,
	height: 36,
	borderRadius: 10,
	paddingHorizontal: 30,
	paddingVertical: 8,
	backgroundColor: '#315E2D',
	alignItems: 'center',
	justifyContent: 'center',
	shadowColor: '#000',
  shadowOffset: { width: 0, height: 4 },
  shadowOpacity: 0.2,
  shadowRadius: 20,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  console.log('Login Firebase c/ Email e Senha');

  const rawEmail = tools.getCtData('sc.A0.forms.iptsChanges.userEmail');
  const rawSenha = tools.getCtData('sc.A0.forms.iptsChanges.userPassword');
  const email = (rawEmail ?? '').trim();
  const senha = rawSenha ?? '';

  if (!email || !senha) {
    tools.setData({ path: 'sc.A0.forms.showErr', value: true });
    tools.setData({
      path: 'sc.A0.forms.msgs.msg1',
      value: 'Informe e-mail e senha.',
    });
    return;
  }

  // Auth
  const { getAuth, signInWithEmailAndPassword } = await import('firebase/auth');

  // Garantir app inicializado
  let fbInit = tools.getCtData('all.temp.fireInit');
  if (!fbInit) {
    const { initializeApp, getApps } = await import('firebase/app');
    const cfg = tools.getCtData('all.temp.fireConfig'); // opcional: pegue sua config do CT
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: 'all.temp.fireInit', value: fbInit });
  }

  const auth = getAuth(fbInit);
  console.log('Login Firebase c/ Email e Senha → auth ok');

  try {
    const cred = await signInWithEmailAndPassword(auth, email, senha);
    console.log('Usuário logado:', cred.user.uid);

    // Firestore
    const { getFirestore, doc, getDoc } = await import('firebase/firestore');
    const db = getFirestore(fbInit);

    const snap = await getDoc(doc(db, 'users', cred.user.uid));
    if (!snap.exists()) {
      // Opcional: crie doc padrão em vez de lançar erro
      // import { setDoc } from "firebase/firestore"; await setDoc(doc(db,"users", cred.user.uid), { typeAccount:"app", userAuthID: cred.user.uid, userEmail: email });
      throw new Error('PERFIL_INEXISTENTE');
    }

    const data = snap.data();

    console.log('Dados do usuário:', data);

    // Guarda no seu state/context
    tools.setData({
      path: 'all.authUser',
      value: { uid: cred.user.uid, email: cred.user.email, ...data },
    });

    // Roteamento por tipo de conta
    const typeAccount = data?.typeAccount; // "adm" | "app" | "partner"
    if (typeAccount === 'adm') tools.goTo('a4list');
    else if (typeAccount === 'app') tools.goTo('b1list');
    else if (typeAccount === 'partner') tools.goTo('b4list');
    else {
      // fallback
      tools.setData({ path: 'sc.A0.forms.showErr', value: true });
      tools.setData({
        path: 'sc.A0.forms.msgs.msg1',
        value:
          'O email ' +
          cred.user.email +
          ' não tem permissão de acesso. Contate o Administrador.',
      });
    }

    return cred.user;
  } catch (err: any) {
    console.error('Erro no login:', err);

    const code = err?.code || err?.message || '';
    let msg = 'Email ou Senha inválidos.';

    if (code.includes('auth/invalid-email')) msg = 'E-mail inválido.';
    else if (
      code.includes('auth/wrong-password') ||
      code.includes('auth/user-not-found')
    )
      msg = 'Usuário ou senha incorretos.';
    else if (code.includes('auth/too-many-requests'))
      msg = 'Muitas tentativas. Aguarde alguns minutos.';
    else if (code.includes('PERFIL_INEXISTENTE'))
      msg = 'Perfil do usuário não encontrado. Contate o suporte.';

    tools.setData({ path: 'sc.A0.forms.showErr', value: true });
    tools.setData({ path: 'sc.A0.forms.msgs.msg1', value: msg });
    return;
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	color: "#FFF",
	fontSize: 15,
	fontWeight: '500',
}`
          ],

          children: [
            `Confirmar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "auto" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0bforgotpass");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '#555555',
	fontSize: 14,
	fontWeight: '400',
}`
          ],

          children: [
            `Esqueceu sua senha?`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a0bforgotpass",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ alignItems: "center", justifyContent: "center" }`, `{ backgroundColor: "$var_all.colors.smoke" }`],

          screenElements:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 400,
	height: 450,
	backgroundColor: "#FFF",
	borderRadius: 20,
	alignItems: "center",
	justifyContent: "center",
	padding: 25,
	shadowColor: '#000',
  shadowOffset: { width: 0, height: 4 },
  shadowOpacity: 0.2,
  shadowRadius: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 20,
fontWeight: '700',
}`
          ],

          children: [
            `Esqueci minha Senha`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{ placeholder: "Digite seu e-mail" }`],

          stylesArray: [`{
	padding: 5,
	borderBottomColor: "#CCCCCC",
	borderBottomWidth: 2,
	width: '100%',
}`],

          path: [`sc.A0B.forms.iptsChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0B.forms.iptsChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0B.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: "red"
}`
          ],

          children: [
            `$var_sc.A0B.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0B.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{
	color: "green"
}`, `{ paddingHorizontal: 0, textAlign: "center" }`
          ],

          children: [
            `$var_sc.A0B.forms.msgs.msg2`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 10, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const path = 'sc.A0B.forms.iptsChanges.userEmail';
  const raw = tools.getCtData(path);
  const email = (raw ?? '').normalize('NFKC').trim().toLowerCase();

  if (!email) {
    tools.setData({ path: 'sc.A0B.forms.showErr', value: true });
    tools.setData({ path: 'sc.A0B.forms.msgs.msg1', value: 'Informe um e-mail válido.' });
    return;
  }

  try {
    const { getAuth, sendPasswordResetEmail } = await import('firebase/auth');
    const fbInit = tools.getCtData('all.temp.fireInit');
    const auth = fbInit ? getAuth(fbInit) : getAuth();

    // garanta que não há tenant setado por engano
    // @ts-ignore
    auth.tenantId = null;

    const host = "http://localhost:5173";
    const acs = {
      url: host + "/auth/complete-signup",
      handleCodeInApp: false
    }

    await sendPasswordResetEmail(auth, email, acs);

    tools.setData({ path: 'sc.A0B.forms.showErr', value: false });
    tools.setData({ path: 'sc.A0B.forms.showSuccess', value: true });
    tools.setData({
      path: 'sc.A0B.forms.msgs.msg2',
      value: 'Se o e-mail existir, enviaremos as instruções para redefinir a senha.',
    });
  } catch (e: any) {
    // trate apenas erros realmente bloqueantes
    let msg = 'Não foi possível enviar o e-mail de redefinição.';
    if (e?.code === 'auth/invalid-email') msg = 'E-mail inválido.';
    if (e?.code === 'auth/too-many-requests') msg = 'Muitas tentativas. Tente novamente mais tarde.';

    console.log('Erro reset senha:', e?.code || e?.message);
    tools.setData({ path: 'sc.A0B.forms.showSuccess', value: false });
    tools.setData({ path: 'sc.A0B.forms.showErr', value: true });
    tools.setData({ path: 'sc.A0B.forms.msgs.msg1', value: msg });
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
fontWeight: '700',
color: '#fff',
}`
          ],

          children: [
            `Enviar Link`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 30,
	height: 30,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: 'transparent',
}
`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 14,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Voltar ao login`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0dsetpass");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `BOTÃO TEMPORÁRIO REDEFINIR SENHA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a0csignup",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ alignItems: "center", justifyContent: "center" }`, `{ backgroundColor: "$var_all.colors.smoke" }`],

          screenElements:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 80,
	height: 30
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/images%2FAdmin.png?alt=media&token=94ebd672-5bdd-4e25-81b7-a1b36e29e6e0`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0.forms.iptsChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0.forms.iptsChanges.userPassword`],

          funcsArray: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [`$arg_callback`]
        }}), (txt) => {
	const x = '';
	console.log({txt});
	tools.setData({path: "sc.A0.forms.iptsChanges.pass2", value: txt });
}],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: "red"
}`
          ],

          children: [
            `$var_sc.A0.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lê inputs
  const email = (
    tools.getCtData('sc.A0C.forms.iptsChanges.userEmail') ?? 'adm@teste.com'
  ).trim();
  const senha = (
    tools.getCtData('sc.A0C.forms.iptsChanges.userPassword') ?? '123456'
  ).trim();
  const nome = (
    tools.getCtData('sc.A0C.forms.iptsChanges.userName') ?? 'Admin'
  ).trim();

  // Helpers p/ mensagens (ajuste os paths conforme seu UI)
  const showMsg = (text: string, isError = false) => {
    tools.setData({ path: 'sc.A0C.forms.showMsg', value: true });
    tools.setData({ path: 'sc.A0C.forms.showErr', value: isError });
    tools.setData({ path: 'sc.A0C.forms.msgs.msg1', value: text });
  };

  if (!email || !senha) {
    showMsg('Informe e-mail e senha.', true);
    return;
  }
  if (senha.length < 6) {
    showMsg('A senha deve ter ao menos 6 caracteres.', true);
    return;
  }

  // SDK imports
  const {
    getAuth,
    createUserWithEmailAndPassword,
    updateProfile,
    sendEmailVerification,
  } = await import('firebase/auth');

  // Reaproveita app/auth se já existir
  const fbInit = tools.getCtData('all.temp.fireInit');
  const auth = fbInit ? getAuth(fbInit) : getAuth();

  // (Opcional) use seu domínio/dynamic link
  const actionCodeSettings =
    tools.getCtData('all.temp.actionCodeSettings') || undefined;

  try {
    const cred = await createUserWithEmailAndPassword(auth, email, senha);

    if (nome) {
      await updateProfile(cred.user, { displayName: nome });
    }

    await sendEmailVerification(cred.user, actionCodeSettings);

    // Mensagem de sucesso
    showMsg(
      'Conta criada. Enviamos um e-mail de verificação. Confirme para usar todos os recursos.',
      false,
    );

    // (Opcional) limpar campos / navegar
    tools.setData({
      path: 'sc.A0C.forms.iptsChanges',
      value: { userEmail: '', userPassword: '', userName: '' },
    });
    tools.goTo('login');
  } catch (e: any) {
    let msg = 'Não foi possível criar a conta.';
    switch (e?.code) {
      case 'auth/email-already-in-use':
        msg = 'Este e-mail já está em uso.';
        break;
      case 'auth/invalid-email':
        msg = 'E-mail inválido.';
        break;
      case 'auth/weak-password':
        msg = 'Senha muito fraca.';
        break;
      default:
        // console.log(e);
        break;
    }
    showMsg(msg, true);
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Criar Conta`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "auto" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0bforgotpass");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '$var_all.colors.primary'
}`
          ],

          children: [
            `Recuperar Senha`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a0dsetpass",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ alignItems: "center", justifyContent: "center" }`, `{ backgroundColor: "$var_all.colors.smoke" }`],

          screenElements:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
	placeholder: "Digite sua Senha",
	secureTextEntry: true
}`],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0D.forms.iptsChanges.userPassword`],

          funcsArray: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0D.forms.iptsChanges.userPassword`],
          value: [`$arg_callback`]
        }}), (txt) => {
	const x = '';
	console.log({txt});
	tools.setData({path: "sc.A0.forms.iptsChanges.pass2", value: txt });
}],

          args,
        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
	placeholder: "Confirme sua Senha",
	secureTextEntry: true
}`],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0D.forms.iptsChanges.confirmPassword`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0D.forms.iptsChanges.confirmPassword`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0D.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A0D.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0D.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A0D.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  try {
    const A0D = tools.getCtData('sc.A0D.forms.iptsChanges');
    console.log({ A0D });

    const password = (A0D.userPassword ?? '').trim();
    const confirmPassword = (A0D.confirmPassword ?? '').trim();
    const oobCode = (A0D.oobCode ?? '').trim(); // obtido via link

    // validações básicas
    if (password.length < 6) {
      tools.setData({ path: 'sc.A0D.forms.showErr', value: true });
      tools.setData({ path: 'sc.A0D.msgs.msg1', value: 'A senha deve ter ao menos 6 caracteres.' });
      return;
    }
    console.log("Login Pass Validated 1");

    if (password !== confirmPassword) {
      tools.setData({ path: 'sc.A0D.forms.showErr', value: true });
      tools.setData({ path: 'sc.A0D.msgs.msg1', value: 'As senhas não coincidem.' });
      return;
    }

    console.log("Login Pass Validated 2");
    // Auth
    const { getAuth, confirmPasswordReset } = await import('firebase/auth');
    const fbInit = tools.getCtData('all.temp.fireInit');
    console.log({ fbInit });
    const auth = fbInit ? getAuth(fbInit) : getAuth();


    await confirmPasswordReset(auth, oobCode, password);

    // sucesso
    console.log("Login Successful");
    tools.setData({ path: 'sc.A0D.forms.showErr', value: false });
    tools.setData({ path: 'sc.A0D.forms.showSuccess', value: true });
    tools.setData({ path: 'sc.A0D.msgs.msg1', value: 'Senha alterada! Volte para Login e entre com a nova senha' });
  } catch (e) {
    const code = e?.code ?? '';
    console.log({ code });
    let msg =
      'Erro ao alterar a senha. Tente novamente.';
    if (code === 'auth/weak-password') msg = 'A nova senha é muito fraca (mínimo de 6 caracteres).';
    if (code === 'auth/expired-action-code') msg = 'Este link expirou. Solicite um novo e-mail.';
    if (code === 'auth/invalid-action-code') msg = 'Link inválido ou já utilizado. Solicite um novo e-mail.';

    tools.setData({ path: 'sc.A0D.forms.showErr', value: true });
    console.log({ msg });
    const newMsg = msg + code;
    console.log({ newMsg });
    tools.setData({ path: 'sc.A0D.msgs.msg1', value: newMsg });
    console.error(e);
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Definir Senha`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "auto" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '#555555',
	fontSize: 14,
	fontWeight: '400',
}`
          ],

          children: [
            `Voltar para Login`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a4list",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
	backgroundColor: '#f5f5f5',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
height: 100,
width: '100%',
position: 'absolute',
right: 2,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/projeto-plante-uma-casa.firebasestorage.app/o/image_44.png?alt=media&token=1fc7f67c-b200-4145-b3e6-403b080e4f37`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lista de condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	height: 30,
	backgroundColor: 'transparent',
	paddingHorizontal: 30,
	paddingVertical: 8,
	borderWidth: 2,
	borderRadius: 20,
	borderColor: 'white',
	justifyContent: 'center',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '700',
	color: 'white',
}`
          ],

          children: [
            `CRIAR NOVO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ flex:1, width: '100%',}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.a7.list`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'center',
flexDirection: 'row',
paddingHorizontal: '60px',
paddingVertical: '30px',
backgroundColor: 'transparent',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [`$arg_item`]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 16,
fontWeight: '700',
color: '#0D141C',
}`
          ],

          children: [
            `$arg_condo`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '400',
color: '#4A739C',
}`
          ],

          children: [
            `$arg_address`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	width: 300,
	zIndex: 1,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: '#E8EDF5',
	paddingHorizontal: 16,
	paddingVertical: 8,
	borderRadius: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a11list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '500',
}`
          ],

          children: [
            `Parceiros`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: '#E8EDF5',
	paddingHorizontal: 16,
	paddingVertical: 8,
	borderRadius: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a7list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '500',
}`
          ],

          children: [
            `Lotes - Proprietário`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '260px',
	height: '160px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:[`https://www.condominioterranovabauru.com.br/cdn/fotos/portaria_terra_nova_bauru.jpg`],

      args,
    }}/>],

            args,
          }}/>
        
          ],

      styles:[`{
width: '100%',
}`],    args,
        }}/>],
            args,
        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [(txt) => {
  try {
    // Garante string
    if (typeof txt !== "string") txt = String(txt ?? "");

    console.log("Raw recebido:", txt, " (type:", typeof txt + ")");

    // Método 1: preferencial - pega todos os dígitos com match
    let digitArr = txt.match(/d/g);
    let digits = (digitArr && digitArr.length) ? digitArr.join("") : "";

    // Se match falhar por algum motivo, fallback robusto:
    if (!digits) {
      digits = Array.from(txt).filter(ch => "0123456789".includes(ch)).join("");
    }

    console.log("Somente dígitos extraídos:", digits);

    // Limita a 8 dígitos (DDMMAAAA)
    digits = digits.slice(0, 8);

    // Formata dinamicamente DD/MM/AAAA
    let formatted = digits;
    if (digits.length > 4) {
      // quando tem DDMM + AAAA...
      formatted = digits.replace(/^(d{2})(d{2})(d{0,4})/, "!#!/!#!/$3");
    } else if (digits.length > 2) {
      // quando tem DD + MM
      formatted = digits.replace(/^(d{2})(d{0,2})/, "!#!/!#!");
    }

    console.log("Formatado:", formatted);

    // Salva no contexto (usar o que seu projeto aceita; tools.setData é preferível aqui)
    if (typeof tools.setData === "function") {
      tools.setData({
        path: "sc.a1.iptChanges.startDate",
        value: formatted
      });
    } else if (tools.functions && typeof tools.functions.setVar === "function") {
      tools.functions.setVar({
        args: "",
        pass: {
          keyPath: ["sc.a1.iptChanges.startDate"],
          value: formatted // ou [formatted] se seu projeto usar array
        }
      });
    } else {
      console.warn("Nenhum setter disponível (tools.setData / tools.functions.setVar).");
    }

    // retornar caso o componente use o retorno
    return formatted;
  } catch (err) {
    console.error("Erro na máscara de data:", err);
    return txt;
  }
}
],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.a1.iptChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.iptChanges.address", name: "Endereço" },
    { path: "sc.a1.iptChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.iptChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.iptChanges.description", name: "Descrição" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    condo: getVal("sc.a1.iptChanges.condo"),
    address: getVal("sc.a1.iptChanges.address"),
    startDate: getVal("sc.a1.iptChanges.startDate"),
    endDate: getVal("sc.a1.iptChanges.endDate"),
    description: getVal("sc.a1.iptChanges.description"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "condos"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

// Atualiza o documento para incluir o próprio ID
    await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Condomínio salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.iptChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.add"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL DO ADMINISTRADOR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7.addOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.A7.forms.iptsChanges.partnerName", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.iptsChanges.partnerMail", name: "E-mail" },
    { path: "sc.A7.forms.iptsChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.iptsChanges.area", name: "Área" },
    { path: "sc.A7.forms.iptsChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.iptsChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    owner: getVal("sc.A7.forms.iptsChanges.partnerName"),
    email: getVal("sc.A7.forms.iptsChanges.partnerMail"),
    lot: getVal("sc.A7.forms.iptsChanges.lot"),
		area: getVal("sc.A7.forms.iptsChanges.area"),
    totalValue: getVal("sc.A7.forms.iptsChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.iptsChanges.firstInstallment"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "lots"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Documento salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A7.forms.iptsChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.addOwner"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7b.editOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `lots`, `$var_sc.A7.forms.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.owner`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.owner`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.email`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.email`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Lote`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A7.forms.editChanges.owner", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.editChanges.email", name: "E-mail" },
    { path: "sc.A7.forms.editChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.editChanges.area", name: "Área" },
    { path: "sc.A7.forms.editChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.editChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A7.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    owner: getVal("sc.A7.forms.editChanges.owner"),
    email: getVal("sc.A7.forms.editChanges.email"),
    lot: getVal("sc.A7.forms.editChanges.lot"),
		area: getVal("sc.A7.forms.editChanges.area"),
    totalValue: getVal("sc.A7.forms.editChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.editChanges.firstInstallment"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "lots", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a11b.editPartner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `users`, `$var_sc.a11b.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.A11.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A11.forms.editChanges.userName", name: "Nome" },
    { path: "sc.A11.forms.editChanges.userEmail", name: "E-mail" },
    { path: "sc.A11.forms.editChanges.partnerActivity", name: "Área de Atuação" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.A11.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A11.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    userName: getVal("sc.A11.forms.editChanges.userName"),
    userEmail: getVal("sc.A11.forms.editChanges.userEmail"),
    partnerActivity: getVal("sc.A11.forms.editChanges.partnerActivity"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "users", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.forms.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a11b.editPartner"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a12.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  try {
    const pathName = 'sc.A12.forms.iptsChanges.partnerName';
    const pathEmail = 'sc.A12.forms.iptsChanges.partnerMail';
    const pathPartner = 'sc.A12.forms.iptsChanges.partnerActivity';

    const name = (tools.getCtData(pathName) ?? '').trim();
    const email = (tools.getCtData(pathEmail) ?? '').trim();
    const partnerActivity = (tools.getCtData(pathPartner) ?? '').trim();
    console.log({ name, email });

    const validateEmail = (v: string) => v.includes('@') && v.includes('.');
    console.log({ validateEmail: validateEmail(email) });

    if (name === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Nome.' });
      return;
    }
    if (email === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Email.' });
      return;
    }

    if (!validateEmail(email)) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Email inválido.' });
      return;
    }

    // Auth
    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification, sendPasswordResetEmail, fetchSignInMethodsForEmail } =
      await import('firebase/auth');

    const fbInit = tools.getCtData('all.temp.fireInit');
    console.log({ fbInit });
    const auth = fbInit ? getAuth(fbInit) : getAuth();

    // ---- Pré-checagem opcional: já existe?
    const methods = await fetchSignInMethodsForEmail(auth, email);
    console.log({ methods });
    if (methods.length > 0) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return; // quebra o fluxo
    }

    const tempPass = '123456'; // ou gere uma senha aleatória
    console.log({ tempPass });
    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);
    console.log({ cred });


    if (name) {
      await updateProfile(cred.user, { displayName: name });
    }

    // >>>>>>>>>>>>>>> ADIÇÃO: criar/atualizar doc em 'users'
    {
      const { getFirestore, doc, setDoc, serverTimestamp } = await import('firebase/firestore');
      const db = fbInit ? getFirestore(fbInit) : getFirestore();

      const uid = cred.user.uid;
      const dataToSet = {
        docId: uid,
        createdAt: serverTimestamp(),
        userName: name,
        userEmail: email,
        userImage: cred.user.photoURL || '',
        partnerActivity,
        typeAccount: "partner",
      };

      await setDoc(doc(db, 'users', uid), dataToSet, { merge: true });
      console.log('users doc criado/atualizado:', { uid, dataToSet });
    }
    // <<<<<<<<<<<<<<< FIM DA ADIÇÃO

    // (opcional) enviar verificação
    const host = "http://localhost:5173";
    // const host = "http://projeto-plante-uma-casa.web.app";

    const acs = {
      url: host + "/auth/complete-signup",
      handleCodeInApp: false
    }
    // await sendEmailVerification(cred.user);
await sendPasswordResetEmail(auth, email, acs);


    tools.setData({ path: 'sc.A12.forms.showErr', value: false });
    tools.setData({ path: 'sc.A12.forms.showSuccess', value: true });
    tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: 'Usuário criado com sucesso!' });


    // Limpar mensagens após 2 segundos
    const delay = () => {
      tools.setData({ path: 'all.toggles.sideRight', value: false });
      tools.setData({ path: 'all.toggles.a12.add', value: false });
      tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: '' });
      tools.setData({ path: 'sc.A12.forms.iptsChanges', value: { partnerName: "", partnerMail: "", partnerActivity: "" } });
    }

    setTimeout(delay, 2500);

    // sucesso...
  } catch (e: any) {
    if (e?.code === 'auth/email-already-in-use') {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return;
    }

    tools.setData({ path: 'sc.A12.forms.showErr', value: true });
    tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Erro ao Criar Parceiro. ' + (e?.message ?? '') });
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a10.addFinance", "==", true ]

]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `FINANCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Quantidade de Parcelas`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "1",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "R$ 600,00",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "24/09/25",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a10.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [`condos`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.list`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a7list",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
	backgroundColor: '#f5f5f5',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 7,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={25}
    fill="red"
    viewBox="0 0 24 25"
    {...props}
  >
    <Path
      stroke="#F5F5F5"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="m11.438 19.25-6.75-6.75 6.75-6.75M5.625 12.5h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.4375 19.25L4.6875 12.5L11.4375 5.75M5.625 12.5H19.3125" stroke="#F5F5F5" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lotes - Proprietário`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lista dos proprietários`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	height: 30,
	backgroundColor: 'transparent',
	paddingHorizontal: 30,
	paddingVertical: 8,
	borderWidth: 2,
	borderRadius: 20,
	borderColor: 'white',
	justifyContent: 'center',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '700',
	color: 'white',
}`
          ],

          children: [
            `CRIAR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	paddingHorizontal: 60,
	paddingVertical: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	paddingVertical: 10,
	paddingHorizontal: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Lote`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            ``
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{
borderRadius: 12,
}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.a7.list`,

          itemElements: [
            
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'center',
alignItems: 'center',
flexDirection: 'row',
backgroundColor: 'white',
paddingVertical: 10,
paddingHorizontal: 20,
borderRadius: 12,
shadowColor: '#000',
shadowOffset: { width: 0, height: 4 },
shadowOpacity: 0.1,
shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [`$arg_item`]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_owner`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_email`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_lot`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_area`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: "fit-content", 
	minWidth: 120, 
	height: 30, 
	backgroundColor: "#fff",
	borderRadius: 20, 
	alignItems: "center",
	justifyContent: "center",
	borderWidth: 2,
	borderColor: "#315e2d",
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a9finManagement");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ color: "#FFF" }`, `{
	color: "#315e2d",
	fontSize: 12,
	fontWeight: 'bold', 
}`
          ],

          children: [
            `Gestão Financeira`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 25,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        
          ],

      styles:[`{
width: '100%',
}`],    args,
        }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [(txt) => {
  try {
    // Garante string
    if (typeof txt !== "string") txt = String(txt ?? "");

    console.log("Raw recebido:", txt, " (type:", typeof txt + ")");

    // Método 1: preferencial - pega todos os dígitos com match
    let digitArr = txt.match(/d/g);
    let digits = (digitArr && digitArr.length) ? digitArr.join("") : "";

    // Se match falhar por algum motivo, fallback robusto:
    if (!digits) {
      digits = Array.from(txt).filter(ch => "0123456789".includes(ch)).join("");
    }

    console.log("Somente dígitos extraídos:", digits);

    // Limita a 8 dígitos (DDMMAAAA)
    digits = digits.slice(0, 8);

    // Formata dinamicamente DD/MM/AAAA
    let formatted = digits;
    if (digits.length > 4) {
      // quando tem DDMM + AAAA...
      formatted = digits.replace(/^(d{2})(d{2})(d{0,4})/, "!#!/!#!/$3");
    } else if (digits.length > 2) {
      // quando tem DD + MM
      formatted = digits.replace(/^(d{2})(d{0,2})/, "!#!/!#!");
    }

    console.log("Formatado:", formatted);

    // Salva no contexto (usar o que seu projeto aceita; tools.setData é preferível aqui)
    if (typeof tools.setData === "function") {
      tools.setData({
        path: "sc.a1.iptChanges.startDate",
        value: formatted
      });
    } else if (tools.functions && typeof tools.functions.setVar === "function") {
      tools.functions.setVar({
        args: "",
        pass: {
          keyPath: ["sc.a1.iptChanges.startDate"],
          value: formatted // ou [formatted] se seu projeto usar array
        }
      });
    } else {
      console.warn("Nenhum setter disponível (tools.setData / tools.functions.setVar).");
    }

    // retornar caso o componente use o retorno
    return formatted;
  } catch (err) {
    console.error("Erro na máscara de data:", err);
    return txt;
  }
}
],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.a1.iptChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.iptChanges.address", name: "Endereço" },
    { path: "sc.a1.iptChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.iptChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.iptChanges.description", name: "Descrição" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    condo: getVal("sc.a1.iptChanges.condo"),
    address: getVal("sc.a1.iptChanges.address"),
    startDate: getVal("sc.a1.iptChanges.startDate"),
    endDate: getVal("sc.a1.iptChanges.endDate"),
    description: getVal("sc.a1.iptChanges.description"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "condos"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

// Atualiza o documento para incluir o próprio ID
    await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Condomínio salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.iptChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.add"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL DO ADMINISTRADOR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7.addOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.A7.forms.iptsChanges.partnerName", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.iptsChanges.partnerMail", name: "E-mail" },
    { path: "sc.A7.forms.iptsChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.iptsChanges.area", name: "Área" },
    { path: "sc.A7.forms.iptsChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.iptsChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    owner: getVal("sc.A7.forms.iptsChanges.partnerName"),
    email: getVal("sc.A7.forms.iptsChanges.partnerMail"),
    lot: getVal("sc.A7.forms.iptsChanges.lot"),
		area: getVal("sc.A7.forms.iptsChanges.area"),
    totalValue: getVal("sc.A7.forms.iptsChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.iptsChanges.firstInstallment"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "lots"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Documento salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A7.forms.iptsChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.addOwner"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7b.editOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `lots`, `$var_sc.A7.forms.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.owner`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.owner`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.email`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.email`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Lote`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A7.forms.editChanges.owner", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.editChanges.email", name: "E-mail" },
    { path: "sc.A7.forms.editChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.editChanges.area", name: "Área" },
    { path: "sc.A7.forms.editChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.editChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A7.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    owner: getVal("sc.A7.forms.editChanges.owner"),
    email: getVal("sc.A7.forms.editChanges.email"),
    lot: getVal("sc.A7.forms.editChanges.lot"),
		area: getVal("sc.A7.forms.editChanges.area"),
    totalValue: getVal("sc.A7.forms.editChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.editChanges.firstInstallment"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "lots", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a11b.editPartner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `users`, `$var_sc.a11b.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.A11.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A11.forms.editChanges.userName", name: "Nome" },
    { path: "sc.A11.forms.editChanges.userEmail", name: "E-mail" },
    { path: "sc.A11.forms.editChanges.partnerActivity", name: "Área de Atuação" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.A11.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A11.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    userName: getVal("sc.A11.forms.editChanges.userName"),
    userEmail: getVal("sc.A11.forms.editChanges.userEmail"),
    partnerActivity: getVal("sc.A11.forms.editChanges.partnerActivity"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "users", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.forms.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a11b.editPartner"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a12.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  try {
    const pathName = 'sc.A12.forms.iptsChanges.partnerName';
    const pathEmail = 'sc.A12.forms.iptsChanges.partnerMail';
    const pathPartner = 'sc.A12.forms.iptsChanges.partnerActivity';

    const name = (tools.getCtData(pathName) ?? '').trim();
    const email = (tools.getCtData(pathEmail) ?? '').trim();
    const partnerActivity = (tools.getCtData(pathPartner) ?? '').trim();
    console.log({ name, email });

    const validateEmail = (v: string) => v.includes('@') && v.includes('.');
    console.log({ validateEmail: validateEmail(email) });

    if (name === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Nome.' });
      return;
    }
    if (email === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Email.' });
      return;
    }

    if (!validateEmail(email)) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Email inválido.' });
      return;
    }

    // Auth
    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification, sendPasswordResetEmail, fetchSignInMethodsForEmail } =
      await import('firebase/auth');

    const fbInit = tools.getCtData('all.temp.fireInit');
    console.log({ fbInit });
    const auth = fbInit ? getAuth(fbInit) : getAuth();

    // ---- Pré-checagem opcional: já existe?
    const methods = await fetchSignInMethodsForEmail(auth, email);
    console.log({ methods });
    if (methods.length > 0) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return; // quebra o fluxo
    }

    const tempPass = '123456'; // ou gere uma senha aleatória
    console.log({ tempPass });
    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);
    console.log({ cred });


    if (name) {
      await updateProfile(cred.user, { displayName: name });
    }

    // >>>>>>>>>>>>>>> ADIÇÃO: criar/atualizar doc em 'users'
    {
      const { getFirestore, doc, setDoc, serverTimestamp } = await import('firebase/firestore');
      const db = fbInit ? getFirestore(fbInit) : getFirestore();

      const uid = cred.user.uid;
      const dataToSet = {
        docId: uid,
        createdAt: serverTimestamp(),
        userName: name,
        userEmail: email,
        userImage: cred.user.photoURL || '',
        partnerActivity,
        typeAccount: "partner",
      };

      await setDoc(doc(db, 'users', uid), dataToSet, { merge: true });
      console.log('users doc criado/atualizado:', { uid, dataToSet });
    }
    // <<<<<<<<<<<<<<< FIM DA ADIÇÃO

    // (opcional) enviar verificação
    const host = "http://localhost:5173";
    // const host = "http://projeto-plante-uma-casa.web.app";

    const acs = {
      url: host + "/auth/complete-signup",
      handleCodeInApp: false
    }
    // await sendEmailVerification(cred.user);
await sendPasswordResetEmail(auth, email, acs);


    tools.setData({ path: 'sc.A12.forms.showErr', value: false });
    tools.setData({ path: 'sc.A12.forms.showSuccess', value: true });
    tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: 'Usuário criado com sucesso!' });


    // Limpar mensagens após 2 segundos
    const delay = () => {
      tools.setData({ path: 'all.toggles.sideRight', value: false });
      tools.setData({ path: 'all.toggles.a12.add', value: false });
      tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: '' });
      tools.setData({ path: 'sc.A12.forms.iptsChanges', value: { partnerName: "", partnerMail: "", partnerActivity: "" } });
    }

    setTimeout(delay, 2500);

    // sucesso...
  } catch (e: any) {
    if (e?.code === 'auth/email-already-in-use') {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return;
    }

    tools.setData({ path: 'sc.A12.forms.showErr', value: true });
    tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Erro ao Criar Parceiro. ' + (e?.message ?? '') });
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a10.addFinance", "==", true ]

]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `FINANCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Quantidade de Parcelas`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "1",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "R$ 600,00",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "24/09/25",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a10.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [`lots`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.list`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a9finManagement",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
height: 100,
width: '100%',
position: 'absolute',
right: 2,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/projeto-plante-uma-casa.firebasestorage.app/o/image_44.png?alt=media&token=1fc7f67c-b200-4145-b3e6-403b080e4f37`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 7,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={25}
    fill="red"
    viewBox="0 0 24 25"
    {...props}
  >
    <Path
      stroke="#F5F5F5"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="m11.438 19.25-6.75-6.75 6.75-6.75M5.625 12.5h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.4375 19.25L4.6875 12.5L11.4375 5.75M5.625 12.5H19.3125" stroke="#F5F5F5" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lotes - Proprietário`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Gestão Financeira`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	height: 30,
	backgroundColor: 'transparent',
	paddingHorizontal: 30,
	paddingVertical: 8,
	borderWidth: 2,
	borderRadius: 20,
	borderColor: 'white',
	justifyContent: 'center',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '700',
	color: 'white',
}`
          ],

          children: [
            `CRIAR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	paddingHorizontal: 60,
	paddingVertical: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: '#fff',
	padding: 20,
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#555555',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `Valor Total da Obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '400',
left: 4,
}`
          ],

          children: [
            `R$ 2.200.000`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#F0F1FF',
borderRadius: 100,
height: 8,
width: 272,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#315E2D',
borderRadius: 100,
height: 8,
width: 221,
bottom: 8,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	paddingVertical: 20,
	paddingHorizontal: 40,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Valor Pago`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Quantidade de Parcelas`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Comprovante`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ flex:1, width: '100%',}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.a7.list`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'center',
alignItems: 'center',
flexDirection: 'row',
backgroundColor: 'white',
paddingVertical: 10,
paddingHorizontal: 20,
borderRadius: 12,
shadowColor: '#000',
shadowOffset: { width: 0, height: 4 },
shadowOpacity: 0.1,
shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_condo`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_address`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        
          ],

      styles:[`{
width: '100%',
}`],    args,
        }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [(txt) => {
  try {
    // Garante string
    if (typeof txt !== "string") txt = String(txt ?? "");

    console.log("Raw recebido:", txt, " (type:", typeof txt + ")");

    // Método 1: preferencial - pega todos os dígitos com match
    let digitArr = txt.match(/d/g);
    let digits = (digitArr && digitArr.length) ? digitArr.join("") : "";

    // Se match falhar por algum motivo, fallback robusto:
    if (!digits) {
      digits = Array.from(txt).filter(ch => "0123456789".includes(ch)).join("");
    }

    console.log("Somente dígitos extraídos:", digits);

    // Limita a 8 dígitos (DDMMAAAA)
    digits = digits.slice(0, 8);

    // Formata dinamicamente DD/MM/AAAA
    let formatted = digits;
    if (digits.length > 4) {
      // quando tem DDMM + AAAA...
      formatted = digits.replace(/^(d{2})(d{2})(d{0,4})/, "!#!/!#!/$3");
    } else if (digits.length > 2) {
      // quando tem DD + MM
      formatted = digits.replace(/^(d{2})(d{0,2})/, "!#!/!#!");
    }

    console.log("Formatado:", formatted);

    // Salva no contexto (usar o que seu projeto aceita; tools.setData é preferível aqui)
    if (typeof tools.setData === "function") {
      tools.setData({
        path: "sc.a1.iptChanges.startDate",
        value: formatted
      });
    } else if (tools.functions && typeof tools.functions.setVar === "function") {
      tools.functions.setVar({
        args: "",
        pass: {
          keyPath: ["sc.a1.iptChanges.startDate"],
          value: formatted // ou [formatted] se seu projeto usar array
        }
      });
    } else {
      console.warn("Nenhum setter disponível (tools.setData / tools.functions.setVar).");
    }

    // retornar caso o componente use o retorno
    return formatted;
  } catch (err) {
    console.error("Erro na máscara de data:", err);
    return txt;
  }
}
],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.a1.iptChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.iptChanges.address", name: "Endereço" },
    { path: "sc.a1.iptChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.iptChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.iptChanges.description", name: "Descrição" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    condo: getVal("sc.a1.iptChanges.condo"),
    address: getVal("sc.a1.iptChanges.address"),
    startDate: getVal("sc.a1.iptChanges.startDate"),
    endDate: getVal("sc.a1.iptChanges.endDate"),
    description: getVal("sc.a1.iptChanges.description"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "condos"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

// Atualiza o documento para incluir o próprio ID
    await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Condomínio salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.iptChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.add"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL DO ADMINISTRADOR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7.addOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.A7.forms.iptsChanges.partnerName", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.iptsChanges.partnerMail", name: "E-mail" },
    { path: "sc.A7.forms.iptsChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.iptsChanges.area", name: "Área" },
    { path: "sc.A7.forms.iptsChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.iptsChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    owner: getVal("sc.A7.forms.iptsChanges.partnerName"),
    email: getVal("sc.A7.forms.iptsChanges.partnerMail"),
    lot: getVal("sc.A7.forms.iptsChanges.lot"),
		area: getVal("sc.A7.forms.iptsChanges.area"),
    totalValue: getVal("sc.A7.forms.iptsChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.iptsChanges.firstInstallment"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "lots"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Documento salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A7.forms.iptsChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.addOwner"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7b.editOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `lots`, `$var_sc.A7.forms.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.owner`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.owner`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.email`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.email`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Lote`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A7.forms.editChanges.owner", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.editChanges.email", name: "E-mail" },
    { path: "sc.A7.forms.editChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.editChanges.area", name: "Área" },
    { path: "sc.A7.forms.editChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.editChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A7.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    owner: getVal("sc.A7.forms.editChanges.owner"),
    email: getVal("sc.A7.forms.editChanges.email"),
    lot: getVal("sc.A7.forms.editChanges.lot"),
		area: getVal("sc.A7.forms.editChanges.area"),
    totalValue: getVal("sc.A7.forms.editChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.editChanges.firstInstallment"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "lots", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a11b.editPartner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `users`, `$var_sc.a11b.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.A11.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A11.forms.editChanges.userName", name: "Nome" },
    { path: "sc.A11.forms.editChanges.userEmail", name: "E-mail" },
    { path: "sc.A11.forms.editChanges.partnerActivity", name: "Área de Atuação" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.A11.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A11.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    userName: getVal("sc.A11.forms.editChanges.userName"),
    userEmail: getVal("sc.A11.forms.editChanges.userEmail"),
    partnerActivity: getVal("sc.A11.forms.editChanges.partnerActivity"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "users", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.forms.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a11b.editPartner"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a12.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  try {
    const pathName = 'sc.A12.forms.iptsChanges.partnerName';
    const pathEmail = 'sc.A12.forms.iptsChanges.partnerMail';
    const pathPartner = 'sc.A12.forms.iptsChanges.partnerActivity';

    const name = (tools.getCtData(pathName) ?? '').trim();
    const email = (tools.getCtData(pathEmail) ?? '').trim();
    const partnerActivity = (tools.getCtData(pathPartner) ?? '').trim();
    console.log({ name, email });

    const validateEmail = (v: string) => v.includes('@') && v.includes('.');
    console.log({ validateEmail: validateEmail(email) });

    if (name === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Nome.' });
      return;
    }
    if (email === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Email.' });
      return;
    }

    if (!validateEmail(email)) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Email inválido.' });
      return;
    }

    // Auth
    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification, sendPasswordResetEmail, fetchSignInMethodsForEmail } =
      await import('firebase/auth');

    const fbInit = tools.getCtData('all.temp.fireInit');
    console.log({ fbInit });
    const auth = fbInit ? getAuth(fbInit) : getAuth();

    // ---- Pré-checagem opcional: já existe?
    const methods = await fetchSignInMethodsForEmail(auth, email);
    console.log({ methods });
    if (methods.length > 0) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return; // quebra o fluxo
    }

    const tempPass = '123456'; // ou gere uma senha aleatória
    console.log({ tempPass });
    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);
    console.log({ cred });


    if (name) {
      await updateProfile(cred.user, { displayName: name });
    }

    // >>>>>>>>>>>>>>> ADIÇÃO: criar/atualizar doc em 'users'
    {
      const { getFirestore, doc, setDoc, serverTimestamp } = await import('firebase/firestore');
      const db = fbInit ? getFirestore(fbInit) : getFirestore();

      const uid = cred.user.uid;
      const dataToSet = {
        docId: uid,
        createdAt: serverTimestamp(),
        userName: name,
        userEmail: email,
        userImage: cred.user.photoURL || '',
        partnerActivity,
        typeAccount: "partner",
      };

      await setDoc(doc(db, 'users', uid), dataToSet, { merge: true });
      console.log('users doc criado/atualizado:', { uid, dataToSet });
    }
    // <<<<<<<<<<<<<<< FIM DA ADIÇÃO

    // (opcional) enviar verificação
    const host = "http://localhost:5173";
    // const host = "http://projeto-plante-uma-casa.web.app";

    const acs = {
      url: host + "/auth/complete-signup",
      handleCodeInApp: false
    }
    // await sendEmailVerification(cred.user);
await sendPasswordResetEmail(auth, email, acs);


    tools.setData({ path: 'sc.A12.forms.showErr', value: false });
    tools.setData({ path: 'sc.A12.forms.showSuccess', value: true });
    tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: 'Usuário criado com sucesso!' });


    // Limpar mensagens após 2 segundos
    const delay = () => {
      tools.setData({ path: 'all.toggles.sideRight', value: false });
      tools.setData({ path: 'all.toggles.a12.add', value: false });
      tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: '' });
      tools.setData({ path: 'sc.A12.forms.iptsChanges', value: { partnerName: "", partnerMail: "", partnerActivity: "" } });
    }

    setTimeout(delay, 2500);

    // sucesso...
  } catch (e: any) {
    if (e?.code === 'auth/email-already-in-use') {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return;
    }

    tools.setData({ path: 'sc.A12.forms.showErr', value: true });
    tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Erro ao Criar Parceiro. ' + (e?.message ?? '') });
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a10.addFinance", "==", true ]

]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `FINANCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Quantidade de Parcelas`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "1",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "R$ 600,00",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "24/09/25",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a10.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [`mockCondos`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.list`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a11list",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
	backgroundColor: '#f5f5f5',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 7,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={25}
    fill="red"
    viewBox="0 0 24 25"
    {...props}
  >
    <Path
      stroke="#F5F5F5"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="m11.438 19.25-6.75-6.75 6.75-6.75M5.625 12.5h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.4375 19.25L4.6875 12.5L11.4375 5.75M5.625 12.5H19.3125" stroke="#F5F5F5" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Parceiros`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lista dos Parceiros`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	height: 30,
	backgroundColor: 'transparent',
	paddingHorizontal: 30,
	paddingVertical: 8,
	borderWidth: 2,
	borderRadius: 20,
	borderColor: 'white',
	justifyContent: 'center',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '700',
	color: 'white',
}`
          ],

          children: [
            `Label`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	paddingHorizontal: 60,
	paddingVertical: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	paddingVertical: 10,
	paddingHorizontal: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            ``
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{
borderRadius: 12,
}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.a11.list`,

          itemElements: [
            
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'center',
alignItems: 'center',
flexDirection: 'row',
backgroundColor: 'white',
paddingVertical: 10,
paddingHorizontal: 20,
borderRadius: 12,
shadowColor: '#000',
shadowOffset: { width: 0, height: 4 },
shadowOpacity: 0.1,
shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [`$arg_item`]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_userName`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_userEmail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_partnerActivity`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            ``
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 25,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        
          ],

      styles:[`{
width: '100%',
}`],    args,
        }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [(txt) => {
  try {
    // Garante string
    if (typeof txt !== "string") txt = String(txt ?? "");

    console.log("Raw recebido:", txt, " (type:", typeof txt + ")");

    // Método 1: preferencial - pega todos os dígitos com match
    let digitArr = txt.match(/d/g);
    let digits = (digitArr && digitArr.length) ? digitArr.join("") : "";

    // Se match falhar por algum motivo, fallback robusto:
    if (!digits) {
      digits = Array.from(txt).filter(ch => "0123456789".includes(ch)).join("");
    }

    console.log("Somente dígitos extraídos:", digits);

    // Limita a 8 dígitos (DDMMAAAA)
    digits = digits.slice(0, 8);

    // Formata dinamicamente DD/MM/AAAA
    let formatted = digits;
    if (digits.length > 4) {
      // quando tem DDMM + AAAA...
      formatted = digits.replace(/^(d{2})(d{2})(d{0,4})/, "!#!/!#!/$3");
    } else if (digits.length > 2) {
      // quando tem DD + MM
      formatted = digits.replace(/^(d{2})(d{0,2})/, "!#!/!#!");
    }

    console.log("Formatado:", formatted);

    // Salva no contexto (usar o que seu projeto aceita; tools.setData é preferível aqui)
    if (typeof tools.setData === "function") {
      tools.setData({
        path: "sc.a1.iptChanges.startDate",
        value: formatted
      });
    } else if (tools.functions && typeof tools.functions.setVar === "function") {
      tools.functions.setVar({
        args: "",
        pass: {
          keyPath: ["sc.a1.iptChanges.startDate"],
          value: formatted // ou [formatted] se seu projeto usar array
        }
      });
    } else {
      console.warn("Nenhum setter disponível (tools.setData / tools.functions.setVar).");
    }

    // retornar caso o componente use o retorno
    return formatted;
  } catch (err) {
    console.error("Erro na máscara de data:", err);
    return txt;
  }
}
],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.a1.iptChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.iptChanges.address", name: "Endereço" },
    { path: "sc.a1.iptChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.iptChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.iptChanges.description", name: "Descrição" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    condo: getVal("sc.a1.iptChanges.condo"),
    address: getVal("sc.a1.iptChanges.address"),
    startDate: getVal("sc.a1.iptChanges.startDate"),
    endDate: getVal("sc.a1.iptChanges.endDate"),
    description: getVal("sc.a1.iptChanges.description"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "condos"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

// Atualiza o documento para incluir o próprio ID
    await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Condomínio salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.iptChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.add"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.a1.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.profile`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL DO ADMINISTRADOR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7.addOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.iptsChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.A7.forms.iptsChanges.partnerName", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.iptsChanges.partnerMail", name: "E-mail" },
    { path: "sc.A7.forms.iptsChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.iptsChanges.area", name: "Área" },
    { path: "sc.A7.forms.iptsChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.iptsChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    owner: getVal("sc.A7.forms.iptsChanges.partnerName"),
    email: getVal("sc.A7.forms.iptsChanges.partnerMail"),
    lot: getVal("sc.A7.forms.iptsChanges.lot"),
		area: getVal("sc.A7.forms.iptsChanges.area"),
    totalValue: getVal("sc.A7.forms.iptsChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.iptsChanges.firstInstallment"),
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "lots"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Documento salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A7.forms.iptsChanges"],
        value: [""],
      },
    });

//close Add
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.addOwner"],
        value: [false],
      },
    });

//close sideRight
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7.addOwner`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a7b.editOwner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO LOTE / PROPRIETÁRIO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `lots`, `$var_sc.A7.forms.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.owner`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.owner`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.email`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.email`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Lote`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.lot`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.lot`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.area`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.area`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.totalValue`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.totalValue`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor total da entrada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A7.forms.editChanges.firstInstallment`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges.firstInstallment`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a7.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A7.forms.editChanges.owner", name: "Nome do Proprietário" },
    { path: "sc.A7.forms.editChanges.email", name: "E-mail" },
    { path: "sc.A7.forms.editChanges.lot", name: "Obra" },
    { path: "sc.A7.forms.editChanges.area", name: "Área" },
    { path: "sc.A7.forms.editChanges.totalValue", name: "Valor total da obra" },
		{ path: "sc.A7.forms.editChanges.firstInstallment", name: "Valor total da entrada" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a7.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A7.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    owner: getVal("sc.A7.forms.editChanges.owner"),
    email: getVal("sc.A7.forms.editChanges.email"),
    lot: getVal("sc.A7.forms.editChanges.lot"),
		area: getVal("sc.A7.forms.editChanges.area"),
    totalValue: getVal("sc.A7.forms.editChanges.totalValue"),
    firstInstallment: getVal("sc.A7.forms.editChanges.firstInstallment"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "lots", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a7.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a7.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.editChanges`],
          value: [ ]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a7.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a7b.editOwner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a11b.editPartner", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `users`, `$var_sc.a11b.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A11.forms.editChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.A11.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.A11.forms.editChanges.userName", name: "Nome" },
    { path: "sc.A11.forms.editChanges.userEmail", name: "E-mail" },
    { path: "sc.A11.forms.editChanges.partnerActivity", name: "Área de Atuação" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.A11.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");


// Inicializar Firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

// Importa Firestore
  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.A11.forms.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

// Monta os dados a salvar
  const updatedDoc = {
    userName: getVal("sc.A11.forms.editChanges.userName"),
    userEmail: getVal("sc.A11.forms.editChanges.userEmail"),
    partnerActivity: getVal("sc.A11.forms.editChanges.partnerActivity"),
	updatedAt: serverTimestamp(),
  };

  try {
// Salva o doc
    await updateDoc(doc(db, "users", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);


    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.forms.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a11b.editPartner"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean validation message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.A11.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.validationMessage`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a11b.editPartner`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a12.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `CADASTRO PARCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Área de Atuação`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Escreva...",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  try {
    const pathName = 'sc.A12.forms.iptsChanges.partnerName';
    const pathEmail = 'sc.A12.forms.iptsChanges.partnerMail';
    const pathPartner = 'sc.A12.forms.iptsChanges.partnerActivity';

    const name = (tools.getCtData(pathName) ?? '').trim();
    const email = (tools.getCtData(pathEmail) ?? '').trim();
    const partnerActivity = (tools.getCtData(pathPartner) ?? '').trim();
    console.log({ name, email });

    const validateEmail = (v: string) => v.includes('@') && v.includes('.');
    console.log({ validateEmail: validateEmail(email) });

    if (name === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Nome.' });
      return;
    }
    if (email === "") {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Email.' });
      return;
    }

    if (!validateEmail(email)) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Email inválido.' });
      return;
    }

    // Auth
    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification, sendPasswordResetEmail, fetchSignInMethodsForEmail } =
      await import('firebase/auth');

    const fbInit = tools.getCtData('all.temp.fireInit');
    console.log({ fbInit });
    const auth = fbInit ? getAuth(fbInit) : getAuth();

    // ---- Pré-checagem opcional: já existe?
    const methods = await fetchSignInMethodsForEmail(auth, email);
    console.log({ methods });
    if (methods.length > 0) {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return; // quebra o fluxo
    }

    const tempPass = '123456'; // ou gere uma senha aleatória
    console.log({ tempPass });
    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);
    console.log({ cred });


    if (name) {
      await updateProfile(cred.user, { displayName: name });
    }

    // >>>>>>>>>>>>>>> ADIÇÃO: criar/atualizar doc em 'users'
    {
      const { getFirestore, doc, setDoc, serverTimestamp } = await import('firebase/firestore');
      const db = fbInit ? getFirestore(fbInit) : getFirestore();

      const uid = cred.user.uid;
      const dataToSet = {
        docId: uid,
        createdAt: serverTimestamp(),
        userName: name,
        userEmail: email,
        userImage: cred.user.photoURL || '',
        partnerActivity,
        typeAccount: "partner",
      };

      await setDoc(doc(db, 'users', uid), dataToSet, { merge: true });
      console.log('users doc criado/atualizado:', { uid, dataToSet });
    }
    // <<<<<<<<<<<<<<< FIM DA ADIÇÃO

    // (opcional) enviar verificação
    const host = "http://localhost:5173";
    // const host = "http://projeto-plante-uma-casa.web.app";

    const acs = {
      url: host + "/auth/complete-signup",
      handleCodeInApp: false
    }
    // await sendEmailVerification(cred.user);
await sendPasswordResetEmail(auth, email, acs);


    tools.setData({ path: 'sc.A12.forms.showErr', value: false });
    tools.setData({ path: 'sc.A12.forms.showSuccess', value: true });
    tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: 'Usuário criado com sucesso!' });


    // Limpar mensagens após 2 segundos
    const delay = () => {
      tools.setData({ path: 'all.toggles.sideRight', value: false });
      tools.setData({ path: 'all.toggles.a12.add', value: false });
      tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: '' });
      tools.setData({ path: 'sc.A12.forms.iptsChanges', value: { partnerName: "", partnerMail: "", partnerActivity: "" } });
    }

    setTimeout(delay, 2500);

    // sucesso...
  } catch (e: any) {
    if (e?.code === 'auth/email-already-in-use') {
      tools.setData({ path: 'sc.A12.forms.showErr', value: true });
      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });
      return;
    }

    tools.setData({ path: 'sc.A12.forms.showErr', value: true });
    tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Erro ao Criar Parceiro. ' + (e?.message ?? '') });
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A11.forms.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a12.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
width: '100%',
height: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a10.addFinance", "==", true ]

]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `FINANCEIRO`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 14,
	paddingHorizontal: 18,
	width: '100%',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Quantidade de Parcelas`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "1",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Valor`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "R$ 600,00",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerMail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A7.forms.iptsChanges.partnerMail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "24/09/25",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.A12.forms.iptsChanges.partnerActivity`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A12.forms.iptsChanges.partnerActivity`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "red" }`
          ],

          children: [
            `$var_sc.A12.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ padding: 5, marginTop: 10, textAlign: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A12.forms.showSuccess", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "green" }`
          ],

          children: [
            `$var_sc.A12.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a10.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a10.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
 functions.firebase.where({ args, pass:{

  arrRefStrings: [`users`],
 arrWhere: [(...args) =>
        functions.firebase.whereConds({ args, pass:{
          arrStrings: [
        `typeAccount`, 
        `==`, `partner`],
        }})],
 arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a11.list`],
          value: [`$arg_callback`]
        }})],
 }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"b4list",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b3.profile`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
	backgroundColor: '#f5f5f5',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lista de Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	height: 30,
	backgroundColor: 'transparent',
	paddingHorizontal: 30,
	paddingVertical: 8,
	borderWidth: 2,
	borderRadius: 20,
	borderColor: 'white',
	justifyContent: 'center',
	alignItems: 'center',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a10.addFinance`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '700',
	color: 'white',
}`
          ],

          children: [
            `CRIAR`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ flex:1, width: '100%',}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.b4.list`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'center',
flexDirection: 'row',
paddingHorizontal: '60px',
paddingVertical: '30px',
backgroundColor: 'transparent',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b5.viewCondo`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges`],
          value: [`$arg_item`]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 16,
fontWeight: '700',
color: '#0D141C',
}`
          ],

          children: [
            `$arg_condo`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '400',
color: '#4A739C',
}`
          ],

          children: [
            `$arg_address`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	width: 300,
	zIndex: 1,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: '#E8EDF5',
	paddingHorizontal: 16,
	paddingVertical: 8,
	borderRadius: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b6list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '500',
}`
          ],

          children: [
            `Lotes - Proprietário`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '260px',
	height: '160px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:[`https://www.condominioterranovabauru.com.br/cdn/fotos/portaria_terra_nova_bauru.jpg`],

      args,
    }}/>],

            args,
          }}/>
        
          ],

      styles:[`{
width: '100%',
}`],    args,
        }}/>],
            args,
        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b3.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b3.profile`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '200px',
	height:'200px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '200px',
alignItems: 'center',
justifyContent: 'center',
borderRadius: 5,
borderWidth: 1,
borderColor: '#e6e7e8',
padding: 5,
flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={17}
    fill="red"
    viewBox="0 0 18 17"
    {...props}
  >
    <Path
      stroke="#5C5F6A"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M4.808 16.286H2.412a1.198 1.198 0 0 1-1.198-1.198V5.506m0 0h15.572m-15.572 0 2.647-4.193A1.198 1.198 0 0 1 4.868.714h8.264a1.198 1.198 0 0 1 1.007.6l2.647 4.191m0 0v9.583a1.198 1.198 0 0 1-1.198 1.198h-2.396m-7.187-4.193L9 9.1m0 0 2.995 2.994M9 9.1v7.187M9 .714v4.791"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.80769 16.2857H2.41209C2.09441 16.2857 1.78975 16.1595 1.56511 15.9349C1.34048 15.7103 1.21429 15.4056 1.21429 15.0879V5.5055M1.21429 5.5055H16.7857M1.21429 5.5055L3.86143 1.31318C3.96387 1.13559 4.11017 0.987268 4.28634 0.882406C4.46251 0.777545 4.66264 0.719655 4.86758 0.714279H13.1324C13.3374 0.719655 13.5375 0.777545 13.7137 0.882406C13.8898 0.987268 14.0362 1.13559 14.1386 1.31318L16.7857 5.5055M16.7857 5.5055V15.0879C16.7857 15.4056 16.6595 15.7103 16.4349 15.9349C16.2103 16.1595 15.9056 16.2857 15.5879 16.2857H13.1923M6.00545 12.0934L8.99996 9.09889M8.99996 9.09889L11.9945 12.0934M8.99996 9.09889L9.00004 16.2857M9.00004 0.714279V5.50549" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`#FFF`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#878A92",
  paddingVertical: '5',
}`
          ],

          children: [
            `Carregar Imagem`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a1.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b5.viewCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b5.viewCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.b5.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '200px',
	height:'200px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '200px',
alignItems: 'center',
justifyContent: 'center',
borderRadius: 5,
borderWidth: 1,
borderColor: '#e6e7e8',
padding: 5,
flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={17}
    fill="red"
    viewBox="0 0 18 17"
    {...props}
  >
    <Path
      stroke="#5C5F6A"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M4.808 16.286H2.412a1.198 1.198 0 0 1-1.198-1.198V5.506m0 0h15.572m-15.572 0 2.647-4.193A1.198 1.198 0 0 1 4.868.714h8.264a1.198 1.198 0 0 1 1.007.6l2.647 4.191m0 0v9.583a1.198 1.198 0 0 1-1.198 1.198h-2.396m-7.187-4.193L9 9.1m0 0 2.995 2.994M9 9.1v7.187M9 .714v4.791"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.80769 16.2857H2.41209C2.09441 16.2857 1.78975 16.1595 1.56511 15.9349C1.34048 15.7103 1.21429 15.4056 1.21429 15.0879V5.5055M1.21429 5.5055H16.7857M1.21429 5.5055L3.86143 1.31318C3.96387 1.13559 4.11017 0.987268 4.28634 0.882406C4.46251 0.777545 4.66264 0.719655 4.86758 0.714279H13.1324C13.3374 0.719655 13.5375 0.777545 13.7137 0.882406C13.8898 0.987268 14.0362 1.13559 14.1386 1.31318L16.7857 5.5055M16.7857 5.5055V15.0879C16.7857 15.4056 16.6595 15.7103 16.4349 15.9349C16.2103 16.1595 15.9056 16.2857 15.5879 16.2857H13.1923M6.00545 12.0934L8.99996 9.09889M8.99996 9.09889L11.9945 12.0934M8.99996 9.09889L9.00004 16.2857M9.00004 0.714279V5.50549" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`#FFF`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#878A92",
  paddingVertical: '5',
}`
          ],

          children: [
            `Carregar Imagem`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.updateDocTool({ args, pass:{
   arrRefStrings: [
        `mockCondos`, `$var_sc.a1.editChanges.docId`],
            arrPathData: [`sc.a1.editChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b9.editSteps", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `ADICIONAR ETAPA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#121417',
fontSize: 14,
fontWeight: '700',
left: 4,
}`
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Sub. Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#121417',
fontSize: 14,
fontWeight: '700',
left: 4,
}`
          ],

          children: [
            `Definição do orçamento.`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.date`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.date`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Responsável`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.responsible`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.responsible`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição Detalhada`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`steps`],
            arrPathData: [`sc.b8.editChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b8.addSteps", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
              xmlns="http://www.w3.org/2000/svg"
              width={20}
              height={14}
              viewBox="0 0 20 14"
              {...props}
              >
              <Path
              fillRule="evenodd"
              d="M7.707.293a1 1 0 0 1 0 1.414L3.414 6H19a1 1 0 1 1 0 2H3.414l4.293 4.293a1 1 0 1 1-1.414 1.414l-6-6a1 1 0 0 1 0-1.414l6-6a1 1 0 0 1 1.414 0Z"
              clipRule="evenodd"
              {...props}
              />
              </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "14px",

      largura: "14px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `ADICIONAR ETAPA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={5}
    height={22}
    fill="red"
    viewBox="0 0 5 22"
    {...props}
  >
    <Path
      fill="#315E2D"
      d="M0 19.125a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Zm0-8.5a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Zm0-8.5a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="5" height="22" viewBox="0 0 5 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 19.125C0 18.5614 0.223883 18.0209 0.622398 17.6224C1.02091 17.2239 1.56141 17 2.125 17C2.68859 17 3.22909 17.2239 3.6276 17.6224C4.02612 18.0209 4.25 18.5614 4.25 19.125C4.25 19.6886 4.02612 20.2291 3.6276 20.6276C3.22909 21.0261 2.68859 21.25 2.125 21.25C1.56141 21.25 1.02091 21.0261 0.622398 20.6276C0.223883 20.2291 0 19.6886 0 19.125ZM0 10.625C0 10.0614 0.223883 9.52091 0.622398 9.1224C1.02091 8.72388 1.56141 8.5 2.125 8.5C2.68859 8.5 3.22909 8.72388 3.6276 9.1224C4.02612 9.52091 4.25 10.0614 4.25 10.625C4.25 11.1886 4.02612 11.7291 3.6276 12.1276C3.22909 12.5261 2.68859 12.75 2.125 12.75C1.56141 12.75 1.02091 12.5261 0.622398 12.1276C0.223883 11.7291 0 11.1886 0 10.625ZM0 2.125C0 1.56142 0.223883 1.02091 0.622398 0.622398C1.02091 0.223883 1.56141 0 2.125 0C2.68859 0 3.22909 0.223883 3.6276 0.622398C4.02612 1.02091 4.25 1.56142 4.25 2.125C4.25 2.68859 4.02612 3.22909 3.6276 3.6276C3.22909 4.02612 2.68859 4.25 2.125 4.25C1.56141 4.25 1.02091 4.02612 0.622398 3.6276C0.223883 3.22909 0 2.68859 0 2.125Z" fill="#315E2D"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Sub. Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Definição do Orçamento`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.date`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.date`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Responsável`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.responsible`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.responsible`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição detalhada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
 functions.firebase.uploadFileTool({ args, pass:{
 arrFiles: [`$var_all.temp.images`],
 arrFuncs: [(args, urls) => {
console.log({args, urls});

tools.setData({path: "sc.B9.forms.editChanges.arrImages", value: urls});
}],
 }}), async (...args) =>
        functions.firebase.updateDocTool({ args, pass:{
   arrRefStrings: [
        `steps`, `$var_sc.B9.forms.editChanges.docId`],
            arrPathData: [`sc.B9.forms.editChanges`],
            arrFuncs: [() => {}],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [`condos`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b4.list`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"b6list",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b3.profile`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
	backgroundColor: '#f5f5f5',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 7,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={25}
    fill="red"
    viewBox="0 0 24 25"
    {...props}
  >
    <Path
      stroke="#F5F5F5"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="m11.438 19.25-6.75-6.75 6.75-6.75M5.625 12.5h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.4375 19.25L4.6875 12.5L11.4375 5.75M5.625 12.5H19.3125" stroke="#F5F5F5" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lotes - Proprietário`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lista dos proprietários`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	paddingHorizontal: 60,
	paddingVertical: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	paddingVertical: 10,
	paddingHorizontal: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Proprietário`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `E-mail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Lote`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `Área`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            ``
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{
borderRadius: 12,
}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.b6.list`,

          itemElements: [
            
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '100%',
justifyContent: 'center',
alignItems: 'center',
flexDirection: 'row',
backgroundColor: 'white',
paddingVertical: 10,
paddingHorizontal: 20,
borderRadius: 12,
shadowColor: '#000',
shadowOffset: { width: 0, height: 4 },
shadowOpacity: 0.1,
shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_owner`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_email`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_lot`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
	color: '#555555',
}`
          ],

          children: [
            `$arg_area`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: "fit-content", 
	minWidth: 120, 
	height: 30, 
	backgroundColor: "#fff",
	borderRadius: 20, 
	alignItems: "center",
	justifyContent: "center",
	borderWidth: 2,
	borderColor: "#315e2d",
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: 80,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.email`],
          value: [`$arg_email`]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b7list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ color: "#FFF" }`, `{
	color: "#315e2d",
	fontSize: 12,
	fontWeight: 'bold', 
}`
          ],

          children: [
            `Adicionar Etapa`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 25,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        
          ],

      styles:[`{
width: '100%',
}`],    args,
        }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b3.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b3.profile`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '200px',
	height:'200px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '200px',
alignItems: 'center',
justifyContent: 'center',
borderRadius: 5,
borderWidth: 1,
borderColor: '#e6e7e8',
padding: 5,
flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={17}
    fill="red"
    viewBox="0 0 18 17"
    {...props}
  >
    <Path
      stroke="#5C5F6A"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M4.808 16.286H2.412a1.198 1.198 0 0 1-1.198-1.198V5.506m0 0h15.572m-15.572 0 2.647-4.193A1.198 1.198 0 0 1 4.868.714h8.264a1.198 1.198 0 0 1 1.007.6l2.647 4.191m0 0v9.583a1.198 1.198 0 0 1-1.198 1.198h-2.396m-7.187-4.193L9 9.1m0 0 2.995 2.994M9 9.1v7.187M9 .714v4.791"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.80769 16.2857H2.41209C2.09441 16.2857 1.78975 16.1595 1.56511 15.9349C1.34048 15.7103 1.21429 15.4056 1.21429 15.0879V5.5055M1.21429 5.5055H16.7857M1.21429 5.5055L3.86143 1.31318C3.96387 1.13559 4.11017 0.987268 4.28634 0.882406C4.46251 0.777545 4.66264 0.719655 4.86758 0.714279H13.1324C13.3374 0.719655 13.5375 0.777545 13.7137 0.882406C13.8898 0.987268 14.0362 1.13559 14.1386 1.31318L16.7857 5.5055M16.7857 5.5055V15.0879C16.7857 15.4056 16.6595 15.7103 16.4349 15.9349C16.2103 16.1595 15.9056 16.2857 15.5879 16.2857H13.1923M6.00545 12.0934L8.99996 9.09889M8.99996 9.09889L11.9945 12.0934M8.99996 9.09889L9.00004 16.2857M9.00004 0.714279V5.50549" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`#FFF`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#878A92",
  paddingVertical: '5',
}`
          ],

          children: [
            `Carregar Imagem`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a1.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b5.viewCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b5.viewCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.b5.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '200px',
	height:'200px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '200px',
alignItems: 'center',
justifyContent: 'center',
borderRadius: 5,
borderWidth: 1,
borderColor: '#e6e7e8',
padding: 5,
flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={17}
    fill="red"
    viewBox="0 0 18 17"
    {...props}
  >
    <Path
      stroke="#5C5F6A"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M4.808 16.286H2.412a1.198 1.198 0 0 1-1.198-1.198V5.506m0 0h15.572m-15.572 0 2.647-4.193A1.198 1.198 0 0 1 4.868.714h8.264a1.198 1.198 0 0 1 1.007.6l2.647 4.191m0 0v9.583a1.198 1.198 0 0 1-1.198 1.198h-2.396m-7.187-4.193L9 9.1m0 0 2.995 2.994M9 9.1v7.187M9 .714v4.791"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.80769 16.2857H2.41209C2.09441 16.2857 1.78975 16.1595 1.56511 15.9349C1.34048 15.7103 1.21429 15.4056 1.21429 15.0879V5.5055M1.21429 5.5055H16.7857M1.21429 5.5055L3.86143 1.31318C3.96387 1.13559 4.11017 0.987268 4.28634 0.882406C4.46251 0.777545 4.66264 0.719655 4.86758 0.714279H13.1324C13.3374 0.719655 13.5375 0.777545 13.7137 0.882406C13.8898 0.987268 14.0362 1.13559 14.1386 1.31318L16.7857 5.5055M16.7857 5.5055V15.0879C16.7857 15.4056 16.6595 15.7103 16.4349 15.9349C16.2103 16.1595 15.9056 16.2857 15.5879 16.2857H13.1923M6.00545 12.0934L8.99996 9.09889M8.99996 9.09889L11.9945 12.0934M8.99996 9.09889L9.00004 16.2857M9.00004 0.714279V5.50549" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`#FFF`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#878A92",
  paddingVertical: '5',
}`
          ],

          children: [
            `Carregar Imagem`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.updateDocTool({ args, pass:{
   arrRefStrings: [
        `mockCondos`, `$var_sc.a1.editChanges.docId`],
            arrPathData: [`sc.a1.editChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b9.editSteps", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `ADICIONAR ETAPA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#121417',
fontSize: 14,
fontWeight: '700',
left: 4,
}`
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Sub. Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#121417',
fontSize: 14,
fontWeight: '700',
left: 4,
}`
          ],

          children: [
            `Definição do orçamento.`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.date`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.date`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Responsável`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.responsible`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.responsible`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição Detalhada`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`steps`],
            arrPathData: [`sc.b8.editChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b8.addSteps", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
              xmlns="http://www.w3.org/2000/svg"
              width={20}
              height={14}
              viewBox="0 0 20 14"
              {...props}
              >
              <Path
              fillRule="evenodd"
              d="M7.707.293a1 1 0 0 1 0 1.414L3.414 6H19a1 1 0 1 1 0 2H3.414l4.293 4.293a1 1 0 1 1-1.414 1.414l-6-6a1 1 0 0 1 0-1.414l6-6a1 1 0 0 1 1.414 0Z"
              clipRule="evenodd"
              {...props}
              />
              </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "14px",

      largura: "14px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `ADICIONAR ETAPA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={5}
    height={22}
    fill="red"
    viewBox="0 0 5 22"
    {...props}
  >
    <Path
      fill="#315E2D"
      d="M0 19.125a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Zm0-8.5a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Zm0-8.5a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="5" height="22" viewBox="0 0 5 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 19.125C0 18.5614 0.223883 18.0209 0.622398 17.6224C1.02091 17.2239 1.56141 17 2.125 17C2.68859 17 3.22909 17.2239 3.6276 17.6224C4.02612 18.0209 4.25 18.5614 4.25 19.125C4.25 19.6886 4.02612 20.2291 3.6276 20.6276C3.22909 21.0261 2.68859 21.25 2.125 21.25C1.56141 21.25 1.02091 21.0261 0.622398 20.6276C0.223883 20.2291 0 19.6886 0 19.125ZM0 10.625C0 10.0614 0.223883 9.52091 0.622398 9.1224C1.02091 8.72388 1.56141 8.5 2.125 8.5C2.68859 8.5 3.22909 8.72388 3.6276 9.1224C4.02612 9.52091 4.25 10.0614 4.25 10.625C4.25 11.1886 4.02612 11.7291 3.6276 12.1276C3.22909 12.5261 2.68859 12.75 2.125 12.75C1.56141 12.75 1.02091 12.5261 0.622398 12.1276C0.223883 11.7291 0 11.1886 0 10.625ZM0 2.125C0 1.56142 0.223883 1.02091 0.622398 0.622398C1.02091 0.223883 1.56141 0 2.125 0C2.68859 0 3.22909 0.223883 3.6276 0.622398C4.02612 1.02091 4.25 1.56142 4.25 2.125C4.25 2.68859 4.02612 3.22909 3.6276 3.6276C3.22909 4.02612 2.68859 4.25 2.125 4.25C1.56141 4.25 1.02091 4.02612 0.622398 3.6276C0.223883 3.22909 0 2.68859 0 2.125Z" fill="#315E2D"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Sub. Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Definição do Orçamento`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.date`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.date`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Responsável`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.responsible`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.responsible`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição detalhada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
 functions.firebase.uploadFileTool({ args, pass:{
 arrFiles: [`$var_all.temp.images`],
 arrFuncs: [(args, urls) => {
console.log({args, urls});

tools.setData({path: "sc.B9.forms.editChanges.arrImages", value: urls});
}],
 }}), async (...args) =>
        functions.firebase.updateDocTool({ args, pass:{
   arrRefStrings: [
        `steps`, `$var_sc.B9.forms.editChanges.docId`],
            arrPathData: [`sc.B9.forms.editChanges`],
            arrFuncs: [() => {}],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [`lots`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b6.list`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"b7list",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ backgroundColor: "$var_all.colors.smoke" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	justifyContent: "start",
	alignItems: "center"
}`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 30,
	height: 30,
	borderRadius: 200
}],

      URIvariablePath:[`$var_all.authUser.image`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: 10,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            
        `{ 
	fontWeight: "bold",
	fontSize: 12
}`, `{ 
	color: 'white',
 }`
          ],

          children: [
            `$var_all.authUser.userName`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ width: "100%", height: "100%" }`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 200,
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [true]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b3.profile`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={15}
    height={15}
    fill="red"
    viewBox="0 0 15 15"
    {...props}
  >
    <Path
      fill="#555"
      fillRule="evenodd"
      d="M6.774.04c0 .023-.12.04-.282.04-.161 0-.282.018-.282.041 0 .022-.108.04-.242.04-.135 0-.242.018-.242.04 0 .023-.055.04-.121.04-.067 0-.121.02-.121.041 0 .022-.073.04-.161.04-.09 0-.162.019-.162.04 0 .023-.054.041-.12.041-.067 0-.122.018-.122.04 0 .023-.036.04-.08.04-.045 0-.08.019-.08.041 0 .022-.055.04-.122.04-.066 0-.12.019-.12.04 0 .023-.037.041-.082.041-.044 0-.08.018-.08.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.037.04-.081.04-.044 0-.08.019-.08.04 0 .023-.037.041-.081.041-.045 0-.081.018-.081.04 0 .023-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.081-.032.044-.086.08-.12.08-.035 0-.09.037-.122.081-.032.045-.083.081-.114.081-.03 0-.106.054-.168.12-.062.067-.133.122-.158.122-.058 0-1.294 1.236-1.294 1.294 0 .024-.054.095-.12.158-.067.062-.122.138-.122.168s-.036.082-.08.114c-.045.032-.081.09-.081.13 0 .04-.018.071-.04.071-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.09-.08.13 0 .04-.019.072-.041.072-.022 0-.04.036-.04.08 0 .045-.019.08-.04.08-.023 0-.041.037-.041.082 0 .044-.018.08-.04.08-.023 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.037-.041.081 0 .044-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.055-.041.122 0 .066-.018.12-.04.12-.023 0-.04.091-.04.202 0 .111-.019.202-.041.202-.022 0-.04.09-.04.201 0 .111-.019.202-.04.202-.027 0-.041.39-.041 1.089s.014 1.088.04 1.088c.023 0 .04.108.04.242 0 .135.019.242.041.242.022 0 .04.073.04.162 0 .088.018.16.04.16.023 0 .04.073.04.162 0 .089.02.161.041.161.022 0 .04.055.04.121 0 .067.019.121.04.121.023 0 .041.055.041.121 0 .067.018.121.04.121.023 0 .04.037.04.08 0 .045.019.082.041.082.022 0 .04.054.04.12 0 .067.019.122.04.122.023 0 .041.036.041.08 0 .045.018.08.04.08.023 0 .04.037.04.082 0 .044.019.08.041.08.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.033.041.072 0 .04.036.098.08.13.045.032.081.09.081.13 0 .04.019.072.04.072.023 0 .041.032.041.071 0 .04.036.098.08.13.045.032.081.083.081.114 0 .03.055.106.121.168.067.063.121.133.121.158 0 .058 1.236 1.294 1.294 1.294.025 0 .096.054.158.121s.138.121.168.121c.031 0 .082.036.114.08.032.045.087.081.121.081.035 0 .09.037.121.081.032.044.09.08.13.08.04 0 .072.019.072.04 0 .023.036.041.08.041.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.08.04.045 0 .082.019.082.04 0 .023.036.041.08.041.045 0 .08.018.08.04 0 .023.037.04.081.04.045 0 .081.019.081.041 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.055.041.121.041.067 0 .121.018.121.04 0 .023.055.04.121.04.067 0 .121.019.121.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.092.04.202.04.111 0 .202.019.202.041 0 .024.134.04.323.04.188 0 .322.017.322.04 0 .026.256.041.686.041.43 0 .685-.015.685-.04 0-.024.135-.04.323-.04s.322-.018.322-.041c0-.022.091-.04.202-.04.11 0 .202-.018.202-.04 0-.023.072-.04.16-.04.09 0 .162-.02.162-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.019.121-.04 0-.023.037-.041.08-.041.045 0 .082-.018.082-.04 0-.023.036-.04.08-.04.045 0 .08-.019.08-.041 0-.022.037-.04.082-.04.044 0 .08-.019.08-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.033-.04.072-.04.04 0 .098-.037.13-.081.032-.044.087-.08.121-.08.035 0 .09-.037.121-.081.032-.045.083-.081.114-.081.03 0 .106-.054.168-.12.063-.068.134-.122.158-.122.059 0 1.213-1.155 1.213-1.213 0-.025.055-.096.121-.158.067-.062.121-.135.121-.161 0-.027.055-.1.121-.162.067-.062.121-.141.121-.177 0-.035.019-.064.04-.064.023 0 .041-.033.041-.072 0-.04.036-.098.08-.13.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.037.04-.082 0-.044.019-.08.04-.08.023 0 .041-.037.041-.08 0-.045.018-.082.04-.082.023 0 .04-.054.04-.12 0-.067.019-.121.041-.121.022 0 .04-.037.04-.081 0-.044.019-.08.04-.08.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.022 0 .04-.073.04-.162 0-.089.019-.161.04-.161.023 0 .041-.073.041-.161 0-.09.018-.162.04-.162.023 0 .04-.107.04-.242 0-.134.019-.242.041-.242.026 0 .04-.363.04-1.008s-.014-1.008-.04-1.008c-.022 0-.04-.107-.04-.242 0-.134-.018-.242-.04-.242-.023 0-.04-.09-.04-.201 0-.111-.02-.202-.041-.202-.022 0-.04-.054-.04-.12 0-.067-.019-.122-.04-.122-.023 0-.041-.072-.041-.161 0-.089-.018-.161-.04-.161-.023 0-.04-.037-.04-.081 0-.044-.019-.08-.041-.08-.022 0-.04-.055-.04-.122 0-.066-.019-.12-.04-.12-.023 0-.041-.037-.041-.081 0-.045-.018-.08-.04-.08-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.037-.04-.081 0-.045-.019-.081-.04-.081-.023 0-.041-.032-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.041-.033-.041-.072 0-.04-.036-.098-.08-.13-.045-.032-.081-.086-.081-.12 0-.035-.037-.09-.081-.122-.044-.032-.08-.083-.08-.114 0-.03-.055-.106-.122-.168-.066-.062-.12-.133-.12-.158 0-.058-1.075-1.132-1.132-1.132-.025 0-.114-.073-.2-.162-.084-.088-.179-.161-.209-.161s-.08-.036-.113-.08c-.032-.045-.09-.081-.13-.081-.04 0-.071-.018-.071-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.036-.13-.08-.032-.045-.09-.081-.13-.081-.04 0-.072-.018-.072-.04 0-.023-.036-.04-.08-.04-.045 0-.08-.019-.08-.041 0-.022-.037-.04-.082-.04-.044 0-.08-.019-.08-.04 0-.023-.037-.041-.08-.041-.045 0-.082-.018-.082-.04 0-.023-.036-.04-.08-.04-.044 0-.08-.019-.08-.041 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.054-.04-.121-.04-.066 0-.12-.019-.12-.041 0-.022-.074-.04-.162-.04-.089 0-.162-.019-.162-.04 0-.023-.072-.041-.16-.041-.09 0-.162-.018-.162-.04 0-.023-.09-.04-.202-.04-.11 0-.201-.019-.201-.041 0-.023-.121-.04-.283-.04-.16 0-.282-.018-.282-.04C8.145.014 7.89 0 7.46 0c-.43 0-.686.015-.686.04Zm1.13.645c0 .024.147.04.362.04s.363.017.363.041c0 .022.09.04.202.04.11 0 .201.019.201.04 0 .023.073.041.162.041.088 0 .16.018.16.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .022.055.04.122.04.066 0 .12.019.12.04 0 .023.037.041.081.041.045 0 .081.018.081.04 0 .023.054.04.121.04.066 0 .12.019.12.041 0 .022.037.04.082.04.044 0 .08.018.08.04 0 .023.037.041.08.041.045 0 .082.018.082.04 0 .022.032.04.071.04.04 0 .098.037.13.081.032.045.09.08.13.08.04 0 .072.02.072.041 0 .022.032.04.072.04.039 0 .097.037.13.081.031.045.086.08.12.08.035 0 .09.037.121.081.032.045.083.081.113.081s.142.09.25.202c.108.11.216.201.24.201.058 0 .486.429.486.486 0 .024.09.132.202.24.11.108.201.218.201.243 0 .026.055.098.121.16.067.063.121.138.121.169 0 .03.037.082.08.114.045.032.082.09.082.13 0 .039.018.071.04.071.022 0 .04.037.04.08 0 .045.018.082.04.082.023 0 .04.036.04.08 0 .045.019.08.041.08.022 0 .04.037.04.081 0 .045.018.081.04.081.023 0 .041.036.041.08 0 .045.018.081.04.081.022 0 .04.037.04.081 0 .044.019.08.041.08.022 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.037.041.081 0 .045.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.04.12.023 0 .041.073.041.162 0 .089.018.161.04.161.023 0 .04.073.04.162 0 .088.02.161.041.161.023 0 .04.121.04.282 0 .162.018.283.04.283.026 0 .041.309.041.846 0 .538-.014.847-.04.847-.023 0-.04.108-.04.242s-.018.242-.04.242c-.023 0-.041.073-.041.161 0 .089-.018.162-.04.162-.023 0-.04.072-.04.16 0 .09-.019.162-.041.162-.022 0-.04.055-.04.121 0 .067-.018.121-.04.121-.023 0-.041.055-.041.121 0 .067-.018.121-.04.121-.022 0-.04.036-.04.08 0 .045-.019.081-.041.081-.022 0-.04.037-.04.08 0 .045-.019.082-.04.082-.023 0-.041.036-.041.08 0 .045-.018.08-.04.08-.023 0-.04.037-.04.082 0 .044-.019.08-.04.08-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.036-.04.08 0 .044-.019.08-.041.08-.022 0-.04.033-.04.072 0 .04-.037.098-.081.13-.045.032-.08.083-.08.114 0 .03-.055.107-.122.169-.066.062-.12.134-.12.16 0 .026-.073.117-.162.203-.089.085-.161.174-.161.199 0 .062-.512.567-.575.567-.03 0-.079.036-.11.08-.083.114-.122.1-.122-.04 0-.067-.018-.121-.04-.121-.022 0-.04-.073-.04-.161 0-.089-.019-.162-.04-.162-.023 0-.041-.054-.041-.12 0-.067-.018-.122-.04-.122-.023 0-.04-.054-.04-.12 0-.067-.019-.121-.041-.121-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.033-.04-.072 0-.04-.037-.098-.081-.13-.044-.032-.08-.083-.08-.113s-.073-.124-.162-.21c-.089-.085-.161-.175-.161-.2 0-.058-.267-.324-.325-.324-.025 0-.097-.054-.16-.12-.061-.067-.141-.122-.176-.122-.036 0-.065-.018-.065-.04 0-.022-.036-.04-.08-.04-.045 0-.081-.018-.081-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.02-.121-.041 0-.024-.148-.04-.363-.04s-.363.016-.363.04c0 .022-.054.04-.121.04s-.121.018-.121.04c0 .023-.05.04-.112.04a.22.22 0 0 0-.17.081c-.032.045-.09.081-.13.081-.04 0-.072.018-.072.04 0 .023-.054.04-.12.04-.067 0-.122.019-.122.041 0 .024-.174.04-.443.04-.27 0-.444-.016-.444-.04 0-.022-.054-.04-.12-.04-.067 0-.122-.018-.122-.04 0-.023-.032-.041-.072-.041-.039 0-.097-.036-.13-.08a.22.22 0 0 0-.17-.081c-.061 0-.112-.018-.112-.04 0-.023-.054-.04-.12-.04-.067 0-.122-.02-.122-.041 0-.024-.147-.04-.363-.04-.215 0-.362.016-.362.04 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.037.04-.081.04-.044 0-.08.019-.08.041 0 .022-.03.04-.065.04-.036 0-.115.055-.178.121-.062.067-.133.121-.158.121-.06 0-.325.266-.325.325 0 .024-.073.114-.162.2-.088.085-.161.18-.161.21s-.036.08-.08.112c-.045.032-.081.09-.081.13 0 .04-.018.072-.04.072-.023 0-.041.036-.041.08 0 .045-.018.081-.04.081-.022 0-.04.036-.04.08 0 .045-.019.081-.04.081-.023 0-.041.037-.041.08 0 .045-.018.082-.04.082-.023 0-.04.054-.04.12 0 .067-.02.121-.041.121-.022 0-.04.055-.04.121 0 .067-.019.121-.04.121-.023 0-.041.073-.041.162 0 .088-.018.161-.04.161-.023 0-.04.054-.04.121 0 .066-.019.12-.041.12a.04.04 0 0 1-.04-.04c0-.022-.028-.04-.062-.04-.069 0-.664-.58-.664-.647 0-.024-.091-.132-.202-.24-.11-.108-.202-.22-.202-.25s-.036-.08-.08-.113c-.045-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.09-.081-.13 0-.039-.018-.071-.04-.071-.023 0-.04-.037-.04-.08 0-.045-.019-.082-.041-.082-.022 0-.04-.032-.04-.071 0-.04-.037-.098-.081-.13a.22.22 0 0 1-.08-.17c0-.062-.019-.112-.041-.112-.022 0-.04-.037-.04-.081 0-.044-.018-.08-.04-.08-.023 0-.041-.037-.041-.081 0-.045-.018-.081-.04-.081-.022 0-.04-.054-.04-.121 0-.066-.019-.12-.04-.12-.023 0-.041-.055-.041-.122 0-.066-.018-.12-.04-.12-.023 0-.04-.055-.04-.122 0-.066-.019-.12-.041-.12-.022 0-.04-.092-.04-.202 0-.111-.019-.202-.04-.202-.023 0-.041-.108-.041-.242s-.018-.242-.04-.242c-.026 0-.04-.322-.04-.887s.014-.887.04-.887c.022 0 .04-.108.04-.242s.018-.242.04-.242c.022 0 .04-.09.04-.202 0-.11.019-.201.04-.201.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.055.04-.121 0-.067.019-.121.041-.121.022 0 .04-.054.04-.121S1.067 5 1.088 5c.023 0 .041-.036.041-.08 0-.045.018-.081.04-.081.023 0 .04-.037.04-.08 0-.045.019-.082.041-.082.022 0 .04-.05.04-.112a.22.22 0 0 1 .081-.17c.044-.032.08-.09.08-.13 0-.04.019-.071.04-.071.023 0 .041-.037.041-.081 0-.044.018-.08.04-.08.023 0 .04-.033.04-.072 0-.04.037-.098.082-.13.044-.032.08-.083.08-.114 0-.03.055-.106.121-.169.067-.062.121-.134.121-.16 0-.026.073-.117.161-.203.09-.085.162-.174.162-.199 0-.057.59-.647.647-.647.025 0 .114-.073.2-.162.085-.088.18-.16.21-.16s.08-.037.112-.082c.032-.044.086-.08.121-.08s.089-.036.121-.08c.032-.045.086-.081.121-.081s.089-.037.12-.081c.033-.044.091-.08.13-.08.04 0 .073-.019.073-.041 0-.022.036-.04.08-.04.045 0 .08-.019.08-.04 0-.023.037-.041.081-.041.045 0 .081-.018.081-.04 0-.023.036-.04.08-.04.045 0 .081-.019.081-.041 0-.022.055-.04.121-.04.067 0 .121-.018.121-.04 0-.023.037-.041.081-.041.044 0 .08-.018.08-.04 0-.022.055-.04.122-.04.066 0 .12-.019.12-.04 0-.023.055-.041.122-.041.066 0 .12-.018.12-.04 0-.023.073-.04.162-.04.089 0 .161-.019.161-.041 0-.022.09-.04.202-.04.11 0 .201-.019.201-.04 0-.025.148-.041.363-.041s.363-.017.363-.04c0-.025.175-.04.444-.04s.443.015.443.04Zm-.969 1.613c0 .023-.072.04-.16.04-.09 0-.162.019-.162.041 0 .022-.055.04-.121.04-.067 0-.121.018-.121.04 0 .023-.054.041-.121.041s-.121.018-.121.04c0 .022-.036.04-.08.04-.045 0-.081.019-.081.041 0 .022-.033.04-.072.04-.04 0-.098.037-.13.08-.032.045-.081.082-.11.082-.068 0-.817.749-.817.817 0 .028-.037.078-.08.11-.045.032-.082.09-.082.13 0 .04-.018.072-.04.072-.022 0-.04.036-.04.08 0 .045-.018.08-.04.08-.023 0-.04.055-.04.122 0 .066-.019.12-.041.12-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.091-.041.202 0 .111-.018.202-.04.202-.025 0-.04.161-.04.403 0 .242.015.403.04.403.022 0 .04.108.04.242 0 .135.018.242.04.242.022 0 .04.073.04.162 0 .088.019.16.04.16.023 0 .041.037.041.082 0 .044.018.08.04.08.023 0 .04.055.04.121 0 .067.019.121.041.121.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.037.041.081 0 .044.018.08.04.08.023 0 .04.037.04.081 0 .045.019.081.041.081.022 0 .04.036.04.08 0 .045.019.081.04.081.023 0 .041.03.041.065s.054.115.121.177c.066.062.12.133.12.158 0 .063.755.81.818.81.029 0 .078.036.11.08.032.045.09.081.13.081.04 0 .072.018.072.04 0 .023.036.04.08.04.045 0 .081.02.081.041 0 .022.055.04.121.04.067 0 .121.019.121.04 0 .023.09.041.202.041.11 0 .201.018.201.04 0 .024.121.04.283.04.161 0 .282-.016.282-.04 0-.022.09-.04.202-.04.11 0 .201-.018.201-.04 0-.022.036-.04.08-.04.045 0 .081-.019.081-.04 0-.023.055-.041.121-.041.067 0 .121-.018.121-.04 0-.023.033-.04.072-.04.04 0 .098-.037.13-.081.032-.045.082-.081.11-.081.068 0 .817-.75.817-.817 0-.029.037-.078.081-.11.044-.032.08-.087.08-.121 0-.035.037-.09.081-.121.045-.032.081-.09.081-.13 0-.04.018-.072.04-.072.023 0 .04-.036.04-.08 0-.045.019-.081.041-.081.022 0 .04-.037.04-.08 0-.045.018-.082.04-.082.023 0 .04-.036.04-.08 0-.045.02-.08.041-.08.022 0 .04-.055.04-.122 0-.066.019-.12.04-.12.023 0 .041-.055.041-.122 0-.066.018-.12.04-.12.023 0 .04-.055.04-.122 0-.066.019-.12.041-.12.023 0 .04-.108.04-.243 0-.134.018-.242.04-.242.024 0 .041-.134.041-.322s-.017-.323-.04-.323-.04-.107-.04-.242c0-.134-.018-.242-.04-.242-.023 0-.041-.072-.041-.16 0-.09-.018-.162-.04-.162-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.05-.04-.113a.22.22 0 0 0-.081-.17c-.044-.032-.08-.086-.08-.12 0-.035-.037-.09-.081-.122-.045-.032-.081-.081-.081-.11 0-.068-.668-.736-.736-.736-.03 0-.079-.037-.11-.081-.033-.044-.091-.08-.13-.08-.04 0-.072-.019-.072-.041 0-.022-.037-.04-.081-.04-.044 0-.08-.018-.08-.04 0-.023-.055-.041-.122-.041-.066 0-.12-.018-.12-.04 0-.022-.055-.04-.122-.04-.066 0-.12-.019-.12-.041 0-.022-.073-.04-.162-.04-.089 0-.161-.018-.161-.04 0-.025-.202-.04-.524-.04-.323 0-.525.015-.525.04Zm.888.646c0 .022.09.04.201.04.111 0 .202.018.202.04 0 .022.036.04.08.04.045 0 .081.019.081.04 0 .023.05.041.112.041a.22.22 0 0 1 .17.08c.032.045.083.081.114.081.03 0 .106.055.169.121.062.067.133.121.159.121.06 0 .244.185.244.244 0 .026.054.097.12.16.067.062.122.142.122.177 0 .036.018.065.04.065.022 0 .04.036.04.08 0 .045.019.08.04.08.023 0 .041.037.041.081 0 .045.018.081.04.081.023 0 .04.055.04.121 0 .067.019.121.041.121.023 0 .04.121.04.282 0 .162.018.283.04.283.023 0 .041.054.041.12 0 .067-.018.122-.04.122-.023 0-.04.12-.04.282 0 .161-.018.282-.041.282-.022 0-.04.073-.04.161 0 .089-.018.162-.04.162-.023 0-.04.036-.04.08 0 .045-.02.08-.041.08-.022 0-.04.055-.04.122 0 .066-.019.12-.04.12-.023 0-.041.037-.041.081 0 .045-.018.081-.04.081-.023 0-.04.032-.04.072 0 .04-.037.098-.082.13-.044.032-.08.09-.08.13 0 .04-.018.071-.04.071-.023 0-.04.028-.04.061 0 .08-.828.907-.908.907-.033 0-.06.018-.06.04 0 .023-.037.04-.081.04-.045 0-.08.019-.08.041 0 .022-.037.04-.081.04-.045 0-.081.019-.081.04 0 .023-.09.041-.202.041-.11 0-.201.018-.201.04 0 .023-.055.04-.121.04-.067 0-.121-.017-.121-.04 0-.022-.091-.04-.202-.04-.11 0-.202-.018-.202-.04 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.081-.041-.045 0-.081-.018-.081-.04 0-.023-.029-.04-.064-.04s-.133-.073-.218-.162c-.086-.089-.176-.161-.202-.161-.06 0-.161-.102-.161-.162 0-.026-.073-.116-.162-.201-.088-.086-.16-.18-.16-.21s-.037-.081-.081-.113c-.045-.032-.081-.09-.081-.13 0-.04-.018-.072-.04-.072-.023 0-.04-.036-.04-.08 0-.045-.019-.08-.041-.08-.022 0-.04-.037-.04-.082 0-.044-.019-.08-.04-.08-.023 0-.041-.055-.041-.121 0-.067-.018-.121-.04-.121-.023 0-.04-.036-.04-.08 0-.045-.019-.081-.041-.081-.022 0-.04-.073-.04-.162 0-.088-.019-.161-.04-.161-.024 0-.041-.12-.041-.282 0-.162-.017-.282-.04-.282-.022 0-.04-.091-.04-.202 0-.111.018-.202.04-.202.022 0 .04-.09.04-.201 0-.111.018-.202.04-.202.022 0 .04-.054.04-.12 0-.067.019-.122.041-.122.022 0 .04-.036.04-.08 0-.045.018-.081.04-.081.023 0 .04-.036.04-.08 0-.045.02-.081.041-.081.022 0 .04-.033.04-.072 0-.04.037-.098.081-.13.045-.032.08-.082.08-.11 0-.07.346-.414.414-.414.03 0 .08-.037.111-.08.032-.045.086-.082.121-.082s.089-.036.121-.08a.22.22 0 0 1 .17-.08c.062 0 .112-.019.112-.041 0-.022.037-.04.08-.04.045 0 .082-.019.082-.04 0-.023.09-.041.201-.041.111 0 .202-.018.202-.04 0-.024.148-.04.363-.04s.363.016.363.04Zm-1.855 7.419c0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.036.04.08.04.045 0 .081.019.081.041 0 .022.037.04.081.04.044 0 .08.019.08.04 0 .023.037.041.081.041.045 0 .08.018.08.04 0 .023.055.04.122.04.066 0 .12.019.12.041 0 .025.23.04.606.04s.605-.015.605-.04c0-.022.054-.04.12-.04.067 0 .121-.018.121-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.022.037-.04.081-.04.045 0 .081-.019.081-.04 0-.023.036-.041.08-.041.045 0 .081-.018.081-.04 0-.023.037-.04.081-.04.044 0 .08-.019.08-.041 0-.023.122-.04.283-.04.161 0 .282.017.282.04 0 .022.036.04.08.04.045 0 .081.018.081.04 0 .023.028.04.062.04.074 0 .664.583.664.657 0 .028.037.078.08.11.045.032.082.09.082.13 0 .04.018.072.04.072.022 0 .04.032.04.071 0 .04.037.098.08.13a.22.22 0 0 1 .082.17c0 .062.018.112.04.112.022 0 .04.037.04.081 0 .044.018.08.04.08.023 0 .04.055.04.122 0 .066.019.12.041.12.022 0 .04.073.04.162 0 .089.018.161.04.161.024 0 .041.135.041.323 0 .282-.009.322-.072.322-.04 0-.098.037-.13.081-.032.044-.09.08-.13.08-.039 0-.071.019-.071.041 0 .022-.037.04-.08.04-.045 0-.082.018-.082.04 0 .023-.036.041-.08.041-.044 0-.08.018-.08.04 0 .022-.037.04-.081.04-.045 0-.081.019-.081.041 0 .022-.036.04-.08.04-.045 0-.081.019-.081.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.055.04-.121.04-.067 0-.121.019-.121.04 0 .023-.055.041-.121.041-.067 0-.121.018-.121.04 0 .023-.073.04-.161.04-.09 0-.162.019-.162.041 0 .022-.09.04-.201.04-.111 0-.202.019-.202.04 0 .024-.12.041-.282.041-.162 0-.282.018-.282.04 0 .026-.229.04-.605.04-.377 0-.605-.014-.605-.04 0-.023-.121-.04-.282-.04-.162 0-.283-.017-.283-.04 0-.022-.09-.04-.201-.04-.111 0-.202-.019-.202-.04 0-.023-.072-.041-.161-.041-.089 0-.161-.018-.161-.04 0-.023-.055-.04-.121-.04-.067 0-.121-.019-.121-.041 0-.022-.055-.04-.121-.04-.067 0-.121-.018-.121-.04 0-.023-.055-.041-.121-.041-.067 0-.121-.018-.121-.04 0-.022-.037-.04-.08-.04-.045 0-.082-.019-.082-.041 0-.022-.036-.04-.08-.04-.045 0-.08-.019-.08-.04 0-.023-.037-.041-.082-.041-.044 0-.08-.018-.08-.04 0-.023-.036-.04-.08-.04-.045 0-.081-.019-.081-.04 0-.023-.033-.041-.072-.041-.04 0-.098-.037-.13-.08-.032-.045-.09-.082-.13-.082-.063 0-.072-.04-.072-.322 0-.188.017-.323.04-.323s.041-.072.041-.161c0-.089.018-.161.04-.161.022 0 .04-.055.04-.121 0-.067.019-.121.04-.121.023 0 .041-.055.041-.121 0-.067.018-.121.04-.121.023 0 .04-.037.04-.08 0-.045.02-.082.041-.082.022 0 .04-.032.04-.071 0-.04.037-.098.081-.13.045-.032.08-.087.08-.121 0-.035.037-.089.081-.121.045-.032.081-.082.081-.11 0-.074.59-.656.665-.656.033 0 .06-.018.06-.04 0-.023.037-.04.082-.04.044 0 .08-.019.08-.041 0-.023.121-.04.282-.04.162 0 .283.017.283.04Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.77419 0.0403226C6.77419 0.0633468 6.65323 0.0806452 6.49194 0.0806452C6.33065 0.0806452 6.20968 0.0979436 6.20968 0.120968C6.20968 0.143387 6.10214 0.16129 5.96774 0.16129C5.83335 0.16129 5.72581 0.179194 5.72581 0.201613C5.72581 0.22379 5.67137 0.241935 5.60484 0.241935C5.53831 0.241935 5.48387 0.260081 5.48387 0.282258C5.48387 0.304435 5.41129 0.322581 5.32258 0.322581C5.23387 0.322581 5.16129 0.340726 5.16129 0.362903C5.16129 0.385081 5.10686 0.403226 5.04032 0.403226C4.97379 0.403226 4.91936 0.421371 4.91936 0.443548C4.91936 0.465726 4.88306 0.483871 4.83871 0.483871C4.79435 0.483871 4.75807 0.502016 4.75807 0.524194C4.75807 0.546371 4.70363 0.564516 4.6371 0.564516C4.57056 0.564516 4.51613 0.582661 4.51613 0.604839C4.51613 0.627016 4.47984 0.645161 4.43548 0.645161C4.39113 0.645161 4.35484 0.663306 4.35484 0.685484C4.35484 0.707661 4.31855 0.725806 4.27419 0.725806C4.22984 0.725806 4.19355 0.743952 4.19355 0.766129C4.19355 0.788306 4.15726 0.806452 4.1129 0.806452C4.06855 0.806452 4.03226 0.824597 4.03226 0.846774C4.03226 0.868952 3.99597 0.887097 3.95161 0.887097C3.90726 0.887097 3.87097 0.905242 3.87097 0.927419C3.87097 0.949597 3.83468 0.967742 3.79032 0.967742C3.74597 0.967742 3.70968 0.985887 3.70968 1.00806C3.70968 1.03024 3.67738 1.04839 3.63794 1.04839C3.59847 1.04839 3.54004 1.08468 3.50806 1.12903C3.47609 1.17339 3.42165 1.20968 3.3871 1.20968C3.35254 1.20968 3.29811 1.24597 3.26613 1.29032C3.23415 1.33468 3.18298 1.37097 3.15242 1.37097C3.1219 1.37097 3.04601 1.4254 2.98387 1.49194C2.92173 1.55847 2.85081 1.6129 2.82625 1.6129C2.76794 1.6129 1.53226 2.84859 1.53226 2.9069C1.53226 2.93145 1.47782 3.00238 1.41129 3.06452C1.34476 3.12665 1.29032 3.20254 1.29032 3.23306C1.29032 3.26363 1.25403 3.3148 1.20968 3.34677C1.16532 3.37875 1.12903 3.43718 1.12903 3.47665C1.12903 3.51609 1.11089 3.54839 1.08871 3.54839C1.06653 3.54839 1.04839 3.58069 1.04839 3.62012C1.04839 3.6596 1.0121 3.71802 0.967742 3.75C0.923387 3.78198 0.887097 3.8404 0.887097 3.87988C0.887097 3.91931 0.868952 3.95161 0.846774 3.95161C0.824597 3.95161 0.806452 3.9879 0.806452 4.03226C0.806452 4.07661 0.788307 4.1129 0.766129 4.1129C0.743952 4.1129 0.725806 4.14919 0.725806 4.19355C0.725806 4.2379 0.707661 4.27419 0.685484 4.27419C0.663307 4.27419 0.645161 4.31048 0.645161 4.35484C0.645161 4.39919 0.627016 4.43548 0.604839 4.43548C0.582661 4.43548 0.564516 4.48992 0.564516 4.55645C0.564516 4.62298 0.546371 4.67742 0.524194 4.67742C0.502016 4.67742 0.483871 4.71371 0.483871 4.75806C0.483871 4.80242 0.465726 4.83871 0.443548 4.83871C0.421371 4.83871 0.403226 4.89315 0.403226 4.95968C0.403226 5.02621 0.385081 5.08065 0.362903 5.08065C0.340726 5.08065 0.322581 5.13508 0.322581 5.20161C0.322581 5.26815 0.304436 5.32258 0.282258 5.32258C0.260081 5.32258 0.241936 5.37702 0.241936 5.44355C0.241936 5.51008 0.22379 5.56452 0.201613 5.56452C0.179435 5.56452 0.16129 5.65524 0.16129 5.76613C0.16129 5.87702 0.143145 5.96774 0.120968 5.96774C0.0987903 5.96774 0.0806452 6.05847 0.0806452 6.16935C0.0806452 6.28024 0.0625 6.37097 0.0403226 6.37097C0.0144355 6.37097 0 6.76077 0 7.45968C0 8.15859 0.0144355 8.54839 0.0403226 8.54839C0.0627419 8.54839 0.0806452 8.65593 0.0806452 8.79032C0.0806452 8.92472 0.0985484 9.03226 0.120968 9.03226C0.143145 9.03226 0.16129 9.10484 0.16129 9.19355C0.16129 9.28226 0.179435 9.35484 0.201613 9.35484C0.22379 9.35484 0.241936 9.42742 0.241936 9.51613C0.241936 9.60484 0.260081 9.67742 0.282258 9.67742C0.304436 9.67742 0.322581 9.73185 0.322581 9.79839C0.322581 9.86492 0.340726 9.91936 0.362903 9.91936C0.385081 9.91936 0.403226 9.97379 0.403226 10.0403C0.403226 10.1069 0.421371 10.1613 0.443548 10.1613C0.465726 10.1613 0.483871 10.1976 0.483871 10.2419C0.483871 10.2863 0.502016 10.3226 0.524194 10.3226C0.546371 10.3226 0.564516 10.377 0.564516 10.4435C0.564516 10.5101 0.582661 10.5645 0.604839 10.5645C0.627016 10.5645 0.645161 10.6008 0.645161 10.6452C0.645161 10.6895 0.663307 10.7258 0.685484 10.7258C0.707661 10.7258 0.725806 10.7621 0.725806 10.8065C0.725806 10.8508 0.743952 10.8871 0.766129 10.8871C0.788307 10.8871 0.806452 10.9234 0.806452 10.9677C0.806452 11.0121 0.824597 11.0484 0.846774 11.0484C0.868952 11.0484 0.887097 11.0807 0.887097 11.1201C0.887097 11.1596 0.923387 11.218 0.967742 11.25C1.0121 11.282 1.04839 11.3404 1.04839 11.3799C1.04839 11.4193 1.06653 11.4516 1.08871 11.4516C1.11089 11.4516 1.12903 11.4839 1.12903 11.5233C1.12903 11.5628 1.16532 11.6213 1.20968 11.6532C1.25403 11.6852 1.29032 11.7364 1.29032 11.7669C1.29032 11.7975 1.34476 11.8733 1.41129 11.9355C1.47782 11.9976 1.53226 12.0685 1.53226 12.0931C1.53226 12.1514 2.76794 13.3871 2.82625 13.3871C2.85081 13.3871 2.92173 13.4415 2.98387 13.5081C3.04601 13.5746 3.1219 13.629 3.15242 13.629C3.18298 13.629 3.23415 13.6653 3.26613 13.7097C3.29811 13.754 3.35254 13.7903 3.3871 13.7903C3.42165 13.7903 3.47609 13.8266 3.50806 13.871C3.54004 13.9153 3.59847 13.9516 3.63794 13.9516C3.67738 13.9516 3.70968 13.9698 3.70968 13.9919C3.70968 14.0141 3.74597 14.0323 3.79032 14.0323C3.83468 14.0323 3.87097 14.0504 3.87097 14.0726C3.87097 14.0948 3.90726 14.1129 3.95161 14.1129C3.99597 14.1129 4.03226 14.131 4.03226 14.1532C4.03226 14.1754 4.06855 14.1935 4.1129 14.1935C4.15726 14.1935 4.19355 14.2117 4.19355 14.2339C4.19355 14.256 4.22984 14.2742 4.27419 14.2742C4.31855 14.2742 4.35484 14.2923 4.35484 14.3145C4.35484 14.3367 4.39113 14.3548 4.43548 14.3548C4.47984 14.3548 4.51613 14.373 4.51613 14.3952C4.51613 14.4173 4.55242 14.4355 4.59677 14.4355C4.64113 14.4355 4.67742 14.4536 4.67742 14.4758C4.67742 14.498 4.73186 14.5161 4.79839 14.5161C4.86492 14.5161 4.91936 14.5343 4.91936 14.5565C4.91936 14.5786 4.97379 14.5968 5.04032 14.5968C5.10686 14.5968 5.16129 14.6149 5.16129 14.6371C5.16129 14.6593 5.21573 14.6774 5.28226 14.6774C5.34879 14.6774 5.40323 14.6956 5.40323 14.7177C5.40323 14.7399 5.47581 14.7581 5.56452 14.7581C5.65323 14.7581 5.72581 14.7762 5.72581 14.7984C5.72581 14.8206 5.81653 14.8387 5.92742 14.8387C6.03831 14.8387 6.12903 14.8569 6.12903 14.879C6.12903 14.9025 6.26343 14.9194 6.45161 14.9194C6.6398 14.9194 6.77419 14.9362 6.77419 14.9597C6.77419 14.985 7.02956 15 7.45968 15C7.8898 15 8.14516 14.985 8.14516 14.9597C8.14516 14.9362 8.27956 14.9194 8.46774 14.9194C8.65593 14.9194 8.79032 14.9025 8.79032 14.879C8.79032 14.8569 8.88105 14.8387 8.99194 14.8387C9.10282 14.8387 9.19355 14.8206 9.19355 14.7984C9.19355 14.7762 9.26613 14.7581 9.35484 14.7581C9.44355 14.7581 9.51613 14.7399 9.51613 14.7177C9.51613 14.6956 9.57057 14.6774 9.6371 14.6774C9.70363 14.6774 9.75807 14.6593 9.75807 14.6371C9.75807 14.6149 9.8125 14.5968 9.87903 14.5968C9.94557 14.5968 10 14.5786 10 14.5565C10 14.5343 10.0363 14.5161 10.0806 14.5161C10.125 14.5161 10.1613 14.498 10.1613 14.4758C10.1613 14.4536 10.2157 14.4355 10.2823 14.4355C10.3488 14.4355 10.4032 14.4173 10.4032 14.3952C10.4032 14.373 10.4395 14.3548 10.4839 14.3548C10.5282 14.3548 10.5645 14.3367 10.5645 14.3145C10.5645 14.2923 10.6008 14.2742 10.6452 14.2742C10.6895 14.2742 10.7258 14.256 10.7258 14.2339C10.7258 14.2117 10.7621 14.1935 10.8065 14.1935C10.8508 14.1935 10.8871 14.1754 10.8871 14.1532C10.8871 14.131 10.9234 14.1129 10.9677 14.1129C11.0121 14.1129 11.0484 14.0948 11.0484 14.0726C11.0484 14.0504 11.0847 14.0323 11.129 14.0323C11.1734 14.0323 11.2097 14.0141 11.2097 13.9919C11.2097 13.9698 11.242 13.9516 11.2814 13.9516C11.3209 13.9516 11.3793 13.9153 11.4113 13.871C11.4433 13.8266 11.4977 13.7903 11.5323 13.7903C11.5668 13.7903 11.6213 13.754 11.6532 13.7097C11.6852 13.6653 11.7364 13.629 11.7669 13.629C11.7975 13.629 11.8733 13.5746 11.9355 13.5081C11.9976 13.4415 12.0686 13.3871 12.0931 13.3871C12.1515 13.3871 13.3065 12.2321 13.3065 12.1738C13.3065 12.1492 13.3609 12.0783 13.4274 12.0161C13.494 11.954 13.5484 11.8814 13.5484 11.8548C13.5484 11.8283 13.6028 11.7557 13.6694 11.6935C13.7359 11.6314 13.7903 11.5515 13.7903 11.5161C13.7903 11.4806 13.8085 11.4516 13.8306 11.4516C13.8528 11.4516 13.871 11.4193 13.871 11.3799C13.871 11.3404 13.9073 11.282 13.9516 11.25C13.996 11.218 14.0323 11.1596 14.0323 11.1201C14.0323 11.0807 14.0504 11.0484 14.0726 11.0484C14.0948 11.0484 14.1129 11.0121 14.1129 10.9677C14.1129 10.9234 14.1311 10.8871 14.1532 10.8871C14.1754 10.8871 14.1935 10.8508 14.1935 10.8065C14.1935 10.7621 14.2117 10.7258 14.2339 10.7258C14.2561 10.7258 14.2742 10.6895 14.2742 10.6452C14.2742 10.6008 14.2923 10.5645 14.3145 10.5645C14.3367 10.5645 14.3548 10.5101 14.3548 10.4435C14.3548 10.377 14.373 10.3226 14.3952 10.3226C14.4173 10.3226 14.4355 10.2863 14.4355 10.2419C14.4355 10.1976 14.4536 10.1613 14.4758 10.1613C14.498 10.1613 14.5161 10.1069 14.5161 10.0403C14.5161 9.97379 14.5343 9.91936 14.5565 9.91936C14.5786 9.91936 14.5968 9.86492 14.5968 9.79839C14.5968 9.73185 14.6149 9.67742 14.6371 9.67742C14.6593 9.67742 14.6774 9.60484 14.6774 9.51613C14.6774 9.42742 14.6956 9.35484 14.7177 9.35484C14.7399 9.35484 14.7581 9.28226 14.7581 9.19355C14.7581 9.10484 14.7762 9.03226 14.7984 9.03226C14.8208 9.03226 14.8387 8.92472 14.8387 8.79032C14.8387 8.65593 14.8566 8.54839 14.879 8.54839C14.9048 8.54839 14.9194 8.18548 14.9194 7.54032C14.9194 6.89516 14.9048 6.53226 14.879 6.53226C14.8566 6.53226 14.8387 6.42472 14.8387 6.29032C14.8387 6.15593 14.8208 6.04839 14.7984 6.04839C14.7762 6.04839 14.7581 5.95766 14.7581 5.84677C14.7581 5.73589 14.7399 5.64516 14.7177 5.64516C14.6956 5.64516 14.6774 5.59073 14.6774 5.52419C14.6774 5.45766 14.6593 5.40323 14.6371 5.40323C14.6149 5.40323 14.5968 5.33065 14.5968 5.24194C14.5968 5.15323 14.5786 5.08065 14.5565 5.08065C14.5343 5.08065 14.5161 5.04435 14.5161 5C14.5161 4.95565 14.498 4.91935 14.4758 4.91935C14.4536 4.91935 14.4355 4.86492 14.4355 4.79839C14.4355 4.73185 14.4173 4.67742 14.3952 4.67742C14.373 4.67742 14.3548 4.64113 14.3548 4.59677C14.3548 4.55242 14.3367 4.51613 14.3145 4.51613C14.2923 4.51613 14.2742 4.46169 14.2742 4.39516C14.2742 4.32863 14.2561 4.27419 14.2339 4.27419C14.2117 4.27419 14.1935 4.2379 14.1935 4.19355C14.1935 4.14919 14.1754 4.1129 14.1532 4.1129C14.1311 4.1129 14.1129 4.0806 14.1129 4.04117C14.1129 4.00169 14.0766 3.94327 14.0323 3.91129C13.9879 3.87931 13.9516 3.82089 13.9516 3.78141C13.9516 3.74198 13.9335 3.70968 13.9113 3.70968C13.8891 3.70968 13.871 3.67738 13.871 3.63794C13.871 3.59847 13.8347 3.54004 13.7903 3.50806C13.746 3.47609 13.7097 3.42165 13.7097 3.3871C13.7097 3.35254 13.6734 3.2981 13.629 3.26613C13.5847 3.23415 13.5484 3.18298 13.5484 3.15242C13.5484 3.1219 13.494 3.04601 13.4274 2.98387C13.3609 2.92173 13.3065 2.85077 13.3065 2.82621C13.3065 2.76839 12.2324 1.69355 12.1746 1.69355C12.1505 1.69355 12.061 1.62097 11.9758 1.53226C11.8906 1.44355 11.7962 1.37097 11.7661 1.37097C11.736 1.37097 11.6852 1.33468 11.6532 1.29032C11.6213 1.24597 11.5628 1.20968 11.5233 1.20968C11.4839 1.20968 11.4516 1.19153 11.4516 1.16935C11.4516 1.14718 11.4193 1.12903 11.3799 1.12903C11.3404 1.12903 11.282 1.09274 11.25 1.04839C11.218 1.00403 11.1596 0.967742 11.1201 0.967742C11.0807 0.967742 11.0484 0.949597 11.0484 0.927419C11.0484 0.905242 11.0121 0.887097 10.9677 0.887097C10.9234 0.887097 10.8871 0.868952 10.8871 0.846774C10.8871 0.824597 10.8508 0.806452 10.8065 0.806452C10.7621 0.806452 10.7258 0.788306 10.7258 0.766129C10.7258 0.743952 10.6895 0.725806 10.6452 0.725806C10.6008 0.725806 10.5645 0.707661 10.5645 0.685484C10.5645 0.663306 10.5282 0.645161 10.4839 0.645161C10.4395 0.645161 10.4032 0.627016 10.4032 0.604839C10.4032 0.582661 10.3488 0.564516 10.2823 0.564516C10.2157 0.564516 10.1613 0.546371 10.1613 0.524194C10.1613 0.502016 10.125 0.483871 10.0806 0.483871C10.0363 0.483871 10 0.465726 10 0.443548C10 0.421371 9.94557 0.403226 9.87903 0.403226C9.8125 0.403226 9.75807 0.385081 9.75807 0.362903C9.75807 0.340726 9.68548 0.322581 9.59678 0.322581C9.50807 0.322581 9.43548 0.304435 9.43548 0.282258C9.43548 0.260081 9.3629 0.241935 9.27419 0.241935C9.18548 0.241935 9.1129 0.22379 9.1129 0.201613C9.1129 0.179435 9.02218 0.16129 8.91129 0.16129C8.8004 0.16129 8.70968 0.143145 8.70968 0.120968C8.70968 0.0979436 8.58871 0.0806452 8.42742 0.0806452C8.26613 0.0806452 8.14516 0.0633468 8.14516 0.0403226C8.14516 0.0150403 7.8898 0 7.45968 0C7.02956 0 6.77419 0.0150403 6.77419 0.0403226ZM7.90323 0.685484C7.90323 0.709395 8.05109 0.725806 8.26613 0.725806C8.48117 0.725806 8.62903 0.742218 8.62903 0.766129C8.62903 0.788306 8.71976 0.806452 8.83065 0.806452C8.94153 0.806452 9.03226 0.824597 9.03226 0.846774C9.03226 0.868952 9.10484 0.887097 9.19355 0.887097C9.28226 0.887097 9.35484 0.905242 9.35484 0.927419C9.35484 0.949597 9.40928 0.967742 9.47581 0.967742C9.54234 0.967742 9.59678 0.985887 9.59678 1.00806C9.59678 1.03024 9.65121 1.04839 9.71774 1.04839C9.78428 1.04839 9.83871 1.06653 9.83871 1.08871C9.83871 1.11089 9.875 1.12903 9.91936 1.12903C9.96371 1.12903 10 1.14718 10 1.16935C10 1.19153 10.0544 1.20968 10.121 1.20968C10.1875 1.20968 10.2419 1.22782 10.2419 1.25C10.2419 1.27218 10.2782 1.29032 10.3226 1.29032C10.3669 1.29032 10.4032 1.30847 10.4032 1.33065C10.4032 1.35282 10.4395 1.37097 10.4839 1.37097C10.5282 1.37097 10.5645 1.38911 10.5645 1.41129C10.5645 1.43347 10.5968 1.45161 10.6362 1.45161C10.6757 1.45161 10.7342 1.4879 10.7661 1.53226C10.7981 1.57661 10.8565 1.6129 10.896 1.6129C10.9354 1.6129 10.9677 1.63105 10.9677 1.65323C10.9677 1.6754 11 1.69355 11.0395 1.69355C11.079 1.69355 11.1374 1.72984 11.1694 1.77419C11.2013 1.81855 11.2558 1.85484 11.2903 1.85484C11.3249 1.85484 11.3793 1.89113 11.4113 1.93548C11.4433 1.97984 11.4938 2.01613 11.5236 2.01613C11.5534 2.01613 11.6662 2.10685 11.7742 2.21774C11.8822 2.32863 11.9903 2.41935 12.0144 2.41935C12.0715 2.41935 12.5 2.84786 12.5 2.90496C12.5 2.92907 12.5907 3.03714 12.7016 3.14516C12.8125 3.25319 12.9032 3.36266 12.9032 3.38847C12.9032 3.41427 12.9577 3.48625 13.0242 3.54839C13.0907 3.61052 13.1452 3.68641 13.1452 3.71694C13.1452 3.7475 13.1815 3.79867 13.2258 3.83065C13.2702 3.86262 13.3065 3.92105 13.3065 3.96052C13.3065 3.99996 13.3246 4.03226 13.3468 4.03226C13.369 4.03226 13.3871 4.06855 13.3871 4.1129C13.3871 4.15726 13.4052 4.19355 13.4274 4.19355C13.4496 4.19355 13.4677 4.22984 13.4677 4.27419C13.4677 4.31855 13.4859 4.35484 13.5081 4.35484C13.5302 4.35484 13.5484 4.39113 13.5484 4.43548C13.5484 4.47984 13.5665 4.51613 13.5887 4.51613C13.6109 4.51613 13.629 4.55242 13.629 4.59677C13.629 4.64113 13.6472 4.67742 13.6694 4.67742C13.6915 4.67742 13.7097 4.71371 13.7097 4.75806C13.7097 4.80242 13.7278 4.83871 13.75 4.83871C13.7722 4.83871 13.7903 4.89315 13.7903 4.95968C13.7903 5.02621 13.8085 5.08065 13.8306 5.08065C13.8528 5.08065 13.871 5.11694 13.871 5.16129C13.871 5.20565 13.8891 5.24194 13.9113 5.24194C13.9335 5.24194 13.9516 5.29637 13.9516 5.3629C13.9516 5.42944 13.9698 5.48387 13.9919 5.48387C14.0141 5.48387 14.0323 5.55645 14.0323 5.64516C14.0323 5.73387 14.0504 5.80645 14.0726 5.80645C14.0948 5.80645 14.1129 5.87903 14.1129 5.96774C14.1129 6.05645 14.1311 6.12903 14.1532 6.12903C14.1763 6.12903 14.1935 6.25 14.1935 6.41129C14.1935 6.57258 14.2108 6.69355 14.2339 6.69355C14.2595 6.69355 14.2742 7.0027 14.2742 7.54032C14.2742 8.07794 14.2595 8.3871 14.2339 8.3871C14.2115 8.3871 14.1935 8.49464 14.1935 8.62903C14.1935 8.76343 14.1756 8.87097 14.1532 8.87097C14.1311 8.87097 14.1129 8.94355 14.1129 9.03226C14.1129 9.12097 14.0948 9.19355 14.0726 9.19355C14.0504 9.19355 14.0323 9.26613 14.0323 9.35484C14.0323 9.44355 14.0141 9.51613 13.9919 9.51613C13.9698 9.51613 13.9516 9.57056 13.9516 9.6371C13.9516 9.70363 13.9335 9.75807 13.9113 9.75807C13.8891 9.75807 13.871 9.8125 13.871 9.87903C13.871 9.94556 13.8528 10 13.8306 10C13.8085 10 13.7903 10.0363 13.7903 10.0806C13.7903 10.125 13.7722 10.1613 13.75 10.1613C13.7278 10.1613 13.7097 10.1976 13.7097 10.2419C13.7097 10.2863 13.6915 10.3226 13.6694 10.3226C13.6472 10.3226 13.629 10.3589 13.629 10.4032C13.629 10.4476 13.6109 10.4839 13.5887 10.4839C13.5665 10.4839 13.5484 10.5202 13.5484 10.5645C13.5484 10.6089 13.5302 10.6452 13.5081 10.6452C13.4859 10.6452 13.4677 10.6815 13.4677 10.7258C13.4677 10.7702 13.4496 10.8065 13.4274 10.8065C13.4052 10.8065 13.3871 10.8427 13.3871 10.8871C13.3871 10.9315 13.369 10.9677 13.3468 10.9677C13.3246 10.9677 13.3065 11 13.3065 11.0395C13.3065 11.079 13.2702 11.1374 13.2258 11.1694C13.1815 11.2013 13.1452 11.2525 13.1452 11.2831C13.1452 11.3136 13.0907 11.3895 13.0242 11.4516C12.9577 11.5138 12.9032 11.586 12.9032 11.6121C12.9032 11.6382 12.8306 11.7293 12.7419 11.8145C12.6532 11.8998 12.5806 11.9894 12.5806 12.0137C12.5806 12.0762 12.069 12.5806 12.0056 12.5806C11.9769 12.5806 11.9271 12.6169 11.8952 12.6613C11.8134 12.7747 11.7742 12.7617 11.7742 12.621C11.7742 12.5544 11.7561 12.5 11.7339 12.5C11.7117 12.5 11.6935 12.4274 11.6935 12.3387C11.6935 12.25 11.6754 12.1774 11.6532 12.1774C11.6311 12.1774 11.6129 12.123 11.6129 12.0565C11.6129 11.9899 11.5948 11.9355 11.5726 11.9355C11.5504 11.9355 11.5323 11.881 11.5323 11.8145C11.5323 11.748 11.5141 11.6935 11.4919 11.6935C11.4698 11.6935 11.4516 11.6573 11.4516 11.6129C11.4516 11.5685 11.4335 11.5323 11.4113 11.5323C11.3891 11.5323 11.371 11.496 11.371 11.4516C11.371 11.4073 11.3528 11.371 11.3306 11.371C11.3085 11.371 11.2903 11.3347 11.2903 11.2903C11.2903 11.246 11.2722 11.2097 11.25 11.2097C11.2278 11.2097 11.2097 11.1774 11.2097 11.1379C11.2097 11.0985 11.1734 11.04 11.129 11.0081C11.0847 10.9761 11.0484 10.9253 11.0484 10.8952C11.0484 10.8651 10.9758 10.7707 10.8871 10.6855C10.7984 10.6002 10.7258 10.5104 10.7258 10.4857C10.7258 10.4269 10.4595 10.1613 10.4006 10.1613C10.3755 10.1613 10.3041 10.1069 10.2419 10.0403C10.1798 9.97379 10.0999 9.91936 10.0645 9.91936C10.029 9.91936 10 9.90121 10 9.87903C10 9.85685 9.96371 9.83871 9.91936 9.83871C9.875 9.83871 9.83871 9.82056 9.83871 9.79839C9.83871 9.77621 9.78428 9.75807 9.71774 9.75807C9.65121 9.75807 9.59678 9.73992 9.59678 9.71774C9.59678 9.69383 9.44891 9.67742 9.23387 9.67742C9.01883 9.67742 8.87097 9.69383 8.87097 9.71774C8.87097 9.73992 8.81653 9.75807 8.75 9.75807C8.68347 9.75807 8.62903 9.77621 8.62903 9.79839C8.62903 9.82056 8.57859 9.83871 8.51698 9.83871C8.45117 9.83871 8.38093 9.87202 8.34678 9.91936C8.3148 9.96371 8.25637 10 8.2169 10C8.17746 10 8.14516 10.0181 8.14516 10.0403C8.14516 10.0625 8.09073 10.0806 8.02419 10.0806C7.95766 10.0806 7.90323 10.0988 7.90323 10.121C7.90323 10.1454 7.72851 10.1613 7.45968 10.1613C7.19085 10.1613 7.01613 10.1454 7.01613 10.121C7.01613 10.0988 6.96169 10.0806 6.89516 10.0806C6.82863 10.0806 6.77419 10.0625 6.77419 10.0403C6.77419 10.0181 6.7419 10 6.70246 10C6.66298 10 6.60456 9.96371 6.57258 9.91936C6.53843 9.87202 6.46819 9.83871 6.40238 9.83871C6.34077 9.83871 6.29032 9.82056 6.29032 9.79839C6.29032 9.77621 6.23589 9.75807 6.16936 9.75807C6.10282 9.75807 6.04839 9.73992 6.04839 9.71774C6.04839 9.69383 5.90052 9.67742 5.68548 9.67742C5.47044 9.67742 5.32258 9.69383 5.32258 9.71774C5.32258 9.73992 5.26815 9.75807 5.20161 9.75807C5.13508 9.75807 5.08065 9.77621 5.08065 9.79839C5.08065 9.82056 5.04436 9.83871 5 9.83871C4.95565 9.83871 4.91936 9.85685 4.91936 9.87903C4.91936 9.90121 4.89036 9.91936 4.85488 9.91936C4.81944 9.91936 4.73956 9.97379 4.67742 10.0403C4.61528 10.1069 4.54387 10.1613 4.51875 10.1613C4.45988 10.1613 4.19355 10.4269 4.19355 10.4857C4.19355 10.5104 4.12097 10.6002 4.03226 10.6855C3.94355 10.7707 3.87097 10.8651 3.87097 10.8952C3.87097 10.9253 3.83468 10.9761 3.79032 11.0081C3.74597 11.04 3.70968 11.0985 3.70968 11.1379C3.70968 11.1774 3.69153 11.2097 3.66936 11.2097C3.64718 11.2097 3.62903 11.246 3.62903 11.2903C3.62903 11.3347 3.61089 11.371 3.58871 11.371C3.56653 11.371 3.54839 11.4073 3.54839 11.4516C3.54839 11.496 3.53024 11.5323 3.50806 11.5323C3.48589 11.5323 3.46774 11.5685 3.46774 11.6129C3.46774 11.6573 3.4496 11.6935 3.42742 11.6935C3.40524 11.6935 3.3871 11.748 3.3871 11.8145C3.3871 11.881 3.36895 11.9355 3.34677 11.9355C3.3246 11.9355 3.30645 11.9899 3.30645 12.0565C3.30645 12.123 3.28831 12.1774 3.26613 12.1774C3.24395 12.1774 3.22581 12.25 3.22581 12.3387C3.22581 12.4274 3.20766 12.5 3.18548 12.5C3.16331 12.5 3.14516 12.5544 3.14516 12.621C3.14516 12.6875 3.12702 12.7419 3.10484 12.7419C3.08266 12.7419 3.06452 12.7238 3.06452 12.7016C3.06452 12.6794 3.03702 12.6613 3.00339 12.6613C2.93427 12.6613 2.33871 12.0814 2.33871 12.0142C2.33871 11.9902 2.24798 11.8822 2.1371 11.7742C2.02621 11.6662 1.93548 11.5534 1.93548 11.5236C1.93548 11.4938 1.89919 11.4433 1.85484 11.4113C1.81048 11.3793 1.77419 11.3249 1.77419 11.2903C1.77419 11.2558 1.7379 11.2013 1.69355 11.1694C1.64919 11.1374 1.6129 11.079 1.6129 11.0395C1.6129 11 1.59476 10.9677 1.57258 10.9677C1.5504 10.9677 1.53226 10.9315 1.53226 10.8871C1.53226 10.8427 1.51411 10.8065 1.49194 10.8065C1.46976 10.8065 1.45161 10.7742 1.45161 10.7347C1.45161 10.6952 1.41532 10.6368 1.37097 10.6048C1.32363 10.5707 1.29032 10.5004 1.29032 10.4346C1.29032 10.373 1.27218 10.3226 1.25 10.3226C1.22782 10.3226 1.20968 10.2863 1.20968 10.2419C1.20968 10.1976 1.19153 10.1613 1.16935 10.1613C1.14718 10.1613 1.12903 10.125 1.12903 10.0806C1.12903 10.0363 1.11089 10 1.08871 10C1.06653 10 1.04839 9.94556 1.04839 9.87903C1.04839 9.8125 1.03024 9.75807 1.00806 9.75807C0.985887 9.75807 0.967742 9.70363 0.967742 9.6371C0.967742 9.57056 0.949597 9.51613 0.927419 9.51613C0.905242 9.51613 0.887097 9.46169 0.887097 9.39516C0.887097 9.32863 0.868952 9.27419 0.846774 9.27419C0.824597 9.27419 0.806452 9.18347 0.806452 9.07258C0.806452 8.96169 0.788307 8.87097 0.766129 8.87097C0.74371 8.87097 0.725806 8.76343 0.725806 8.62903C0.725806 8.49464 0.707903 8.3871 0.685484 8.3871C0.659839 8.3871 0.645161 8.06452 0.645161 7.5C0.645161 6.93548 0.659839 6.6129 0.685484 6.6129C0.707903 6.6129 0.725806 6.50536 0.725806 6.37097C0.725806 6.23657 0.74371 6.12903 0.766129 6.12903C0.788307 6.12903 0.806452 6.03831 0.806452 5.92742C0.806452 5.81653 0.824597 5.72581 0.846774 5.72581C0.868952 5.72581 0.887097 5.67137 0.887097 5.60484C0.887097 5.53831 0.905242 5.48387 0.927419 5.48387C0.949597 5.48387 0.967742 5.42944 0.967742 5.3629C0.967742 5.29637 0.985887 5.24194 1.00806 5.24194C1.03024 5.24194 1.04839 5.1875 1.04839 5.12097C1.04839 5.05444 1.06653 5 1.08871 5C1.11089 5 1.12903 4.96371 1.12903 4.91935C1.12903 4.875 1.14718 4.83871 1.16935 4.83871C1.19153 4.83871 1.20968 4.80242 1.20968 4.75806C1.20968 4.71371 1.22782 4.67742 1.25 4.67742C1.27218 4.67742 1.29032 4.62698 1.29032 4.56536C1.29032 4.49956 1.32363 4.42931 1.37097 4.39516C1.41532 4.36319 1.45161 4.30476 1.45161 4.26528C1.45161 4.22585 1.46976 4.19355 1.49194 4.19355C1.51411 4.19355 1.53226 4.15726 1.53226 4.1129C1.53226 4.06855 1.5504 4.03226 1.57258 4.03226C1.59476 4.03226 1.6129 3.99996 1.6129 3.96052C1.6129 3.92105 1.64919 3.86262 1.69355 3.83065C1.7379 3.79867 1.77419 3.7475 1.77419 3.71694C1.77419 3.68641 1.82863 3.61052 1.89516 3.54839C1.96169 3.48625 2.01613 3.41403 2.01613 3.3879C2.01613 3.36181 2.08871 3.27073 2.17742 3.18548C2.26613 3.10024 2.33871 3.01064 2.33871 2.98637C2.33871 2.92883 2.92883 2.33871 2.98637 2.33871C3.01065 2.33871 3.10024 2.26613 3.18548 2.17742C3.27073 2.08871 3.36508 2.01613 3.3952 2.01613C3.42532 2.01613 3.47609 1.97984 3.50806 1.93548C3.54004 1.89113 3.59448 1.85484 3.62903 1.85484C3.66359 1.85484 3.71802 1.81855 3.75 1.77419C3.78198 1.72984 3.83641 1.69355 3.87097 1.69355C3.90552 1.69355 3.95996 1.65726 3.99194 1.6129C4.02391 1.56855 4.08234 1.53226 4.12181 1.53226C4.16125 1.53226 4.19355 1.51411 4.19355 1.49194C4.19355 1.46976 4.22984 1.45161 4.27419 1.45161C4.31855 1.45161 4.35484 1.43347 4.35484 1.41129C4.35484 1.38911 4.39113 1.37097 4.43548 1.37097C4.47984 1.37097 4.51613 1.35282 4.51613 1.33065C4.51613 1.30847 4.55242 1.29032 4.59677 1.29032C4.64113 1.29032 4.67742 1.27218 4.67742 1.25C4.67742 1.22782 4.73186 1.20968 4.79839 1.20968C4.86492 1.20968 4.91936 1.19153 4.91936 1.16935C4.91936 1.14718 4.95565 1.12903 5 1.12903C5.04436 1.12903 5.08065 1.11089 5.08065 1.08871C5.08065 1.06653 5.13508 1.04839 5.20161 1.04839C5.26815 1.04839 5.32258 1.03024 5.32258 1.00806C5.32258 0.985887 5.37702 0.967742 5.44355 0.967742C5.51008 0.967742 5.56452 0.949597 5.56452 0.927419C5.56452 0.905242 5.6371 0.887097 5.72581 0.887097C5.81452 0.887097 5.8871 0.868952 5.8871 0.846774C5.8871 0.824597 5.97782 0.806452 6.08871 0.806452C6.1996 0.806452 6.29032 0.788306 6.29032 0.766129C6.29032 0.742218 6.43819 0.725806 6.65323 0.725806C6.86827 0.725806 7.01613 0.709395 7.01613 0.685484C7.01613 0.661048 7.19085 0.645161 7.45968 0.645161C7.72851 0.645161 7.90323 0.661048 7.90323 0.685484ZM6.93548 2.29839C6.93548 2.32056 6.8629 2.33871 6.77419 2.33871C6.68548 2.33871 6.6129 2.35685 6.6129 2.37903C6.6129 2.40121 6.55847 2.41935 6.49194 2.41935C6.4254 2.41935 6.37097 2.4375 6.37097 2.45968C6.37097 2.48185 6.31653 2.5 6.25 2.5C6.18347 2.5 6.12903 2.51815 6.12903 2.54032C6.12903 2.5625 6.09274 2.58065 6.04839 2.58065C6.00403 2.58065 5.96774 2.59879 5.96774 2.62097C5.96774 2.64315 5.93544 2.66129 5.89601 2.66129C5.85653 2.66129 5.79811 2.69758 5.76613 2.74194C5.73415 2.78629 5.68456 2.82258 5.65589 2.82258C5.58794 2.82258 4.83871 3.57181 4.83871 3.63976C4.83871 3.66843 4.80242 3.71802 4.75807 3.75C4.71371 3.78198 4.67742 3.8404 4.67742 3.87988C4.67742 3.91931 4.65927 3.95161 4.6371 3.95161C4.61492 3.95161 4.59677 3.9879 4.59677 4.03226C4.59677 4.07661 4.57863 4.1129 4.55645 4.1129C4.53427 4.1129 4.51613 4.16734 4.51613 4.23387C4.51613 4.3004 4.49798 4.35484 4.47581 4.35484C4.45363 4.35484 4.43548 4.40927 4.43548 4.47581C4.43548 4.54234 4.41734 4.59677 4.39516 4.59677C4.37298 4.59677 4.35484 4.6875 4.35484 4.79839C4.35484 4.90927 4.33669 5 4.31452 5C4.29032 5 4.27419 5.16129 4.27419 5.40323C4.27419 5.64516 4.29032 5.80645 4.31452 5.80645C4.33694 5.80645 4.35484 5.91399 4.35484 6.04839C4.35484 6.18278 4.37274 6.29032 4.39516 6.29032C4.41734 6.29032 4.43548 6.3629 4.43548 6.45161C4.43548 6.54032 4.45363 6.6129 4.47581 6.6129C4.49798 6.6129 4.51613 6.64919 4.51613 6.69355C4.51613 6.7379 4.53427 6.77419 4.55645 6.77419C4.57863 6.77419 4.59677 6.82863 4.59677 6.89516C4.59677 6.96169 4.61492 7.01613 4.6371 7.01613C4.65927 7.01613 4.67742 7.05242 4.67742 7.09677C4.67742 7.14113 4.69556 7.17742 4.71774 7.17742C4.73992 7.17742 4.75807 7.21371 4.75807 7.25806C4.75807 7.30242 4.77621 7.33871 4.79839 7.33871C4.82057 7.33871 4.83871 7.375 4.83871 7.41935C4.83871 7.46371 4.85686 7.5 4.87903 7.5C4.90121 7.5 4.91936 7.53629 4.91936 7.58065C4.91936 7.625 4.9375 7.66129 4.95968 7.66129C4.98186 7.66129 5 7.69028 5 7.72577C5 7.76121 5.05444 7.84109 5.12097 7.90323C5.1875 7.96536 5.24194 8.03641 5.24194 8.06105C5.24194 8.12399 5.99565 8.87097 6.05911 8.87097C6.08778 8.87097 6.13738 8.90726 6.16936 8.95161C6.20133 8.99597 6.25976 9.03226 6.29923 9.03226C6.33867 9.03226 6.37097 9.0504 6.37097 9.07258C6.37097 9.09476 6.40726 9.1129 6.45161 9.1129C6.49597 9.1129 6.53226 9.13105 6.53226 9.15323C6.53226 9.1754 6.58669 9.19355 6.65323 9.19355C6.71976 9.19355 6.77419 9.21169 6.77419 9.23387C6.77419 9.25605 6.86492 9.27419 6.97581 9.27419C7.08669 9.27419 7.17742 9.29234 7.17742 9.31452C7.17742 9.33754 7.29839 9.35484 7.45968 9.35484C7.62097 9.35484 7.74194 9.33754 7.74194 9.31452C7.74194 9.29234 7.83266 9.27419 7.94355 9.27419C8.05444 9.27419 8.14516 9.25605 8.14516 9.23387C8.14516 9.21169 8.18145 9.19355 8.22581 9.19355C8.27016 9.19355 8.30645 9.1754 8.30645 9.15323C8.30645 9.13105 8.36089 9.1129 8.42742 9.1129C8.49395 9.1129 8.54839 9.09476 8.54839 9.07258C8.54839 9.0504 8.58069 9.03226 8.62012 9.03226C8.6596 9.03226 8.71803 8.99597 8.75 8.95161C8.78198 8.90726 8.83157 8.87097 8.86024 8.87097C8.92819 8.87097 9.67742 8.12173 9.67742 8.05379C9.67742 8.02512 9.71371 7.97552 9.75807 7.94355C9.80242 7.91157 9.83871 7.85714 9.83871 7.82258C9.83871 7.78802 9.875 7.73359 9.91936 7.70161C9.96371 7.66964 10 7.61121 10 7.57173C10 7.5323 10.0181 7.5 10.0403 7.5C10.0625 7.5 10.0806 7.46371 10.0806 7.41935C10.0806 7.375 10.0988 7.33871 10.121 7.33871C10.1431 7.33871 10.1613 7.30242 10.1613 7.25806C10.1613 7.21371 10.1794 7.17742 10.2016 7.17742C10.2238 7.17742 10.2419 7.14113 10.2419 7.09677C10.2419 7.05242 10.2601 7.01613 10.2823 7.01613C10.3044 7.01613 10.3226 6.96169 10.3226 6.89516C10.3226 6.82863 10.3407 6.77419 10.3629 6.77419C10.3851 6.77419 10.4032 6.71976 10.4032 6.65323C10.4032 6.58669 10.4214 6.53226 10.4436 6.53226C10.4657 6.53226 10.4839 6.47782 10.4839 6.41129C10.4839 6.34476 10.502 6.29032 10.5242 6.29032C10.5466 6.29032 10.5645 6.18278 10.5645 6.04839C10.5645 5.91399 10.5824 5.80645 10.6048 5.80645C10.6283 5.80645 10.6452 5.67206 10.6452 5.48387C10.6452 5.29569 10.6283 5.16129 10.6048 5.16129C10.5824 5.16129 10.5645 5.05375 10.5645 4.91935C10.5645 4.78496 10.5466 4.67742 10.5242 4.67742C10.502 4.67742 10.4839 4.60484 10.4839 4.51613C10.4839 4.42742 10.4657 4.35484 10.4436 4.35484C10.4214 4.35484 10.4032 4.31855 10.4032 4.27419C10.4032 4.22984 10.3851 4.19355 10.3629 4.19355C10.3407 4.19355 10.3226 4.1431 10.3226 4.08149C10.3226 4.01569 10.2893 3.94544 10.2419 3.91129C10.1976 3.87931 10.1613 3.82488 10.1613 3.79032C10.1613 3.75577 10.125 3.70133 10.0806 3.66935C10.0363 3.63738 10 3.58774 10 3.55907C10 3.49105 9.33153 2.82258 9.26351 2.82258C9.23484 2.82258 9.1852 2.78629 9.15323 2.74194C9.12125 2.69758 9.06282 2.66129 9.02335 2.66129C8.98391 2.66129 8.95161 2.64315 8.95161 2.62097C8.95161 2.59879 8.91532 2.58065 8.87097 2.58065C8.82661 2.58065 8.79032 2.5625 8.79032 2.54032C8.79032 2.51815 8.73589 2.5 8.66936 2.5C8.60282 2.5 8.54839 2.48185 8.54839 2.45968C8.54839 2.4375 8.49395 2.41935 8.42742 2.41935C8.36089 2.41935 8.30645 2.40121 8.30645 2.37903C8.30645 2.35685 8.23387 2.33871 8.14516 2.33871C8.05645 2.33871 7.98387 2.32056 7.98387 2.29839C7.98387 2.27359 7.78226 2.25806 7.45968 2.25806C7.1371 2.25806 6.93548 2.27359 6.93548 2.29839ZM7.82258 2.94355C7.82258 2.96573 7.91331 2.98387 8.02419 2.98387C8.13508 2.98387 8.22581 3.00202 8.22581 3.02419C8.22581 3.04637 8.2621 3.06452 8.30645 3.06452C8.35081 3.06452 8.3871 3.08266 8.3871 3.10484C8.3871 3.12702 8.43754 3.14516 8.49915 3.14516C8.56496 3.14516 8.6352 3.17847 8.66936 3.22581C8.70133 3.27016 8.7525 3.30645 8.78307 3.30645C8.81359 3.30645 8.88948 3.36089 8.95161 3.42742C9.01375 3.49395 9.08536 3.54839 9.11077 3.54839C9.1706 3.54839 9.35484 3.73262 9.35484 3.79246C9.35484 3.81786 9.40928 3.88948 9.47581 3.95161C9.54234 4.01375 9.59678 4.09363 9.59678 4.12907C9.59678 4.16456 9.61492 4.19355 9.6371 4.19355C9.65928 4.19355 9.67742 4.22984 9.67742 4.27419C9.67742 4.31855 9.69557 4.35484 9.71774 4.35484C9.73992 4.35484 9.75807 4.39113 9.75807 4.43548C9.75807 4.47984 9.77621 4.51613 9.79839 4.51613C9.82057 4.51613 9.83871 4.57056 9.83871 4.6371C9.83871 4.70363 9.85686 4.75806 9.87903 4.75806C9.90206 4.75806 9.91936 4.87903 9.91936 5.04032C9.91936 5.20161 9.93665 5.32258 9.95968 5.32258C9.98186 5.32258 10 5.37702 10 5.44355C10 5.51008 9.98186 5.56452 9.95968 5.56452C9.93665 5.56452 9.91936 5.68548 9.91936 5.84677C9.91936 6.00806 9.90206 6.12903 9.87903 6.12903C9.85686 6.12903 9.83871 6.20161 9.83871 6.29032C9.83871 6.37903 9.82057 6.45161 9.79839 6.45161C9.77621 6.45161 9.75807 6.4879 9.75807 6.53226C9.75807 6.57661 9.73992 6.6129 9.71774 6.6129C9.69557 6.6129 9.67742 6.66734 9.67742 6.73387C9.67742 6.8004 9.65928 6.85484 9.6371 6.85484C9.61492 6.85484 9.59678 6.89113 9.59678 6.93548C9.59678 6.97984 9.57863 7.01613 9.55645 7.01613C9.53428 7.01613 9.51613 7.04843 9.51613 7.08786C9.51613 7.12734 9.47984 7.18577 9.43548 7.21774C9.39113 7.24972 9.35484 7.30814 9.35484 7.34762C9.35484 7.38706 9.33669 7.41935 9.31452 7.41935C9.29234 7.41935 9.27419 7.44677 9.27419 7.48032C9.27419 7.5598 8.4469 8.3871 8.36742 8.3871C8.33387 8.3871 8.30645 8.40524 8.30645 8.42742C8.30645 8.4496 8.27016 8.46774 8.22581 8.46774C8.18145 8.46774 8.14516 8.48589 8.14516 8.50806C8.14516 8.53024 8.10887 8.54839 8.06452 8.54839C8.02016 8.54839 7.98387 8.56653 7.98387 8.58871C7.98387 8.61089 7.89315 8.62903 7.78226 8.62903C7.67137 8.62903 7.58065 8.64718 7.58065 8.66935C7.58065 8.69153 7.52621 8.70968 7.45968 8.70968C7.39315 8.70968 7.33871 8.69153 7.33871 8.66935C7.33871 8.64718 7.24798 8.62903 7.1371 8.62903C7.02621 8.62903 6.93548 8.61089 6.93548 8.58871C6.93548 8.56653 6.89919 8.54839 6.85484 8.54839C6.81048 8.54839 6.77419 8.53024 6.77419 8.50806C6.77419 8.48589 6.7379 8.46774 6.69355 8.46774C6.64919 8.46774 6.6129 8.4496 6.6129 8.42742C6.6129 8.40524 6.58427 8.3871 6.54927 8.3871C6.51423 8.3871 6.41589 8.31452 6.33065 8.22581C6.2454 8.1371 6.1548 8.06452 6.12931 8.06452C6.06944 8.06452 5.96774 7.96282 5.96774 7.90294C5.96774 7.87746 5.89516 7.78685 5.80645 7.70161C5.71774 7.61637 5.64516 7.52202 5.64516 7.49189C5.64516 7.46177 5.60887 7.41101 5.56452 7.37903C5.52016 7.34706 5.48387 7.28863 5.48387 7.24915C5.48387 7.20972 5.46573 7.17742 5.44355 7.17742C5.42137 7.17742 5.40323 7.14113 5.40323 7.09677C5.40323 7.05242 5.38508 7.01613 5.3629 7.01613C5.34073 7.01613 5.32258 6.97984 5.32258 6.93548C5.32258 6.89113 5.30444 6.85484 5.28226 6.85484C5.26008 6.85484 5.24194 6.8004 5.24194 6.73387C5.24194 6.66734 5.22379 6.6129 5.20161 6.6129C5.17944 6.6129 5.16129 6.57661 5.16129 6.53226C5.16129 6.4879 5.14315 6.45161 5.12097 6.45161C5.09879 6.45161 5.08065 6.37903 5.08065 6.29032C5.08065 6.20161 5.0625 6.12903 5.04032 6.12903C5.0173 6.12903 5 6.00806 5 5.84677C5 5.68548 4.9827 5.56452 4.95968 5.56452C4.9375 5.56452 4.91936 5.47379 4.91936 5.3629C4.91936 5.25202 4.9375 5.16129 4.95968 5.16129C4.98186 5.16129 5 5.07056 5 4.95968C5 4.84879 5.01815 4.75806 5.04032 4.75806C5.0625 4.75806 5.08065 4.70363 5.08065 4.6371C5.08065 4.57056 5.09879 4.51613 5.12097 4.51613C5.14315 4.51613 5.16129 4.47984 5.16129 4.43548C5.16129 4.39113 5.17944 4.35484 5.20161 4.35484C5.22379 4.35484 5.24194 4.31855 5.24194 4.27419C5.24194 4.22984 5.26008 4.19355 5.28226 4.19355C5.30444 4.19355 5.32258 4.16125 5.32258 4.12181C5.32258 4.08234 5.35887 4.02391 5.40323 3.99194C5.44758 3.95996 5.48387 3.91012 5.48387 3.88117C5.48387 3.81266 5.82879 3.46774 5.8973 3.46774C5.92625 3.46774 5.97609 3.43145 6.00806 3.3871C6.04004 3.34274 6.09448 3.30645 6.12903 3.30645C6.16359 3.30645 6.21802 3.27016 6.25 3.22581C6.28415 3.17847 6.3544 3.14516 6.4202 3.14516C6.48181 3.14516 6.53226 3.12702 6.53226 3.10484C6.53226 3.08266 6.56855 3.06452 6.6129 3.06452C6.65726 3.06452 6.69355 3.04637 6.69355 3.02419C6.69355 3.00202 6.78427 2.98387 6.89516 2.98387C7.00605 2.98387 7.09677 2.96573 7.09677 2.94355C7.09677 2.91964 7.24464 2.90323 7.45968 2.90323C7.67472 2.90323 7.82258 2.91964 7.82258 2.94355ZM5.96774 10.3629C5.96774 10.3851 6.00403 10.4032 6.04839 10.4032C6.09274 10.4032 6.12903 10.4214 6.12903 10.4435C6.12903 10.4657 6.16532 10.4839 6.20968 10.4839C6.25403 10.4839 6.29032 10.502 6.29032 10.5242C6.29032 10.5464 6.32661 10.5645 6.37097 10.5645C6.41532 10.5645 6.45161 10.5827 6.45161 10.6048C6.45161 10.627 6.4879 10.6452 6.53226 10.6452C6.57661 10.6452 6.6129 10.6633 6.6129 10.6855C6.6129 10.7077 6.66734 10.7258 6.73387 10.7258C6.8004 10.7258 6.85484 10.744 6.85484 10.7661C6.85484 10.7912 7.08335 10.8065 7.45968 10.8065C7.83601 10.8065 8.06452 10.7912 8.06452 10.7661C8.06452 10.744 8.11895 10.7258 8.18548 10.7258C8.25202 10.7258 8.30645 10.7077 8.30645 10.6855C8.30645 10.6633 8.34274 10.6452 8.3871 10.6452C8.43145 10.6452 8.46774 10.627 8.46774 10.6048C8.46774 10.5827 8.50403 10.5645 8.54839 10.5645C8.59274 10.5645 8.62903 10.5464 8.62903 10.5242C8.62903 10.502 8.66532 10.4839 8.70968 10.4839C8.75403 10.4839 8.79032 10.4657 8.79032 10.4435C8.79032 10.4214 8.82661 10.4032 8.87097 10.4032C8.91532 10.4032 8.95161 10.3851 8.95161 10.3629C8.95161 10.3399 9.07258 10.3226 9.23387 10.3226C9.39516 10.3226 9.51613 10.3399 9.51613 10.3629C9.51613 10.3851 9.55242 10.4032 9.59678 10.4032C9.64113 10.4032 9.67742 10.4214 9.67742 10.4435C9.67742 10.4657 9.70492 10.4839 9.73855 10.4839C9.8129 10.4839 10.4032 11.0663 10.4032 11.1396C10.4032 11.1684 10.4395 11.218 10.4839 11.25C10.5282 11.282 10.5645 11.3404 10.5645 11.3799C10.5645 11.4193 10.5827 11.4516 10.6048 11.4516C10.627 11.4516 10.6452 11.4839 10.6452 11.5233C10.6452 11.5628 10.6815 11.6213 10.7258 11.6532C10.7731 11.6874 10.8065 11.7576 10.8065 11.8234C10.8065 11.885 10.8246 11.9355 10.8468 11.9355C10.869 11.9355 10.8871 11.9718 10.8871 12.0161C10.8871 12.0605 10.9052 12.0968 10.9274 12.0968C10.9496 12.0968 10.9677 12.1512 10.9677 12.2177C10.9677 12.2843 10.9859 12.3387 11.0081 12.3387C11.0302 12.3387 11.0484 12.4113 11.0484 12.5C11.0484 12.5887 11.0665 12.6613 11.0887 12.6613C11.1122 12.6613 11.129 12.7957 11.129 12.9839C11.129 13.2662 11.1201 13.3065 11.0573 13.3065C11.0178 13.3065 10.9594 13.3427 10.9274 13.3871C10.8954 13.4315 10.837 13.4677 10.7975 13.4677C10.7581 13.4677 10.7258 13.4859 10.7258 13.5081C10.7258 13.5302 10.6895 13.5484 10.6452 13.5484C10.6008 13.5484 10.5645 13.5665 10.5645 13.5887C10.5645 13.6109 10.5282 13.629 10.4839 13.629C10.4395 13.629 10.4032 13.6472 10.4032 13.6694C10.4032 13.6915 10.3669 13.7097 10.3226 13.7097C10.2782 13.7097 10.2419 13.7278 10.2419 13.75C10.2419 13.7722 10.2056 13.7903 10.1613 13.7903C10.1169 13.7903 10.0806 13.8085 10.0806 13.8306C10.0806 13.8528 10.0262 13.871 9.95968 13.871C9.89315 13.871 9.83871 13.8891 9.83871 13.9113C9.83871 13.9335 9.78428 13.9516 9.71774 13.9516C9.65121 13.9516 9.59678 13.9698 9.59678 13.9919C9.59678 14.0141 9.54234 14.0323 9.47581 14.0323C9.40928 14.0323 9.35484 14.0504 9.35484 14.0726C9.35484 14.0948 9.28226 14.1129 9.19355 14.1129C9.10484 14.1129 9.03226 14.131 9.03226 14.1532C9.03226 14.1754 8.94153 14.1935 8.83065 14.1935C8.71976 14.1935 8.62903 14.2117 8.62903 14.2339C8.62903 14.2569 8.50807 14.2742 8.34678 14.2742C8.18548 14.2742 8.06452 14.2915 8.06452 14.3145C8.06452 14.3396 7.83601 14.3548 7.45968 14.3548C7.08335 14.3548 6.85484 14.3396 6.85484 14.3145C6.85484 14.2915 6.73387 14.2742 6.57258 14.2742C6.41129 14.2742 6.29032 14.2569 6.29032 14.2339C6.29032 14.2117 6.1996 14.1935 6.08871 14.1935C5.97782 14.1935 5.8871 14.1754 5.8871 14.1532C5.8871 14.131 5.81452 14.1129 5.72581 14.1129C5.6371 14.1129 5.56452 14.0948 5.56452 14.0726C5.56452 14.0504 5.51008 14.0323 5.44355 14.0323C5.37702 14.0323 5.32258 14.0141 5.32258 13.9919C5.32258 13.9698 5.26815 13.9516 5.20161 13.9516C5.13508 13.9516 5.08065 13.9335 5.08065 13.9113C5.08065 13.8891 5.02621 13.871 4.95968 13.871C4.89315 13.871 4.83871 13.8528 4.83871 13.8306C4.83871 13.8085 4.80242 13.7903 4.75807 13.7903C4.71371 13.7903 4.67742 13.7722 4.67742 13.75C4.67742 13.7278 4.64113 13.7097 4.59677 13.7097C4.55242 13.7097 4.51613 13.6915 4.51613 13.6694C4.51613 13.6472 4.47984 13.629 4.43548 13.629C4.39113 13.629 4.35484 13.6109 4.35484 13.5887C4.35484 13.5665 4.31855 13.5484 4.27419 13.5484C4.22984 13.5484 4.19355 13.5302 4.19355 13.5081C4.19355 13.4859 4.16125 13.4677 4.12181 13.4677C4.08234 13.4677 4.02391 13.4315 3.99194 13.3871C3.95996 13.3427 3.90153 13.3065 3.86206 13.3065C3.79927 13.3065 3.79032 13.2662 3.79032 12.9839C3.79032 12.7957 3.80714 12.6613 3.83065 12.6613C3.85282 12.6613 3.87097 12.5887 3.87097 12.5C3.87097 12.4113 3.88911 12.3387 3.91129 12.3387C3.93347 12.3387 3.95161 12.2843 3.95161 12.2177C3.95161 12.1512 3.96976 12.0968 3.99194 12.0968C4.01411 12.0968 4.03226 12.0423 4.03226 11.9758C4.03226 11.9093 4.0504 11.8548 4.07258 11.8548C4.09476 11.8548 4.1129 11.8185 4.1129 11.7742C4.1129 11.7298 4.13105 11.6935 4.15323 11.6935C4.1754 11.6935 4.19355 11.6613 4.19355 11.6218C4.19355 11.5823 4.22984 11.5239 4.27419 11.4919C4.31855 11.46 4.35484 11.4055 4.35484 11.371C4.35484 11.3364 4.39113 11.282 4.43548 11.25C4.47984 11.218 4.51613 11.1684 4.51613 11.1396C4.51613 11.0663 5.10645 10.4839 5.18081 10.4839C5.21444 10.4839 5.24194 10.4657 5.24194 10.4435C5.24194 10.4214 5.27823 10.4032 5.32258 10.4032C5.36694 10.4032 5.40323 10.3851 5.40323 10.3629C5.40323 10.3399 5.52419 10.3226 5.68548 10.3226C5.84677 10.3226 5.96774 10.3399 5.96774 10.3629Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("b4list");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={16}
    fill="red"
    viewBox="0 0 13 16"
    {...props}
  >
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M12.055 6.327c0 4.455-5.728 8.273-5.728 8.273S.6 10.782.6 6.327a5.727 5.727 0 1 1 11.455 0Z"
    />
    <Path
      stroke="#555"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.2}
      d="M6.327 8.236a1.91 1.91 0 1 0 0-3.818 1.91 1.91 0 0 0 0 3.818Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.0546 6.32725C12.0546 10.7818 6.32737 14.6 6.32737 14.6C6.32737 14.6 0.600098 10.7818 0.600098 6.32725C0.600098 4.80828 1.2035 3.35153 2.27758 2.27745C3.35165 1.20338 4.8084 0.599976 6.32737 0.599976C7.84634 0.599976 9.30309 1.20338 10.3772 2.27745C11.4512 3.35153 12.0546 4.80828 12.0546 6.32725Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.32737 8.23634C7.38173 8.23634 8.23646 7.38161 8.23646 6.32725C8.23646 5.27289 7.38173 4.41816 6.32737 4.41816C5.27301 4.41816 4.41828 5.27289 4.41828 6.32725C4.41828 7.38161 5.27301 8.23634 6.32737 8.23634Z" stroke="#555555" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`white`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Condomínios`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 10, height: 10, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={13}
    height={13}
    fill="red"
    viewBox="0 0 13 13"
    {...props}
  >
    <Path
      fill="#555"
      d="M8.684 11.984H2.648c-1.11-1.537-1.632-3.54-1.632-5.484 0-1.943.522-3.947 1.632-5.484h6.036a.508.508 0 1 0 0-1.016h-6.29a.508.508 0 0 0-.402.197C.642 1.938 0 4.243 0 6.5c0 2.256.643 4.562 1.992 6.303a.508.508 0 0 0 .402.197h6.29a.508.508 0 1 0 0-1.016Z"
    />
    <Path
      fill="#555"
      d="m12.853 6.142-.001-.001-1.965-1.965a.508.508 0 0 0-.718.719l1.097 1.097h-6.39a.508.508 0 1 0 0 1.016h6.39L10.17 8.105a.508.508 0 0 0 .718.719l1.965-1.965a.508.508 0 0 0 0-.717Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="13" height="13" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.68377 11.9844H2.64781C1.5388 10.4473 1.01562 8.44365 1.01562 6.5C1.01562 4.55724 1.53842 2.55321 2.64781 1.01562H8.68379C8.96426 1.01562 9.19161 0.788277 9.19161 0.507812C9.19161 0.227348 8.96426 0 8.68379 0H2.39355C2.23651 0 2.0883 0.0726426 1.99212 0.196777C0.64284 1.93804 0 4.24338 0 6.5C0 8.75636 0.642763 11.0619 1.99212 12.8032C2.0883 12.9274 2.23651 13 2.39355 13H8.68379C8.96426 13 9.19161 12.7727 9.19161 12.4922C9.19161 12.2117 8.96423 11.9844 8.68377 11.9844Z" fill="#555555"/>
<path d="M12.8527 6.1422L12.8516 6.14093L10.887 4.17645C10.6887 3.97813 10.3672 3.97813 10.1688 4.17645C9.97051 4.37478 9.97051 4.6963 10.1688 4.8946L11.2664 5.99219H4.8751C4.59464 5.99219 4.36729 6.21954 4.36729 6.5C4.36729 6.78046 4.59464 7.00781 4.8751 7.00781H11.2664L10.1688 8.1054C9.97051 8.30372 9.97051 8.62525 10.1688 8.82355C10.3671 9.02185 10.6887 9.02187 10.887 8.82355L12.8516 6.85907C13.0543 6.65633 13.0443 6.33504 12.8527 6.1422Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#555555',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flex: 1,
	height: "100%",
	backgroundColor: '#f5f5f5',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: '100%',
	height: 100,
	backgroundColor: '#a6a6a6',
	flexDirection: 'row',
	justifyContent: 'space-between',
	alignItems: 'center',
	paddingHorizontal: 45,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 7,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={25}
    fill="red"
    viewBox="0 0 24 25"
    {...props}
  >
    <Path
      stroke="#F5F5F5"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="m11.438 19.25-6.75-6.75 6.75-6.75M5.625 12.5h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.4375 19.25L4.6875 12.5L11.4375 5.75M5.625 12.5H19.3125" stroke="#F5F5F5" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	backgroundColor: 'transparent',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 26,
	fontWeight: '700',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lotes - Proprietário`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: 15,
	fontWeight: '400',
	color: '#FFFFFF',
}`
          ],

          children: [
            `Lista dos proprietários`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	paddingHorizontal: 60,
	paddingVertical: 20,
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
height: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{
borderRadius: 12,
}`],
            arrProps: [],
            arrItems: [(...args:any) => <Elements.Accordion pass={{
 configs: [`{ 
	data: "$var_sc.B7.statics.steps",
	defaultOpenIdx: 0,
	styles: {
			backgroundColor: '#ccc',
			width: "100%",
			borderRadius: 10,
			marginBottom: 14
	}
}`], arrElements: [
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: 'space-between',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={35}
    height={20}
    fill="red"
    viewBox="0 0 35 20"
    {...props}
  >
    <Path
      fill="#555"
      d="M22.807 7.205a.634.634 0 0 0-.934 0L18 11.315l-3.873-4.11a.634.634 0 0 0-.934 0 .731.731 0 0 0 0 .991l4.333 4.599c.18.191.44.249.667.172a.65.65 0 0 0 .287-.179l4.327-4.592a.731.731 0 0 0 0-.99Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="35" height="20" viewBox="0 0 35 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.8066 7.20526C22.5488 6.93158 22.1307 6.93158 21.8729 7.20526L18 11.3159L14.1271 7.20533C13.8693 6.93165 13.4512 6.93165 13.1934 7.20533C12.9355 7.479 12.9355 7.92273 13.1934 8.19641L17.5258 12.7947C17.7064 12.9865 17.9657 13.0439 18.1934 12.967C18.2985 12.9355 18.3977 12.8759 18.4804 12.7881L22.8066 8.19634C23.0645 7.92266 23.0645 7.47894 22.8066 7.20526Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "35px",

      preenchimento: ['black'],

      args,
    }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `$var_sc.B7.statics.steps.0.label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
padding: 5, 
backgroundColor: "#FFF", 
flexDirection: "row", 
alignItems: "center",
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkbox1";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#CCC"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#CCCCCC"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#315E2D"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#315E2D"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.B7.statics.steps.0.subs`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "space-between"
}`],

            functions:[()=>{}],            childrenItems:[
        

 (...args:any) => <Elements.Custom pass={{
  arrItems: [() => {
  const data = useData((ct) => ct.sc?.B7?.lists?.list1);
  let condMatch = false;
  console.log({ args, data });
  
  const item = tools.findFlatItem(args);
  console.log({ item });

  data?.forEach((d: any) => {
    if (d?.stepId === item.stepId) {
        console.log({d: d?.stepId , item: item.stepId});
      condMatch = true;
    }
  });

  const stlRadio = {
    borderRadius: 100,
    justifyContent: "center",
    alignItems: "center",
    width: 20,
    height: 20,
  };

  const iconActive = () => (
    <RN.View style={[{ backgroundColor: "green" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const iconInactive = () => (
    <RN.View style={[{ backgroundColor: "#ccc" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const condReturn = condMatch ? iconActive() : iconInactive();

  return condReturn;
}] 
}}/>
, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
	flex: 1
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '#555555',
	fontSize: 15,
	fontWeight: '400',
}`
          ],

          children: [
            `$arg_label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{

}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(args) => {
  const css1 =
    "color: limegreen; background-color: darkcyan; font-size: 11px; padding: 2px 6px; border-radius: 3px";
  const pathSideRight = "all.toggles.sideRight";
  const pathEdit = "all.toggles.b9.editSteps";
  const pathNew = "all.toggles.b8.addSteps";
  const item = tools.findFlatItem(args);
  const stepsList = tools.getCtData("sc.B7.lists.list1");

  let condMatch = false;
  let currId;
  console.log({ item, stepsList });

  stepsList?.forEach((d: any) => {
    if (d?.stepId === item?.stepId) {
        console.log({ d });
      condMatch = true;
      currId = d?.docId;
    }
  });

  // ---- set 1
  const set1 = { path: pathSideRight, value: true };
  tools.setData(set1);

  const set2A = { path: pathNew, value: true };
  const set2B = { path: pathEdit, value: false };
  // ---- set 2
  if (!condMatch) {
    console.log("%cAdd New Step Mode - " + pathNew, css1);
    tools.setData(set2A);
    tools.setData(set2B);

    const stepId = item.stepId;

    const set4 = { path: "sc.B8.forms.iptsChanges.stepId", value: stepId };
    tools.setData(set4);
  }

  const set3A = { path: pathEdit, value: true };
  const set3B = { path: pathNew, value: false };
  const set3C = { path: 'sc.B9.forms.editChanges.docId', value: currId };
  // ---- set 3
  if (condMatch) {
    console.log("%cEdit Step Mode - " + pathEdit, css1);
    tools.setData(set3A);
    tools.setData(set3B);
    tools.setData(set3C);
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={68}
    height={37}
    fill="red"
    viewBox="0 0 68 37"
    {...props}
  >
    <G filter="url(#a)">
      <Rect
        width={49}
        height={18.374}
        x={9.142}
        y={7.314}
        fill="#000"
        rx={9.187}
      />
      <Path
        stroke="#fff"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.089}
        d="M33.121 12.53H29.31a1.089 1.089 0 0 0-1.09 1.09v7.624a1.09 1.09 0 0 0 1.09 1.09h7.625a1.09 1.09 0 0 0 1.089-1.09v-3.812m-.817-5.719a1.155 1.155 0 1 1 1.634 1.634l-5.174 5.174-2.178.545.544-2.179 5.174-5.174Z"
      />
    </G>
    <Defs></Defs>
  </Svg>)
      },

      svgOriginal: `
        <svg width="68" height="37" viewBox="0 0 68 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_187_2101)">
<rect x="9.14209" y="7.31372" width="49" height="18.3739" rx="9.18694" fill="black"/>
<path d="M33.1213 12.5303H29.309C29.0201 12.5303 28.743 12.6451 28.5388 12.8494C28.3345 13.0536 28.2197 13.3307 28.2197 13.6196V21.2443C28.2197 21.5332 28.3345 21.8102 28.5388 22.0145C28.743 22.2188 29.0201 22.3335 29.309 22.3335H36.9337C37.2226 22.3335 37.4996 22.2188 37.7039 22.0145C37.9082 21.8102 38.0229 21.5332 38.0229 21.2443V17.4319M37.206 11.7134C37.4227 11.4967 37.7165 11.375 38.0229 11.375C38.3293 11.375 38.6232 11.4967 38.8399 11.7134C39.0565 11.93 39.1783 12.2239 39.1783 12.5303C39.1783 12.8367 39.0565 13.1306 38.8399 13.3473L33.666 18.5212L31.4875 19.0658L32.0321 16.8873L37.206 11.7134Z" stroke="white" stroke-width="1.08925" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<filter id="filter0_d_187_2101" x="-3.62396e-05" y="1.96695e-05" width="67.2843" height="36.658" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="1.82843"/>
<feGaussianBlur stdDeviation="4.57106"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_187_2101"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_187_2101" result="shape"/>
</filter>
</defs>
</svg>

      `,

      altura: "50px",

      largura: "60px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        
          ],

      styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],    args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: 'space-between',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={35}
    height={20}
    fill="red"
    viewBox="0 0 35 20"
    {...props}
  >
    <Path
      fill="#555"
      d="M22.807 7.205a.634.634 0 0 0-.934 0L18 11.315l-3.873-4.11a.634.634 0 0 0-.934 0 .731.731 0 0 0 0 .991l4.333 4.599c.18.191.44.249.667.172a.65.65 0 0 0 .287-.179l4.327-4.592a.731.731 0 0 0 0-.99Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="35" height="20" viewBox="0 0 35 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.8066 7.20526C22.5488 6.93158 22.1307 6.93158 21.8729 7.20526L18 11.3159L14.1271 7.20533C13.8693 6.93165 13.4512 6.93165 13.1934 7.20533C12.9355 7.479 12.9355 7.92273 13.1934 8.19641L17.5258 12.7947C17.7064 12.9865 17.9657 13.0439 18.1934 12.967C18.2985 12.9355 18.3977 12.8759 18.4804 12.7881L22.8066 8.19634C23.0645 7.92266 23.0645 7.47894 22.8066 7.20526Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "35px",

      preenchimento: ['black'],

      args,
    }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `$var_sc.B7.statics.steps.1.label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
padding: 5, 
backgroundColor: "#FFF", 
flexDirection: "row", 
alignItems: "center",
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkbox1";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#CCC"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#CCCCCC"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#315E2D"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#315E2D"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.B7.statics.steps.1.subs`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "space-between"
}`],

            functions:[()=>{}],            childrenItems:[
        

 (...args:any) => <Elements.Custom pass={{
  arrItems: [() => {
  const data = useData((ct) => ct.sc?.B7?.lists?.list1);
  let condMatch = false;
  console.log({ args, data });
  
  const item = tools.findFlatItem(args);
  console.log({ item });

  data?.forEach((d: any) => {
    if (d?.stepId === item.stepId) {
        console.log({d: d?.stepId , item: item.stepId});
      condMatch = true;
    }
  });

  const stlRadio = {
    borderRadius: 100,
    justifyContent: "center",
    alignItems: "center",
    width: 20,
    height: 20,
  };

  const iconActive = () => (
    <RN.View style={[{ backgroundColor: "green" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const iconInactive = () => (
    <RN.View style={[{ backgroundColor: "#ccc" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const condReturn = condMatch ? iconActive() : iconInactive();

  return condReturn;
}] 
}}/>
, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
	flex: 1
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '#555555',
	fontSize: 15,
	fontWeight: '400',
}`
          ],

          children: [
            `$arg_label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{

}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(args) => {
  const css1 =
    "color: limegreen; background-color: darkcyan; font-size: 11px; padding: 2px 6px; border-radius: 3px";
  const pathSideRight = "all.toggles.sideRight";
  const pathEdit = "all.toggles.b9.editSteps";
  const pathNew = "all.toggles.b8.addSteps";
  const item = tools.findFlatItem(args);
  const stepsList = tools.getCtData("sc.B7.lists.list1");

  let condMatch = false;
  let currId;
  console.log({ item, stepsList });

  stepsList?.forEach((d: any) => {
    if (d?.stepId === item?.stepId) {
        console.log({ d });
      condMatch = true;
      currId = d?.docId;
    }
  });

  // ---- set 1
  const set1 = { path: pathSideRight, value: true };
  tools.setData(set1);

  const set2A = { path: pathNew, value: true };
  const set2B = { path: pathEdit, value: false };
  // ---- set 2
  if (!condMatch) {
    console.log("%cAdd New Step Mode - " + pathNew, css1);
    tools.setData(set2A);
    tools.setData(set2B);

    const stepId = item.stepId;

    const set4 = { path: "sc.B8.forms.iptsChanges.stepId", value: stepId };
    tools.setData(set4);
  }

  const set3A = { path: pathEdit, value: true };
  const set3B = { path: pathNew, value: false };
  const set3C = { path: 'sc.B9.forms.editChanges.docId', value: currId };
  // ---- set 3
  if (condMatch) {
    console.log("%cEdit Step Mode - " + pathEdit, css1);
    tools.setData(set3A);
    tools.setData(set3B);
    tools.setData(set3C);
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={68}
    height={37}
    fill="red"
    viewBox="0 0 68 37"
    {...props}
  >
    <G filter="url(#a)">
      <Rect
        width={49}
        height={18.374}
        x={9.142}
        y={7.314}
        fill="#000"
        rx={9.187}
      />
      <Path
        stroke="#fff"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.089}
        d="M33.121 12.53H29.31a1.089 1.089 0 0 0-1.09 1.09v7.624a1.09 1.09 0 0 0 1.09 1.09h7.625a1.09 1.09 0 0 0 1.089-1.09v-3.812m-.817-5.719a1.155 1.155 0 1 1 1.634 1.634l-5.174 5.174-2.178.545.544-2.179 5.174-5.174Z"
      />
    </G>
    <Defs></Defs>
  </Svg>)
      },

      svgOriginal: `
        <svg width="68" height="37" viewBox="0 0 68 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_187_2101)">
<rect x="9.14209" y="7.31372" width="49" height="18.3739" rx="9.18694" fill="black"/>
<path d="M33.1213 12.5303H29.309C29.0201 12.5303 28.743 12.6451 28.5388 12.8494C28.3345 13.0536 28.2197 13.3307 28.2197 13.6196V21.2443C28.2197 21.5332 28.3345 21.8102 28.5388 22.0145C28.743 22.2188 29.0201 22.3335 29.309 22.3335H36.9337C37.2226 22.3335 37.4996 22.2188 37.7039 22.0145C37.9082 21.8102 38.0229 21.5332 38.0229 21.2443V17.4319M37.206 11.7134C37.4227 11.4967 37.7165 11.375 38.0229 11.375C38.3293 11.375 38.6232 11.4967 38.8399 11.7134C39.0565 11.93 39.1783 12.2239 39.1783 12.5303C39.1783 12.8367 39.0565 13.1306 38.8399 13.3473L33.666 18.5212L31.4875 19.0658L32.0321 16.8873L37.206 11.7134Z" stroke="white" stroke-width="1.08925" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<filter id="filter0_d_187_2101" x="-3.62396e-05" y="1.96695e-05" width="67.2843" height="36.658" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="1.82843"/>
<feGaussianBlur stdDeviation="4.57106"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_187_2101"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_187_2101" result="shape"/>
</filter>
</defs>
</svg>

      `,

      altura: "50px",

      largura: "60px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        
          ],

      styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],    args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: 'space-between',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={35}
    height={20}
    fill="red"
    viewBox="0 0 35 20"
    {...props}
  >
    <Path
      fill="#555"
      d="M22.807 7.205a.634.634 0 0 0-.934 0L18 11.315l-3.873-4.11a.634.634 0 0 0-.934 0 .731.731 0 0 0 0 .991l4.333 4.599c.18.191.44.249.667.172a.65.65 0 0 0 .287-.179l4.327-4.592a.731.731 0 0 0 0-.99Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="35" height="20" viewBox="0 0 35 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.8066 7.20526C22.5488 6.93158 22.1307 6.93158 21.8729 7.20526L18 11.3159L14.1271 7.20533C13.8693 6.93165 13.4512 6.93165 13.1934 7.20533C12.9355 7.479 12.9355 7.92273 13.1934 8.19641L17.5258 12.7947C17.7064 12.9865 17.9657 13.0439 18.1934 12.967C18.2985 12.9355 18.3977 12.8759 18.4804 12.7881L22.8066 8.19634C23.0645 7.92266 23.0645 7.47894 22.8066 7.20526Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "35px",

      preenchimento: ['black'],

      args,
    }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `$var_sc.B7.statics.steps.2.label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
padding: 5, 
backgroundColor: "#FFF", 
flexDirection: "row", 
alignItems: "center",
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkbox1";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#CCC"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#CCCCCC"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#315E2D"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#315E2D"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.B7.statics.steps.2.subs`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "space-between"
}`],

            functions:[()=>{}],            childrenItems:[
        

 (...args:any) => <Elements.Custom pass={{
  arrItems: [() => {
  const data = useData((ct) => ct.sc?.B7?.lists?.list1);
  let condMatch = false;
  console.log({ args, data });
  
  const item = tools.findFlatItem(args);
  console.log({ item });

  data?.forEach((d: any) => {
    if (d?.stepId === item.stepId) {
        console.log({d: d?.stepId , item: item.stepId});
      condMatch = true;
    }
  });

  const stlRadio = {
    borderRadius: 100,
    justifyContent: "center",
    alignItems: "center",
    width: 20,
    height: 20,
  };

  const iconActive = () => (
    <RN.View style={[{ backgroundColor: "green" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const iconInactive = () => (
    <RN.View style={[{ backgroundColor: "#ccc" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const condReturn = condMatch ? iconActive() : iconInactive();

  return condReturn;
}] 
}}/>
, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
	flex: 1
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '#555555',
	fontSize: 15,
	fontWeight: '400',
}`
          ],

          children: [
            `$arg_label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{

}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(args) => {
  const css1 =
    "color: limegreen; background-color: darkcyan; font-size: 11px; padding: 2px 6px; border-radius: 3px";
  const pathSideRight = "all.toggles.sideRight";
  const pathEdit = "all.toggles.b9.editSteps";
  const pathNew = "all.toggles.b8.addSteps";
  const item = tools.findFlatItem(args);
  const stepsList = tools.getCtData("sc.B7.lists.list1");

  let condMatch = false;
  let currId;
  console.log({ item, stepsList });

  stepsList?.forEach((d: any) => {
    if (d?.stepId === item?.stepId) {
        console.log({ d });
      condMatch = true;
      currId = d?.docId;
    }
  });

  // ---- set 1
  const set1 = { path: pathSideRight, value: true };
  tools.setData(set1);

  const set2A = { path: pathNew, value: true };
  const set2B = { path: pathEdit, value: false };
  // ---- set 2
  if (!condMatch) {
    console.log("%cAdd New Step Mode - " + pathNew, css1);
    tools.setData(set2A);
    tools.setData(set2B);

    const stepId = item.stepId;

    const set4 = { path: "sc.B8.forms.iptsChanges.stepId", value: stepId };
    tools.setData(set4);
  }

  const set3A = { path: pathEdit, value: true };
  const set3B = { path: pathNew, value: false };
  const set3C = { path: 'sc.B9.forms.editChanges.docId', value: currId };
  // ---- set 3
  if (condMatch) {
    console.log("%cEdit Step Mode - " + pathEdit, css1);
    tools.setData(set3A);
    tools.setData(set3B);
    tools.setData(set3C);
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={68}
    height={37}
    fill="red"
    viewBox="0 0 68 37"
    {...props}
  >
    <G filter="url(#a)">
      <Rect
        width={49}
        height={18.374}
        x={9.142}
        y={7.314}
        fill="#000"
        rx={9.187}
      />
      <Path
        stroke="#fff"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.089}
        d="M33.121 12.53H29.31a1.089 1.089 0 0 0-1.09 1.09v7.624a1.09 1.09 0 0 0 1.09 1.09h7.625a1.09 1.09 0 0 0 1.089-1.09v-3.812m-.817-5.719a1.155 1.155 0 1 1 1.634 1.634l-5.174 5.174-2.178.545.544-2.179 5.174-5.174Z"
      />
    </G>
    <Defs></Defs>
  </Svg>)
      },

      svgOriginal: `
        <svg width="68" height="37" viewBox="0 0 68 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_187_2101)">
<rect x="9.14209" y="7.31372" width="49" height="18.3739" rx="9.18694" fill="black"/>
<path d="M33.1213 12.5303H29.309C29.0201 12.5303 28.743 12.6451 28.5388 12.8494C28.3345 13.0536 28.2197 13.3307 28.2197 13.6196V21.2443C28.2197 21.5332 28.3345 21.8102 28.5388 22.0145C28.743 22.2188 29.0201 22.3335 29.309 22.3335H36.9337C37.2226 22.3335 37.4996 22.2188 37.7039 22.0145C37.9082 21.8102 38.0229 21.5332 38.0229 21.2443V17.4319M37.206 11.7134C37.4227 11.4967 37.7165 11.375 38.0229 11.375C38.3293 11.375 38.6232 11.4967 38.8399 11.7134C39.0565 11.93 39.1783 12.2239 39.1783 12.5303C39.1783 12.8367 39.0565 13.1306 38.8399 13.3473L33.666 18.5212L31.4875 19.0658L32.0321 16.8873L37.206 11.7134Z" stroke="white" stroke-width="1.08925" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<filter id="filter0_d_187_2101" x="-3.62396e-05" y="1.96695e-05" width="67.2843" height="36.658" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="1.82843"/>
<feGaussianBlur stdDeviation="4.57106"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_187_2101"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_187_2101" result="shape"/>
</filter>
</defs>
</svg>

      `,

      altura: "50px",

      largura: "60px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        
          ],

      styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],    args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: 'space-between',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={35}
    height={20}
    fill="red"
    viewBox="0 0 35 20"
    {...props}
  >
    <Path
      fill="#555"
      d="M22.807 7.205a.634.634 0 0 0-.934 0L18 11.315l-3.873-4.11a.634.634 0 0 0-.934 0 .731.731 0 0 0 0 .991l4.333 4.599c.18.191.44.249.667.172a.65.65 0 0 0 .287-.179l4.327-4.592a.731.731 0 0 0 0-.99Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="35" height="20" viewBox="0 0 35 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.8066 7.20526C22.5488 6.93158 22.1307 6.93158 21.8729 7.20526L18 11.3159L14.1271 7.20533C13.8693 6.93165 13.4512 6.93165 13.1934 7.20533C12.9355 7.479 12.9355 7.92273 13.1934 8.19641L17.5258 12.7947C17.7064 12.9865 17.9657 13.0439 18.1934 12.967C18.2985 12.9355 18.3977 12.8759 18.4804 12.7881L22.8066 8.19634C23.0645 7.92266 23.0645 7.47894 22.8066 7.20526Z" fill="#555555"/>
</svg>

      `,

      altura: "20px",

      largura: "35px",

      preenchimento: ['black'],

      args,
    }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	paddingVertical: 10,
	fontSize: 16,
	fontWeight: '700',
	color: '#121417',
}`
          ],

          children: [
            `$var_sc.B7.statics.steps.3.label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
padding: 5, 
backgroundColor: "#FFF", 
flexDirection: "row", 
alignItems: "center",
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkbox1";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#CCC"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#CCCCCC"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkbox1", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={18}
    fill="red"
    viewBox="0 0 18 18"
    {...props}
  >
    <Path
      fill="#315E2D"
      fillRule="evenodd"
      d="M9 18A9 9 0 1 0 9 0a9 9 0 0 0 0 18Zm-.232-5.36 5-6-1.536-1.28-4.3 5.159-2.225-2.226-1.414 1.414 3 3 .774.774.701-.841Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C10.1819 18 11.3522 17.7672 12.4442 17.3149C13.5361 16.8626 14.5282 16.1997 15.364 15.364C16.1997 14.5282 16.8626 13.5361 17.3149 12.4442C17.7672 11.3522 18 10.1819 18 9C18 7.8181 17.7672 6.64778 17.3149 5.55585C16.8626 4.46392 16.1997 3.47177 15.364 2.63604C14.5282 1.80031 13.5361 1.13738 12.4442 0.685084C11.3522 0.232792 10.1819 -1.76116e-08 9 0C6.61305 3.55683e-08 4.32387 0.948211 2.63604 2.63604C0.948212 4.32387 0 6.61305 0 9C0 11.3869 0.948212 13.6761 2.63604 15.364C4.32387 17.0518 6.61305 18 9 18ZM8.768 12.64L13.768 6.64L12.232 5.36L7.932 10.519L5.707 8.293L4.293 9.707L7.293 12.707L8.067 13.481L8.768 12.64Z" fill="#315E2D"/>
</svg>

      `,

      altura: "18px",

      largura: "18px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
paddingHorizontal: 16, 
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `sc.B7.statics.steps.3.subs`,

          itemElements: [
            

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "space-between"
}`],

            functions:[()=>{}],            childrenItems:[
        

 (...args:any) => <Elements.Custom pass={{
  arrItems: [() => {
  const data = useData((ct) => ct.sc?.B7?.lists?.list1);
  let condMatch = false;
  console.log({ args, data });
  
  const item = tools.findFlatItem(args);
  console.log({ item });

  data?.forEach((d: any) => {
    if (d?.stepId === item.stepId) {
        console.log({d: d?.stepId , item: item.stepId});
      condMatch = true;
    }
  });

  const stlRadio = {
    borderRadius: 100,
    justifyContent: "center",
    alignItems: "center",
    width: 20,
    height: 20,
  };

  const iconActive = () => (
    <RN.View style={[{ backgroundColor: "green" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const iconInactive = () => (
    <RN.View style={[{ backgroundColor: "#ccc" }, stlRadio]}>
      <RN.Text style={{ color: "white" }}>✓</RN.Text>
    </RN.View>
  );
  const condReturn = condMatch ? iconActive() : iconInactive();

  return condReturn;
}] 
}}/>
, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	flexDirection: 'row',
	alignItems: 'center',
	flex: 1
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 15,
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: '#555555',
	fontSize: 15,
	fontWeight: '400',
}`
          ],

          children: [
            `$arg_label`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{

}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(args) => {
  const css1 =
    "color: limegreen; background-color: darkcyan; font-size: 11px; padding: 2px 6px; border-radius: 3px";
  const pathSideRight = "all.toggles.sideRight";
  const pathEdit = "all.toggles.b9.editSteps";
  const pathNew = "all.toggles.b8.addSteps";
  const item = tools.findFlatItem(args);
  const stepsList = tools.getCtData("sc.B7.lists.list1");

  let condMatch = false;
  let currId;
  console.log({ item, stepsList });

  stepsList?.forEach((d: any) => {
    if (d?.stepId === item?.stepId) {
        console.log({ d });
      condMatch = true;
      currId = d?.docId;
    }
  });

  // ---- set 1
  const set1 = { path: pathSideRight, value: true };
  tools.setData(set1);

  const set2A = { path: pathNew, value: true };
  const set2B = { path: pathEdit, value: false };
  // ---- set 2
  if (!condMatch) {
    console.log("%cAdd New Step Mode - " + pathNew, css1);
    tools.setData(set2A);
    tools.setData(set2B);

    const stepId = item.stepId;

    const set4 = { path: "sc.B8.forms.iptsChanges.stepId", value: stepId };
    tools.setData(set4);
  }

  const set3A = { path: pathEdit, value: true };
  const set3B = { path: pathNew, value: false };
  const set3C = { path: 'sc.B9.forms.editChanges.docId', value: currId };
  // ---- set 3
  if (condMatch) {
    console.log("%cEdit Step Mode - " + pathEdit, css1);
    tools.setData(set3A);
    tools.setData(set3B);
    tools.setData(set3C);
  }
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={68}
    height={37}
    fill="red"
    viewBox="0 0 68 37"
    {...props}
  >
    <G filter="url(#a)">
      <Rect
        width={49}
        height={18.374}
        x={9.142}
        y={7.314}
        fill="#000"
        rx={9.187}
      />
      <Path
        stroke="#fff"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.089}
        d="M33.121 12.53H29.31a1.089 1.089 0 0 0-1.09 1.09v7.624a1.09 1.09 0 0 0 1.09 1.09h7.625a1.09 1.09 0 0 0 1.089-1.09v-3.812m-.817-5.719a1.155 1.155 0 1 1 1.634 1.634l-5.174 5.174-2.178.545.544-2.179 5.174-5.174Z"
      />
    </G>
    <Defs></Defs>
  </Svg>)
      },

      svgOriginal: `
        <svg width="68" height="37" viewBox="0 0 68 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_187_2101)">
<rect x="9.14209" y="7.31372" width="49" height="18.3739" rx="9.18694" fill="black"/>
<path d="M33.1213 12.5303H29.309C29.0201 12.5303 28.743 12.6451 28.5388 12.8494C28.3345 13.0536 28.2197 13.3307 28.2197 13.6196V21.2443C28.2197 21.5332 28.3345 21.8102 28.5388 22.0145C28.743 22.2188 29.0201 22.3335 29.309 22.3335H36.9337C37.2226 22.3335 37.4996 22.2188 37.7039 22.0145C37.9082 21.8102 38.0229 21.5332 38.0229 21.2443V17.4319M37.206 11.7134C37.4227 11.4967 37.7165 11.375 38.0229 11.375C38.3293 11.375 38.6232 11.4967 38.8399 11.7134C39.0565 11.93 39.1783 12.2239 39.1783 12.5303C39.1783 12.8367 39.0565 13.1306 38.8399 13.3473L33.666 18.5212L31.4875 19.0658L32.0321 16.8873L37.206 11.7134Z" stroke="white" stroke-width="1.08925" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<filter id="filter0_d_187_2101" x="-3.62396e-05" y="1.96695e-05" width="67.2843" height="36.658" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="1.82843"/>
<feGaussianBlur stdDeviation="4.57106"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_187_2101"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_187_2101" result="shape"/>
</filter>
</defs>
</svg>

      `,

      altura: "50px",

      largura: "60px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        
          ],

      styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],    args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ], args 
 }}/>],
            args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 300,
	height: "100%",
	position: 'absolute',
	right: 0,
	top: -70,
	zIndex: 1,
	alignItems: 'center',
	backgroundColor: 'transparent',
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.sideRight", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b3.profile", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b3.profile`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `PERFIL`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
height: '100%',
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{	
	backgroundColor: 'white',
	paddingHorizontal: 35,
	paddingVertical: 8,
	borderRadius: 22,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#777777',
fontSize: 12,
fontWeight: '700',
}`
          ],

          children: [
            `$var_all.authUser.userEmail`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.add", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '200px',
	height:'200px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '200px',
alignItems: 'center',
justifyContent: 'center',
borderRadius: 5,
borderWidth: 1,
borderColor: '#e6e7e8',
padding: 5,
flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={17}
    fill="red"
    viewBox="0 0 18 17"
    {...props}
  >
    <Path
      stroke="#5C5F6A"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M4.808 16.286H2.412a1.198 1.198 0 0 1-1.198-1.198V5.506m0 0h15.572m-15.572 0 2.647-4.193A1.198 1.198 0 0 1 4.868.714h8.264a1.198 1.198 0 0 1 1.007.6l2.647 4.191m0 0v9.583a1.198 1.198 0 0 1-1.198 1.198h-2.396m-7.187-4.193L9 9.1m0 0 2.995 2.994M9 9.1v7.187M9 .714v4.791"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.80769 16.2857H2.41209C2.09441 16.2857 1.78975 16.1595 1.56511 15.9349C1.34048 15.7103 1.21429 15.4056 1.21429 15.0879V5.5055M1.21429 5.5055H16.7857M1.21429 5.5055L3.86143 1.31318C3.96387 1.13559 4.11017 0.987268 4.28634 0.882406C4.46251 0.777545 4.66264 0.719655 4.86758 0.714279H13.1324C13.3374 0.719655 13.5375 0.777545 13.7137 0.882406C13.8898 0.987268 14.0362 1.13559 14.1386 1.31318L16.7857 5.5055M16.7857 5.5055V15.0879C16.7857 15.4056 16.6595 15.7103 16.4349 15.9349C16.2103 16.1595 15.9056 16.2857 15.5879 16.2857H13.1923M6.00545 12.0934L8.99996 9.09889M8.99996 9.09889L11.9945 12.0934M8.99996 9.09889L9.00004 16.2857M9.00004 0.714279V5.50549" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`#FFF`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#878A92",
  paddingVertical: '5',
}`
          ],

          children: [
            `Carregar Imagem`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`mockCondos`],
            arrPathData: [`sc.a1.iptChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.add`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b5.viewCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b5.viewCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [(...args) =>
        functions.firebase.deleteDocTool({ args, pass:{
   arrRefStrings: [
        `condos`, `$var_sc.a1.editChanges.docId`],
   arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [``]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `X`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 18,
	borderWidth: 1,
	borderColor: '#f5f5f5',
	borderRadius: 20,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: "Ex: Residência dos Silvas",
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'Rua das Flores, 123',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
placeholder: 'DD/MM/AAAA',
}`],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b5.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
multiline: 'true',
}`],

          stylesArray: [`{
borderWidth: 1,
borderColor: '#ccc',
padding: 5,
height: 80,
borderRadius: 10,
}`],

          path: [`sc.b5.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b5.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: 'red', }`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  const requiredFields = [
    { path: "sc.a1.editChanges.condo", name: "Nome do Condomínio" },
    { path: "sc.a1.editChanges.address", name: "Endereço" },
    { path: "sc.a1.editChanges.startDate", name: "Data de Início" },
    { path: "sc.a1.editChanges.endDate", name: "Data de Conclusão Prevista" },
    { path: "sc.a1.editChanges.description", name: "Descrição" },
  ];

  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  if (emptyFields.length > 0) {
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Preencha os campos obrigatórios."],
      },
    });
    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return;
  }

  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.a1.validationMessage"],
      value: ["✅ Todos os campos foram preenchidos corretamente."],
    },
  });

  console.log("💾 Validação OK — atualizando documento no Firebase...");

  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig") ?? {};
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  const { getFirestore, doc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  const docId = tools.getCtData("sc.a1.editChanges.docId");

  if (!docId || typeof docId !== "string") {
    console.error("❌ ID do documento inválido:", docId);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["ID do documento inválido. Não foi possível atualizar."],
      },
    });
    return;
  }

  const updatedDoc = {
    condo: getVal("sc.a1.editChanges.condo"),
    address: getVal("sc.a1.editChanges.address"),
    startDate: getVal("sc.a1.editChanges.startDate"),
    endDate: getVal("sc.a1.editChanges.endDate"),
    description: getVal("sc.a1.editChanges.description"),
    updatedAt: serverTimestamp(),
  };

  try {
    await updateDoc(doc(db, "condos", docId), updatedDoc);
    console.log("✅ Documento atualizado com sucesso:", docId);

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["🏢 Dados atualizados com sucesso!"],
      },
    });

    // Limpa dados e fecha modais
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.editChanges"],
        value: [{}],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.a1.editCondo"],
        value: [false],
      },
    });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["all.toggles.sideRight"],
        value: [false],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao atualizar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: ["Erro ao atualizar os dados. Verifique o console."],
      },
    });
  }

//clean text message
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.a1.validationMessage"],
        value: [""],
      },
    });
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [` `]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.validationMessage`],
          value: [``]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.a1.editCondo", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `Condomínio`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '200px',
	height:'200px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
width: '200px',
alignItems: 'center',
justifyContent: 'center',
borderRadius: 5,
borderWidth: 1,
borderColor: '#e6e7e8',
padding: 5,
flexDirection: 'row',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={17}
    fill="red"
    viewBox="0 0 18 17"
    {...props}
  >
    <Path
      stroke="#5C5F6A"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.429}
      d="M4.808 16.286H2.412a1.198 1.198 0 0 1-1.198-1.198V5.506m0 0h15.572m-15.572 0 2.647-4.193A1.198 1.198 0 0 1 4.868.714h8.264a1.198 1.198 0 0 1 1.007.6l2.647 4.191m0 0v9.583a1.198 1.198 0 0 1-1.198 1.198h-2.396m-7.187-4.193L9 9.1m0 0 2.995 2.994M9 9.1v7.187M9 .714v4.791"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.80769 16.2857H2.41209C2.09441 16.2857 1.78975 16.1595 1.56511 15.9349C1.34048 15.7103 1.21429 15.4056 1.21429 15.0879V5.5055M1.21429 5.5055H16.7857M1.21429 5.5055L3.86143 1.31318C3.96387 1.13559 4.11017 0.987268 4.28634 0.882406C4.46251 0.777545 4.66264 0.719655 4.86758 0.714279H13.1324C13.3374 0.719655 13.5375 0.777545 13.7137 0.882406C13.8898 0.987268 14.0362 1.13559 14.1386 1.31318L16.7857 5.5055M16.7857 5.5055V15.0879C16.7857 15.4056 16.6595 15.7103 16.4349 15.9349C16.2103 16.1595 15.9056 16.2857 15.5879 16.2857H13.1923M6.00545 12.0934L8.99996 9.09889M8.99996 9.09889L11.9945 12.0934M8.99996 9.09889L9.00004 16.2857M9.00004 0.714279V5.50549" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: [`#FFF`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
  fontSize: 14, 
  fontWeight: "500", 
  fontFamily: "Inter", 
  color: "#878A92",
  paddingVertical: '5',
}`
          ],

          children: [
            `Carregar Imagem`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome do Condomínio`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.condo`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.condo`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.address`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.address`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Início`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.startDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.startDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data de Conclusão Prevista`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.editChanges.endDate`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges.endDate`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.a1.iptChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.updateDocTool({ args, pass:{
   arrRefStrings: [
        `mockCondos`, `$var_sc.a1.editChanges.docId`],
            arrPathData: [`sc.a1.editChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.editChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.a1.iptChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.a1.editCondo`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
flex: 1,
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b9.editSteps", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
	paddingVertical: 4,
	paddingHorizontal: 10,
	shadowColor: '#000',
	shadowOffset: { width: 0, height: 4 },
	shadowOpacity: 0.1,
	shadowRadius: 4,
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={18}
    height={16}
    fill="red"
    viewBox="0 0 18 16"
    {...props}
  >
    <Path
      stroke="#315E2D"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2.25}
      d="M8.438 14.75 1.688 8l6.75-6.75M2.625 8h13.688"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.4375 14.75L1.6875 8L8.4375 1.25M2.625 8H16.3125" stroke="#315E2D" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

      `,

      altura: "16px",

      largura: "16px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 10,
fontWeight: '300',
color: '#CCCCCC',
}`
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 14,
fontWeight: '700',
color: '#555555',
}`
          ],

          children: [
            `ADICIONAR ETAPA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: '#f5f5f5',
padding: 12,
alignItems: 'center',
}`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "#FFF",
	borderRadius: 20,
	paddingVertical: 6,
	paddingHorizontal: 18,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
paddingHorizontal: 20,
width: '100%',
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#121417',
fontSize: 14,
fontWeight: '700',
left: 4,
}`
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Sub. Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
color: '#121417',
fontSize: 14,
fontWeight: '700',
left: 4,
}`
          ],

          children: [
            `Definição do orçamento.`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.date`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.date`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Responsável`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.responsible`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.responsible`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 12,
color: '#555555',
fontWeight: '700',
}`
          ],

          children: [
            `Descrição Detalhada`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{
borderBottomWidth: 1,
borderBottomColor: '#ccc',
paddingVertical: 2,
paddingHorizontal: 4,
}`],

          path: [`sc.b8.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 15, height: 15, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.a1.validationMessage`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
backgroundColor: "#315E2D", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.setDocTool({ args, pass:{
  arrRefStrings: [`steps`],
            arrPathData: [`sc.b8.editChanges`],
            arrFuncs: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#FFFFFF',
fontWeight: '700',
}`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
backgroundColor: "transparent", 
borderRadius: 20, 
alignItems: "center", 
justifyContent: "center",
paddingHorizontal: 30,
paddingVertical: 8,
borderWidth: 2,
borderColor: '#315E2D',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
fontSize: 15,
color: '#315E2D',
fontWeight: '700',
}`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 40, height: 40, alignItems: "center", justifyContent: "center", backgroundColor: "transparent" }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.b8.addSteps", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "white",
	alignItems: "center",
}`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
              xmlns="http://www.w3.org/2000/svg"
              width={20}
              height={14}
              viewBox="0 0 20 14"
              {...props}
              >
              <Path
              fillRule="evenodd"
              d="M7.707.293a1 1 0 0 1 0 1.414L3.414 6H19a1 1 0 1 1 0 2H3.414l4.293 4.293a1 1 0 1 1-1.414 1.414l-6-6a1 1 0 0 1 0-1.414l6-6a1 1 0 0 1 1.414 0Z"
              clipRule="evenodd"
              {...props}
              />
              </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "14px",

      largura: "14px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Formulário de`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
}`
          ],

          children: [
            `ADICIONAR ETAPA`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={5}
    height={22}
    fill="red"
    viewBox="0 0 5 22"
    {...props}
  >
    <Path
      fill="#315E2D"
      d="M0 19.125a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Zm0-8.5a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Zm0-8.5a2.125 2.125 0 1 1 4.25 0 2.125 2.125 0 0 1-4.25 0Z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="5" height="22" viewBox="0 0 5 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 19.125C0 18.5614 0.223883 18.0209 0.622398 17.6224C1.02091 17.2239 1.56141 17 2.125 17C2.68859 17 3.22909 17.2239 3.6276 17.6224C4.02612 18.0209 4.25 18.5614 4.25 19.125C4.25 19.6886 4.02612 20.2291 3.6276 20.6276C3.22909 21.0261 2.68859 21.25 2.125 21.25C1.56141 21.25 1.02091 21.0261 0.622398 20.6276C0.223883 20.2291 0 19.6886 0 19.125ZM0 10.625C0 10.0614 0.223883 9.52091 0.622398 9.1224C1.02091 8.72388 1.56141 8.5 2.125 8.5C2.68859 8.5 3.22909 8.72388 3.6276 9.1224C4.02612 9.52091 4.25 10.0614 4.25 10.625C4.25 11.1886 4.02612 11.7291 3.6276 12.1276C3.22909 12.5261 2.68859 12.75 2.125 12.75C1.56141 12.75 1.02091 12.5261 0.622398 12.1276C0.223883 11.7291 0 11.1886 0 10.625ZM0 2.125C0 1.56142 0.223883 1.02091 0.622398 0.622398C1.02091 0.223883 1.56141 0 2.125 0C2.68859 0 3.22909 0.223883 3.6276 0.622398C4.02612 1.02091 4.25 1.56142 4.25 2.125C4.25 2.68859 4.02612 3.22909 3.6276 3.6276C3.22909 4.02612 2.68859 4.25 2.125 4.25C1.56141 4.25 1.02091 4.02612 0.622398 3.6276C0.223883 3.22909 0 2.68859 0 2.125Z" fill="#315E2D"/>
</svg>

      `,

      altura: "24px",

      largura: "24px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Sub. Etapa`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Definição do Orçamento`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Data`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.date`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.date`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Responsável`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.responsible`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.responsible`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Descrição detalhada`
          ],

          args,

        }}/>, (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.B9.forms.editChanges.description`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B9.forms.editChanges.description`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>],

            args,
          }}/>
        , (...args:any) => <Elements.BtnImagePicker pass={{
 arrFuncs: [(value) => {
	console.log("Set Images B9",{value});

	const path = "all.temp.images";
	tools.setData({path, value});
}], args,
 }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
 functions.firebase.uploadFileTool({ args, pass:{
 arrFiles: [`$var_all.temp.images`],
 arrFuncs: [(args, urls) => {
console.log({args, urls});

tools.setData({path: "sc.B9.forms.editChanges.arrImages", value: urls});
}],
 }}), async (...args) =>
        functions.firebase.updateDocTool({ args, pass:{
   arrRefStrings: [
        `steps`, `$var_sc.B9.forms.editChanges.docId`],
            arrPathData: [`sc.B9.forms.editChanges`],
            arrFuncs: [() => {}],
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Salvar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.b8.editChanges`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.b8.addSteps`],
          value: [false]
        }}), async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.sideRight`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Cancelar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
 functions.firebase.where({ args, pass:{

  arrRefStrings: [`steps`],
 arrWhere: [(...args) =>
        functions.firebase.whereConds({ args, pass:{
          arrStrings: [
        `email`, 
        `==`, `$var_sc.b8.editChanges.email`],
        }})],
 arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.B7.lists.list1`],
          value: [`$arg_callback`]
        }})],
 }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"c1login",

          styles:[
        `{ alignItems: "center", justifyContent: "center" }`, 
        `{ width: "100%", height: "100%" }`, `{ backgroundColor: "$var_all.colors.primary" }`],

          screenElements:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c2register");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Entrar c/ Google`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"c2register",

          styles:[
        `{ backgroundColor: "$var_all.colors.smoke" }`, 
        `{ width: "100%", height: "100%" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{
	backgroundColor: "$var_all.colors.primary",
	paddingHorizontal: 35,
	height: 70,
}`],

            functions:[()=>{}],            childrenItems:[

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flex: 1 }`],

            functions:[()=>{}],            childrenItems:[

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 98,
	height: 59,
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/planteUmaCasa%2Fplante%20uma%20casa%20logo.png?alt=media&token=2badfafe-64e9-4e4b-a62c-c1a30fb91f58`],

      args,
    }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ padding: 20 }`],
            arrProps: [],
            arrItems: [
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[
              {
                height: "50px",
                width: "80px",
                backgroundColor: "#FDFDFD",
                borderWidth: 2,
                borderColor: "#EEE"
              }
              ],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `pauloantonio@gmail.com`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome Completo`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.C2.forms.iptsChanges.userName`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.C2.forms.iptsChanges.userName`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `RG`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.C2.forms.iptsChanges.userRg`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.C2.forms.iptsChanges.userRg`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Telefone`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.C2.forms.iptsChanges.userPhone`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.C2.forms.iptsChanges.userPhone`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [{
                color: 'black',
                fontSize: 14,
                // fontSize: '20px',<= #ATTENTION: Native ERROR! No string!
              }],

          path: [`sc.C2.forms.iptsChanges.userAddress`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.C2.forms.iptsChanges.userAddress`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ flexDirection: "row", }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "100%", padding: 5, backgroundColor: "#FFF", flexDirection: "row", alignItems: "center"}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkboxMasculino";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "$var_all.colors.secondary", borderRadius: 4, marginRight: 5}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkboxMasculino", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    width={40}
    height={40}
    viewBox="0 0 40 40"
    {...props}
  >
    <Path
      stroke="#FFF"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={4.17}
      d="M33.333 10 15 28.333 6.667 20"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "14px",

      largura: "14px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, backgroundColor: "#FFF", borderRadius: 4, borderWidth: 2, borderColor: "#CCC", marginRight: 5}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkboxMasculino", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Masculino`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "100%", padding: 5, backgroundColor: "#FFF", flexDirection: "row", alignItems: "center"}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
  const path = "all.toggles.checkboxFeminino";
  const currState = tools.getCtData(path);
  tools.functions.setVar({
		args: '',
		pass: { keyPath: [path], value: [!currState] },
	});
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, alignItems: "center", justifyContent: "center", backgroundColor: "$var_all.colors.secondary", borderRadius: 4, marginRight: 5}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkboxFeminino", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    width={40}
    height={40}
    viewBox="0 0 40 40"
    {...props}
  >
    <Path
      stroke="#FFF"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={4.17}
      d="M33.333 10 15 28.333 6.667 20"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "14px",

      largura: "14px",

      preenchimento: [`transparent`],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: 20, height: 20, backgroundColor: "#FFF", borderRadius: 4, borderWidth: 2, borderColor: "#CCC", marginRight: 5}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.checkboxFeminino", "==", false ]]
 , trigger: 'on listen'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Feminino`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
		color: 'red',
}`
          ],

          children: [
            `$var_sc.C2.validationMessage`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: 130,
	height: 36,
	borderRadius: 10,
	paddingHorizontal: 30,
	paddingVertical: 8,
	backgroundColor: '#315E2D',
	alignItems: 'center',
	justifyContent: 'center',
	shadowColor: '#000',
  shadowOffset: { width: 0, height: 4 },
  shadowOpacity: 0.2,
  shadowRadius: 20,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async () => {
  // Lista de campos obrigatórios
  const requiredFields = [
    { path: "sc.C2.forms.iptsChanges.userName", name: "Nome Completo" },
    { path: "sc.C2.forms.iptsChanges.userRg", name: "RG" },
    { path: "sc.C2.forms.iptsChanges.userPhone", name: "Telefone" },
    { path: "sc.C2.forms.iptsChanges.userAddress", name: "Endereço" },
  ];

  // Função auxiliar para obter valor seguro
  const getVal = (path) => {
    const val = tools.getCtData(path);
    if (Array.isArray(val)) return val[0] ?? "";
    return val ?? "";
  };

requiredFields.forEach(f => {
  console.log(f.name, "→", getVal(f.path));
});


  // Checa campos vazios
  const emptyFields = requiredFields.filter((f) => {
    const v = getVal(f.path);
    return v === "" || v === null || v === undefined;
  });

  // Define mensagem e estado final
  let message = "";

  if (emptyFields.length > 0) {
    message = `Preencha os campos obrigatórios.`;

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.C2.validationMessage"],
        value: [message],
      },
    });

    console.warn("⚠️ Campos vazios detectados:", emptyFields.map(f => f.name).join(", "));
    return; // ⚠️ Interrompe o processo se houver campos vazios
  }

  // Se todos os campos estiverem preenchidos
  message = "✅ Todos os campos foram preenchidos corretamente.";
  tools.functions.setVar({
    args: "",
    pass: {
      keyPath: ["sc.C2.validationMessage"],
      value: [message],
    },
  });

  console.log("💾 Validação OK — salvando no Firebase...");

  // inicializar firebase
  let fbInit = tools.getCtData("all.temp.fireInit");
  if (!fbInit) {
    const { initializeApp, getApps } = await import("firebase/app");
    const cfg = tools.getCtData("all.temp.fireConfig");
    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);
    tools.setData({ path: "all.temp.fireInit", value: fbInit });
  }

  // Importa Firestore e salva o documento
  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import("firebase/firestore");
  const db = getFirestore(fbInit);

  // Monta os dados a salvar
  const newDoc = {
    userName: getVal("sc.C2.forms.iptsChanges.userName"),
		userRg: getVal("sc.C2.forms.iptsChanges.userRg"),
		userPhone: getVal("sc.C2.forms.iptsChanges.userPhone"),
    userAddress: getVal("sc.C2.forms.iptsChanges.userAddress"),
		typeAccount: "app",
    createdAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, "users"), newDoc);
    console.log("✅ Documento salvo com ID:", docRef.id);

// Atualiza o documento para incluir o próprio ID
    await updateDoc(docRef, { docId: docRef.id });

    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.C2.validationMessage"],
        value: ["🏢 Documento salvo com sucesso!"],
      },
    });
  } catch (error) {
    console.error("❌ Erro ao salvar documento:", error);
    tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.C2.validationMessage"],
        value: ["Erro ao salvar dados. Verifique o console."],
      },
    });
  }

//clean iptsChanges
tools.functions.setVar({
      args: "",
      pass: {
        keyPath: ["sc.C2.forms.iptsChanges"],
        value: [""],
      },
    });

// Redireciona para tela "c5steps"
    tools.goTo("c5steps");
}
]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ 
	color: "#FFF",
	fontSize: 15,
	fontWeight: '500',
}`
          ],

          children: [
            `Avançar`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],
            args,
        }}/>],

          functions:[()=>{}],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"c2edit",

          styles:[
        `{ backgroundColor: "$var_all.colors.smoke" }`, 
        `{ width: "100%", height: "100%" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
		flexDirection: "row",
		width: "100%",
		height: "100%",
		backgroundColor: "transparent",
		position: "absolute",
		top: 0,
		left: 0,
		zIndex: 1000,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.c3Menu", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: "60%",
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.c3Menu", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c2edit");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c5steps");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Etapas`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c7financial");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Financeiro`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
		backgroundColor: "transparent",
		flex: 1,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "$var_all.colors.primary",
	alignItems: "center",
}

`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg     xmlns="http://www.w3.org/2000/svg"
width={14}     height={12}     fill="red"     viewBox="0 0 14 12"     {...props}   >
<Path       stroke="#FFF"       strokeLinecap="round"       strokeLinejoin="round"       d="M13.5 1H.5m13 5H.5m13 5H.5"     />   </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
	color: "#FFF"
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [`{ padding: 20 }`],
            arrProps: [],
            arrItems: [
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[
              {
                height: "50px",
                width: "80px",
                backgroundColor: "#FDFDFD",
                borderWidth: 2,
                borderColor: "#EEE"
              }
              ],

      URIvariablePath:[`sc.C2.forms.editChanges.userImage`],

      args,
    }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `$var_sc.C2.forms.editChanges.userEmail`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Nome Completo`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `$var_sc.C2.forms.editChanges.userName`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `RG`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `$var_sc.C2.forms.editChanges.userRg`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Telefone`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `$var_sc.C2.forms.editChanges.userPhone`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Endereço`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `$var_sc.C2.forms.editChanges.userAddress`
          ],

          args,

        }}/>, 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Gênero`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `$var_sc.C2.forms.editChanges.userGender`
          ],

          args,

        }}/>],
            args,
        }}/>],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocTool({ args, pass:{
  arrRefStrings: [
        `users`, `lUImxGWmkrVkZzIkoWVm`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.C2.form.editChanges`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"c5steps",

          styles:[
        `{ backgroundColor: "$var_all.colors.smoke" }`, 
        `{ width: "100%", height: "100%" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
		flexDirection: "row",
		width: "100%",
		height: "100%",
		backgroundColor: "transparent",
		position: "absolute",
		top: 0,
		left: 0,
		zIndex: 1000,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.c3Menu", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: "60%",
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.c3Menu", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c2edit");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c5steps");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Etapas`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c7financial");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Financeiro`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
		backgroundColor: "transparent",
		flex: 1,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "$var_all.colors.primary",
	alignItems: "center",
}

`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg     xmlns="http://www.w3.org/2000/svg"
width={14}     height={12}     fill="red"     viewBox="0 0 14 12"     {...props}   >
<Path       stroke="#FFF"       strokeLinecap="round"       strokeLinejoin="round"       d="M13.5 1H.5m13 5H.5m13 5H.5"     />   </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
	color: "#FFF"
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{
	width: "100%",
	height: "100%",
	alignItems: 'center',
}`, `{ backgroundColor: "$var_all.colors.smoke" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	maxWidth: 300,
	minHeight: 80,
	backgroundColor: "#FFF",
	padding: 10,
	flexDirection: 'row',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: '60px',
	height:'60px',
	borderRadius: '6px',
	borderWidth: '1px',
	borderColor: '#e6e7e8',
}],

      URIvariablePath:["https://images.unsplash.com/photo-1488831861984-179da3647265?q=80&w=1228&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 10,
}`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Alphaville PE1`
          ],

          args,

        }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Lote AC 19, Área 450m²`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Etapas principais da obra de uma casa na planta`
          ],

          args,

        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "90%",
	maxWidth: 280,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10,
	flexDirection: 'row',
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M8.293 5.293a1 1 0 0 1 1.414 0l5.823 5.823a1.25 1.25 0 0 1 0 1.768l-5.823 5.823a1 1 0 0 1-1.414-1.414L13.586 12 8.293 6.707a1 1 0 0 1 0-1.414Z"
      clipRule="evenodd"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8.29289 5.29289C8.68342 4.90237 9.31658 4.90237 9.70711 5.29289L15.5303 11.1161C16.0185 11.6043 16.0185 12.3957 15.5303 12.8839L9.70711 18.7071C9.31658 19.0976 8.68342 19.0976 8.29289 18.7071C7.90237 18.3166 7.90237 17.6834 8.29289 17.2929L13.5858 12L8.29289 6.70711C7.90237 6.31658 7.90237 5.68342 8.29289 5.29289Z" fill="#0F1729"/>
</svg>

      `,

      altura: "10px",

      largura: "10px",

      preenchimento: ['black'],

      args,
    }}/>, (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `1. Planejamento e Projeto`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [
        `locations`, 
        `$var_sc.B1.currId`, `localBikes`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.lists.lst3`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"c7financial",

          styles:[
        `{ backgroundColor: "$var_all.colors.smoke" }`, 
        `{ width: "100%", height: "100%" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
		flexDirection: "row",
		width: "100%",
		height: "100%",
		backgroundColor: "transparent",
		position: "absolute",
		top: 0,
		left: 0,
		zIndex: 1000,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.c3Menu", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	width: "60%",
	height: "100%",
	backgroundColor: "white"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "all.toggles.c3Menu", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 20,
	height: 20,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c2edit");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Meu Perfil`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c5steps");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Etapas`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("c7financial");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Financeiro`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
alignItems: 'center',
flexDirection: 'row',
paddingHorizontal: '24',
paddingVertical: '8',
borderRadius: '8px',
width: '100%',
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [undefined]
        }}), 
async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [undefined]
        }}), 
        (...args) => {
          // ---------- get Function from A_Project Scope
          return tools.goTo("a0login");
        }
        ]
 , trigger: 'on press'
}})],            childrenItems:[
        (...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (  <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={28}
    height={28}
    viewBox="0 0 28 28"
    {...props}
  >
    <Path
      fillRule="evenodd"
      d="M14 4.5a9.5 9.5 0 0 0-6.598 16.335c.367-.875 1.123-1.572 1.977-2.06 1.232-.704 2.868-1.108 4.621-1.108 1.753 0 3.389.403 4.62 1.108.855.488 1.61 1.185 1.978 2.06A9.5 9.5 0 0 0 14 4.5Zm4.819 17.689.002-.007a.685.685 0 0 0 .012-.182c0-.407-.297-.97-1.204-1.489-.88-.502-2.16-.844-3.629-.844-1.469 0-2.75.342-3.629.844-.907.519-1.204 1.082-1.204 1.489a.686.686 0 0 0 .014.189A9.455 9.455 0 0 0 14 23.5a9.456 9.456 0 0 0 4.819-1.311ZM2.5 14C2.5 7.649 7.649 2.5 14 2.5S25.5 7.649 25.5 14 20.351 25.5 14 25.5 2.5 20.351 2.5 14ZM14 9.167a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Zm-4.5 2.5a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"
      clipRule="evenodd"
    />
  </Svg>

)
      },

      svgOriginal: `
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14 4.5C8.75329 4.5 4.5 8.75329 4.5 14C4.5 16.6838 5.61287 19.1076 7.40232 20.8353C7.76942 19.9596 8.52496 19.2628 9.37907 18.7747C10.6115 18.0705 12.2474 17.6667 14 17.6667C15.7526 17.6667 17.3885 18.0705 18.6209 18.7747C19.475 19.2628 20.2306 19.9596 20.5977 20.8353C22.3871 19.1076 23.5 16.6838 23.5 14C23.5 8.75329 19.2467 4.5 14 4.5ZM18.8186 22.189C18.8192 22.1872 18.82 22.185 18.8207 22.1824C18.8293 22.1528 18.8333 22.1143 18.8333 22C18.8333 21.5933 18.5357 21.0296 17.6287 20.5112C16.7499 20.009 15.469 19.6667 14 19.6667C12.531 19.6667 11.2502 20.009 10.3713 20.5112C9.46426 21.0296 9.16667 21.5933 9.16667 22C9.16667 22.1143 9.17069 22.1528 9.17926 22.1824C9.18004 22.185 9.18076 22.1872 9.18141 22.189C10.5941 23.0221 12.2412 23.5 14 23.5C15.7588 23.5 17.4059 23.0221 18.8186 22.189ZM2.5 14C2.5 7.64873 7.64873 2.5 14 2.5C20.3513 2.5 25.5 7.64873 25.5 14C25.5 20.3513 20.3513 25.5 14 25.5C7.64873 25.5 2.5 20.3513 2.5 14ZM14 9.16667C12.6193 9.16667 11.5 10.286 11.5 11.6667C11.5 13.0474 12.6193 14.1667 14 14.1667C15.3807 14.1667 16.5 13.0474 16.5 11.6667C16.5 10.286 15.3807 9.16667 14 9.16667ZM9.5 11.6667C9.5 9.18139 11.5147 7.16667 14 7.16667C16.4853 7.16667 18.5 9.18139 18.5 11.6667C18.5 14.1519 16.4853 16.1667 14 16.1667C11.5147 16.1667 9.5 14.1519 9.5 11.6667Z" fill="#0F1729"/>
</svg>

      `,

      altura: "20px",

      largura: "20px",

      preenchimento: ['black'],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: '$var_all.texts.sizes.small',
}`
          ],

          children: [
            `Sair`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
		backgroundColor: "transparent",
		flex: 1,
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [false]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "$var_all.colors.primary",
	alignItems: "center",
}

`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.toggles.c3Menu`],
          value: [true]
        }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg     xmlns="http://www.w3.org/2000/svg"
width={14}     height={12}     fill="red"     viewBox="0 0 14 12"     {...props}   >
<Path       stroke="#FFF"       strokeLinecap="round"       strokeLinejoin="round"       d="M13.5 1H.5m13 5H.5m13 5H.5"     />   </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
	color: "#FFF"
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{
	width: "100%",
	height: "100%",
	alignItems: 'center',
}`, `{ backgroundColor: "$var_all.colors.smoke" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "100%",
	maxWidth: 300,
	minHeight: 80,
	backgroundColor: "#FFF",
	padding: 10,
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Valor total da obra`
          ],

          args,

        }}/>, 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{
	padding: 10,
}`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `R$ 2.200,00`
          ],

          args,

        }}/>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        ],
            args,
        }}/>],

          functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
        functions.firebase.getDocsTool({ args, pass:{
   arrRefStrings: [
        `locations`, 
        `$var_sc.B1.currId`, `localBikes`],
            arrFuncs: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`all.lists.lst3`],
          value: [`$arg_callback`]
        }})],
        }})]
 , trigger: 'on init'
}})],

          args,
        }}/>, 
        

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"cXlist",

          styles:[
        `{ backgroundColor: "$var_all.colors.smoke" }`, 
        `{ width: "100%", height: "100%" }`, `{ justifyContent: "flex-start" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	backgroundColor: "$var_all.colors.primary",
	alignItems: "center",
}

`, `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	console.log("Olá Amigos")
}]
 , trigger: 'on press'
}})],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => {
	tools.goTo("b1home")
}]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.SvgView1 pass={{
      componentSvg: (Svg:any, SvgObj:any) => {
        const { Defs, Stop, Path, LinearGradient, G, Circle, Rect, Mask } = SvgObj;
        return (props:any) => (<Svg
xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 320 512"
    fill="red"
    {...props}
  >
    <Path
      fill="#fff"
      d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"
    />
  </Svg>)
      },

      svgOriginal: `
        <svg></svg>
      `,

      altura: "16px",

      largura: "16px",

      preenchimento: ['black'],

      args,
    }}/>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ flex: 1 }`, 
        `{ 
	width: "100%",
	flexDirection: "row",
	alignItems: "center",
	justifyContent: "flex-start"
 }`, `{ padding: 10 }`],

            functions:[()=>{}],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	fontSize: "$var_all.texts.sizes.large",
	color: "#FFF"
}`
          ],

          children: [
            `Título`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 40,
	height: 40,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
}`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , (...args:any) => <Elements.ScrollBar pass={{
            styles: [],
            arrProps: [],
            arrItems: [
        (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            { color: 'black', fontSize: 12, }
          ],

          children: [
            `Funcs. Firebase Revisadas:
fbInit - OK
getDocs - OK
getDoc - OK
deleteDoc - OK
updateDoc
fireUpload
where
whereConds ??`
          ],

          args,

        }}/>, (...args:any) => <Elements.FlatList2 pass={{
          elementProperties: [
            {}
          ],

          pData: `all.lists.lst3`,

          itemElements: [
            (...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	padding: 20
}`
          ],

          children: [
            `$arg_name`
          ],

          args,

        }}/>
          ],

      styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],    args,
        }}/>],
            args,
        }}/>],

          functions:[()=>{}],

          args,
        }}/>, 

        (...args: any) => <Elements.Screen3 pass={{
          pathScreen:"a0login_old",

          styles:[
        `{ width: "100%", height: "100%" }`, 
        `{ alignItems: "center", justifyContent: "center" }`, `{ backgroundColor: "$var_all.colors.smoke" }`],

          screenElements:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
        `{ 
	width: "80%",
	maxWidth: 280,
	minHeight: 150,
	backgroundColor: "#FFF",
	borderRadius: 20,
	padding: 10
}`, `{ alignItems: "center", justifyContent: "center" }`],

            functions:[()=>{}],            childrenItems:[
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

    (...args:any) => <Elements.ImageBox pass={{
      elementsProperties:[{}],

      styles:[{
	width: 80,
	height: 30
}],

      URIvariablePath:[`https://firebasestorage.googleapis.com/v0/b/devs-tests-95208.appspot.com/o/images%2FAdmin.png?alt=media&token=94ebd672-5bdd-4e25-81b7-a1b36e29e6e0`],

      args,
    }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0.forms.iptsChanges.userEmail`],

          funcsArray: [async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userEmail`],
          value: [`$arg_callback`]
        }})],

          args,
        }}/>, 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [{}],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0.forms.iptsChanges.userPassword`],

          funcsArray: [
        async (...args) =>
        functions.setVar({ args, pass:{
          keyPath: [`sc.A0.forms.iptsChanges.userPassword`],
          value: [`$arg_callback`]
        }}), (txt) => {
	const x = '';
	console.log({txt});
	tools.setData({path: "sc.A0.forms.iptsChanges.pass2", value: txt });
}],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        , 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{}`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [() => [ "sc.A0.forms.showErr", "==", true ]]
 , trigger: 'on listen'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{
	color: "red"
}`
          ],

          children: [
            `$var_sc.A0.forms.msgs.msg1`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 
        (...args:any) => <Elements.IptTxtEdit pass={{
          propsArray: [`{
	keyboardType: 'phone-pad',
	maxLength: 20
}`],

          stylesArray: [`{ 
	padding: 8,
	paddingLeft: 2,
	borderBottomColor: "$var_all.colors.primary",
	borderBottomWidth: 2,
	marginBottom: 16,
	textAlign: "left"
}`],

          path: [`sc.A0.forms.iptsChanges.pass`],

          funcsArray: [(txt) => {
const digits = String(txt).replace(/[^0-9]/g, '').slice(0, 11);
  const ddd = digits.slice(0, 2);
  const isCel = digits.length > 10;
  const first = digits.slice(2, isCel ? 7 : 6);
  const last  = digits.slice(isCel ? 7 : 6, isCel ? 11 : 10);

  const mask =
    (ddd ? '(' + ddd + ') ' : '') +
    (first ? first : '') +
    (last ? ' - ' + last : '');

  console.log({ mask });
	tools.setData({path: "sc.A0.forms.iptsChanges.pass", value: mask });
}],

          args,
        }}/>, 
        

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ width: "fit-content", minWidth: 120, height: 30, backgroundColor: "$var_all.colors.primary", borderRadius: 20, alignItems: "center", justifyContent: "center" }`],

            functions:[async (...args) =>
 functions.funcGroup({ args, pass:{
 arrFunctions: [async (...args) =>
 functions.firebase.where({ args, pass:{

  arrRefStrings: [`users`],
 arrWhere: [
 (...args) =>
        functions.firebase.whereConds({ args, pass:{
          arrStrings: [
        `userEmail`, 
        `==`, `$var_sc.A0.forms.iptsChanges.userEmail`],
        }}), (...args) =>
        functions.firebase.whereConds({ args, pass:{
          arrStrings: [
        `userPassword`, 
        `==`, `$var_sc.A0.forms.iptsChanges.userPassword`],
        }})],
 arrFuncs: [(args) => {
  console.log('minha custom login 1', args);

  const isArray = Array.isArray(args);
  const isEmpty = !isArray || args.length === 0;

	if (isEmpty) {
		
tools.setData({
      path: 'sc.A0.forms.showErr',
      value: true });

    tools.setData({
      path: 'sc.A0.forms.msgs.msg1',
      value: 'Usuário ou Senha incorretos.'});
    return;
  }

  const loginData = args[0] ?? null;

  console.log('custom 1', { loginData });

  const invalidData = !loginData || typeof loginData !== 'object';
  console.log('custom 2', { invalidData });
  if (invalidData) return;

  console.log('custom 3', { loginData });

  const typeAccount = loginData?.typeAccount;
  const isAdm = typeAccount === 'adm';

  if (isAdm) {
    tools.goTo('a1list');
  } else {
    tools.goTo('home');
  }
}],
 }})]
 , trigger: 'on press'
}})],            childrenItems:[(...args:any) => <Elements.Text pass={{
          arrProps: [
            '{}'
          ],

          arrStyles: [
            `{ color: "#FFF" }`
          ],

          children: [
            `Entrar`
          ],

          args,

        }}/>],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[`{ 
	width: 10,
	height: 10,
	alignItems: "center",
	justifyContent: "center",
	backgroundColor: "transparent"
 }`],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

            args,
          }}/>
        , 

          (...args:any) => <Elements.DynView pass={{
            elementsProperties:['{}'],

            styles:[
              {
                backgroundColor: 'white',
                justifyContent: 'center',
                minHeight: 22,
                width: "100%",
              }
              ],

            functions:[()=>{}],            childrenItems:[() =><></>],

            args,
          }}/>
        ],

          functions:[()=>{}],

          args,
        }}/>
          ];

          const initCt = () => (
 {
 
        'all': { 
'firebaseConfig': {
  apiKey: "AIzaSyA_D6qWCRodaRgthOGWyLjsbqloqj-IDpA",
  authDomain: "projeto-plante-uma-casa.firebaseapp.com",
  projectId: "projeto-plante-uma-casa",
  storageBucket: "projeto-plante-uma-casa.firebasestorage.app",
  messagingSenderId: "1099098264007",
  appId: "1:1099098264007:web:5c809faec264a9400389e2",
  measurementId: "G-GZPSPJQ1WL"
}, 
'colors': { 
'primary': '#315E2D', 
'secondary': "#0064fe", 'smoke': "#ddd" } 
, 
'lists': { 
'lt1': [{name: "João", img: "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name: "Luciana"},{name: "Pedro"}], 
'lst2': [{name: "Tarefa 1", date: "21/03/25"},{name: "Tarefa 2", date: "21/03/25"},{name: "Tarefa 3", date: "24/03/25"}], 'lst3': [
	{name: "Task 1", check: false},
	{name: "Task 2", check: false},
	{name: "Task 3", check: false},
	{name: "Task 4", check: false},
	{name: "Task 5", check: false},
	{name: "Task 6", check: false},
	{name: "Task 7", check: false},
	{name: "Task 8", check: false},
	{name: "Task 9", check: false},
	{name: "Task 10", check: false},
	{name: "Task 11", check: false},
	{name: "Task 12", check: false}
] } 
, 
'toggles': { 
'box1': true, 'checkbox1': false } 
, 
'texts': { 
'sizes': { 
'small': "12px", 
'medium': "14px", 'large': "16px" } 
, 'contents': {   } 
 } 
, 'authUser': {} } 
, 'sc': { 
'A0': { 'forms': { 'iptsChanges': {
	userEmail: "leandrowebmaster@gmail.com",
	userPassword: "123456",
	teste: "123456"
} } 
 } 
, 
'A0B': { 'forms': { 'iptsChanges': {
	userEmail: ""
} } 
 } 
, 
'A0D': { 'forms': { 'iptsChanges': {
	userEmail: "",
	userPassword: "",
	mode: "",
	oobCode: "",
	continueUrl: ""
} } 
 } 
, 
'A1': { 'forms': { 'iptsChanges': {   } 
 } 
 } 
, 
'A12': { 'forms': { 'iptsChanges': {
	partnerName: "",
	partnerMail: "",
	partnerActivity: ""
} } 
 } 
, 
'B1': { 
'forms': { 'iptsChanges': {   } 
 } 
, 'currId': "HW6jpFRnQGxnZRaP4Y6M" } 
, 
'B3': { 
'forms': { 'iptsChanges': {   } 
 } 
, 
'currId': "8F9zjOn7lqQK0QPpzpjj", 
'pathTest': "iptsChanges", 'statics': {
	picker1: [
		{ 
			label: 'Selecione…',
			value: '',
			disabled: true
		},
		{ 
			label: 'Opção A',
			value: 'A'
		},
		{ 
			label: 'Opção B',
			value: 'B'
		},
		{ 
			label: 'Opção C',
			value: 'C'
		},
		{ 
			label: 'Opção D',
			value: 'D'
		},
		{ 
			label: 'Opção E (desabilitada)',
			value: 'E',
			disabled: true
		},
		{ 
			label: 'Opção F',
			value: 'F'
		},
		{ 
			label: 'Opção G',
			value: 'G'
		},
		{ 
			label: 'Opção H',
			value: 'H'
		},
	]
} } 
, 
'B7': { 
'forms': { 'iptsChanges': {   } 
 } 
, 
'currId': "", 'statics': 
{
  steps: [
    {
      label: "1. Planejamento e Projeto",
      subs: [
        {stepId: "s1.1", label: "Definição de Orçamento" },
        {stepId: "s1.2", label: "Escolha do Terreno" },
        {stepId: "s1.3", label: "Contratação de arquiteto/engenheiro" },
        {stepId: "s1.4", label: "Elaboração do projeto arquitetônico e complementare..." },
        {stepId: "s1.5", label: "Aprovação na prefeitura e órgãos competentes...." },
      ],
		},
    {
      label: "2. Preparo do Terreno",
      subs: [
        {stepId: "s2.1", label: "Limpeza e terraplenagem." },
        {stepId: "s2.2", label: "Sondagem do solo (se necessário)." },
        {stepId: "s2.3", label: "Marcação da obra (gabarito)." },
        {stepId: "s2.4", label: "..." },
        {stepId: "s2.5", label: "..." },
      ],
    },
    {
      label: "3. Fundações",
      subs: [
        {stepId: "s3.1", label: "..." },
        {stepId: "s3.2", label: "..." },
        {stepId: "s3.3", label: "..." },
        {stepId: "s3.4", label: "..." },
        {stepId: "s3.5", label: "..." },
      ],
    },
    {
      label: "4. Estrutura",
      subs: [
        {stepId: "s4.1", label: "..." },
        {stepId: "s4.2", label: "..." },
        {stepId: "s4.3", label: "..." },
        {stepId: "s4.4", label: "..." },
        {stepId: "s4.5", label: "..." },
      ],
    }
  ]
} } 
, 'A0C': { 'forms': { 'iptsChanges': {
	userEmail: ""
} } 
 } 
 } 
 
} 
 );
          const initObj = initCt();
          // console.log(initObj);

          const arrInitFuncs = [
            async (...args) =>
  functions.firebase.fireInit({ args, pass:{
   fbConfig: `all.firebaseConfig`,

        }})
          ];

          export const useRoutes = create(() => ({ currRoute }));
          export const useData = create(() => initObj);

          // ---------- set Main Component
          export const Router = () => {
            return (
              <Project
                configData={{
                  screens,
                  initCt,
                  arrInitFuncs,
                }}
              />
            );
          };
        
