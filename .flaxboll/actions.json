{"1760035707962":{"actionType":"saveAll","createdAt":"1760035707962","actionID":"1760035707962","userID":"#TEMP","path":"system.capsules.5618c2ee-eea4-4700-8952-67ec7840cfdf.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\n\nexport const BtnImgPic = (props: any) => {\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // ---------- set Props\n  const { arrFuncs, args } = props;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickWeb = () => {\n    inputRef.current?.click();\n  };\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const objectUrl = URL.createObjectURL(file);\n      setImage(objectUrl);\n    }\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickWeb()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n      </RN.View>\n\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        onChange={handleWebFile}\n      />\n    </>\n  );\n};\n\nconst styles = RN.StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  image: {\n    width: 300,\n    height: 200,\n    resizeMode: 'cover',\n    borderRadius: 10,\n  },\n});","newValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport const BtnImgPic = (props: any) => {\n  // ---------- set Props\n  const { arrFuncs, args } = props;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickNative = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Permiss√£o para acessar a galeria foi negada');\n      return;\n    }\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      quality: 1,\n    });\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickNative()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n      </RN.View>\n    </>\n  );\n};\n\nconst styles = RN.StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  image: {\n    width: 300,\n    height: 200,\n    resizeMode: 'cover',\n    borderRadius: 10,\n  },\n});"}}