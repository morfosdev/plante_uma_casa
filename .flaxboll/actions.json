{"1753811080208":{"actionType":"saveAll","createdAt":"1753811080208","actionID":"1753811080208","userID":"#TEMP","path":"system.capsules.5bbf809b-5c91-4d02-9677-ffec28704efe.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"import { getCtData, testVarType } from '../../project';\nimport * as firestore from 'firebase/firestore';\n\ntype Tprops = {\n  args: any;\n  pass: {\n    fbInit: any;\n    arrRefStrings: string[];\n    arrWhere: any;\n    arrFuncs: any[];\n  };\n};\n\nexport const css1 =\n  'color: green; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: yellow; background-color: green; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const where = async (props: Tprops) => {\n  // ---------- set Props\n  const { args, pass } = props;\n  const { arrRefStrings, arrWhere, arrFuncs } = pass;\n  const newArrStringRefs = arrRefStrings.map(i => {\n    console.log('1', { i });\n    const varValue = testVarType(i, args);\n    console.log('2', { varValue });\n\n    return varValue;\n  });\n\n  console.log('3', { newArrStringRefs });\n\n  // ---------- set Local Imports\n  const { getFirestore, getDocs, collection, where, query } = firestore;\n  const fbErrMsg1 = 'Alguma entrada where foi preenchida errado.';\n\n  // -----------------------------\n  // ---------- set Init Firestore\n  // -----------------------------\n  const fbInit = getCtData('all.temp.fireInit');\n  if (!fbInit) return console.log(fbErrMsg1, { fbInit });\n  const fireInit: any = getFirestore(fbInit);\n\n  const newArrWhere = arrWhere.map(e => {\n    console.log('1 where conds', { e });\n    const varValue = testVarType(e, args);\n    console.log('2 where conds', { varValue });\n\n    return varValue;\n  });\n\n  const arrConds = [];\n  const newArrWh = () => {\n    const promiseArray = newArrWhere.map((capsCond: any) => {\n      const resolve = capsCond();\n\n      arrConds.push(resolve);\n\n      return getDocs(\n        query(refColl, where(resolve.field, resolve.operator, resolve.value)),\n      );\n    });\n\n    return promiseArray;\n  };\n\n  const refColl = collection(fireInit, ...newArrStringRefs);\n  const resolvePromise = await Promise.all(newArrWh());\n\n  const arrDocs = [];\n  resolvePromise &&\n    resolvePromise.forEach((snaps: any) => {\n      snaps.forEach((doc: any) => {\n        arrDocs.push(doc.data());\n      });\n    });\n\n  console.log('%cWhere Cond', css1, { arrConds });\n  console.log('%cWhere Cond', css1, { newArrStringRefs });\n  console.log('%cWhere Docs Found', css2, { arrDocs });\n\n  for (const currFunc of arrFuncs) currFunc(arrDocs, args);\n};\n","newValue":"import { getCtData, testVarType } from '../../project';\nimport * as firestore from 'firebase/firestore';\n\ntype Tprops = {\n  args: any;\n  pass: {\n    fbInit: any;\n    arrRefStrings: string[];\n    arrWhere: any;\n    arrFuncs: any[];\n  };\n};\n\nexport const css1 =\n  'color: green; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: yellow; background-color: green; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const where = async (props: Tprops) => {\n  // ---------- set Props\n  const { args, pass } = props;\n  const { arrRefStrings, arrWhere, arrFuncs } = pass;\n  const newArrStringRefs = arrRefStrings.map(i => {\n    console.log('1', { i });\n    const varValue = testVarType(i, args);\n    console.log('2', { varValue });\n\n    return varValue;\n  });\n\n  console.log('3', { newArrStringRefs });\n\n  // ---------- set Local Imports\n  const { getFirestore, getDocs, collection, where, query } = firestore;\n  const fbErrMsg1 = 'Alguma entrada where foi preenchida errado.';\n\n  // -----------------------------\n  // ---------- set Init Firestore\n  // -----------------------------\n  const fbInit = getCtData('all.temp.fireInit');\n  if (!fbInit) return console.log(fbErrMsg1, { fbInit });\n  const fireInit: any = getFirestore(fbInit[0]);\n\n  const newArrWhere = arrWhere.map(e => {\n    console.log('1 where conds', { e, e2: e() });\n    const varValue = testVarType(e, args);\n    console.log('2 where conds', { varValue });\n\n    return varValue;\n  });\n\n  const arrConds = [];\n  const newArrWh = () => {\n    const promiseArray = newArrWhere.map((capsCond: any) => {\n      const resolve = capsCond();\n\n      arrConds.push(resolve);\n\n      return getDocs(\n        query(refColl, where(resolve.field, resolve.operator, resolve.value)),\n      );\n    });\n\n    return promiseArray;\n  };\n\n  const refColl = collection(fireInit, ...newArrStringRefs);\n  const resolvePromise = await Promise.all(newArrWh());\n\n  const arrDocs = [];\n  resolvePromise &&\n    resolvePromise.forEach((snaps: any) => {\n      snaps.forEach((doc: any) => {\n        arrDocs.push(doc.data());\n      });\n    });\n\n  console.log('%cWhere Cond', css1, { arrConds });\n  console.log('%cWhere Cond', css1, { newArrStringRefs });\n  console.log('%cWhere Docs Found', css2, { arrDocs });\n\n  for (const currFunc of arrFuncs) currFunc(arrDocs, args);\n};\n"}}