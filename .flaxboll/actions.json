{"1761568366207":{"actionType":"saveAll","createdAt":"1761568366207","actionID":"1761568366207","userID":"#TEMP","path":"system.capsules.ec4c2e05-e5e2-45c3-b51b-70530d2f8056.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  const requiredFields = [\n    { path: \"sc.A7.forms.editChanges.owner\", name: \"Nome do Propriet√°rio\" },\n    { path: \"sc.A7.forms.editChanges.email\", name: \"E-mail\" },\n    { path: \"sc.A7.forms.editChanges.lot\", name: \"Obra\" },\n    { path: \"sc.A7.forms.editChanges.area\", name: \"√Årea\" },\n    { path: \"sc.A7.forms.editChanges.totalValue\", name: \"Valor total da obra\" },\n\t\t{ path: \"sc.A7.forms.editChanges.firstInstallment\", name: \"Valor total da entrada\" },\n  ];\n\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  if (emptyFields.length > 0) {\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"Preencha os campos obrigat√≥rios.\"],\n      },\n    });\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return;\n  }\n\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.a7.validationMessage\"],\n      value: [\"‚úÖ Todos os campos foram preenchidos corretamente.\"],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî atualizando documento no Firebase...\");\n\n\n// Inicializar Firebase\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\") ?? {};\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n// Importa Firestore\n  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  const docId = tools.getCtData(\"sc.A7.forms.editChanges.docId\");\n\n  if (!docId || typeof docId !== \"string\") {\n    console.error(\"‚ùå ID do documento inv√°lido:\", docId);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"ID do documento inv√°lido. N√£o foi poss√≠vel atualizar.\"],\n      },\n    });\n    return;\n  }\n\n// Monta os dados a salvar\n  const updatedDoc = {\n    owner: getVal(\"sc.A7.forms.editChanges.owner\"),\n    email: getVal(\"sc.A7.forms.editChanges.partnerMail\"),\n    lot: getVal(\"sc.A7.forms.editChanges.lot\"),\n\t\tarea: getVal(\"sc.A7.forms.editChanges.area\"),\n    totalValue: getVal(\"sc.A7.forms.editChanges.totalValue\"),\n    firstInstallment: getVal(\"sc.A7.forms.editChanges.firstInstallment\"),\n\tupdatedAt: serverTimestamp(),\n  };\n\n  try {\n// Salva o doc\n    await updateDoc(doc(db, \"lots\", docId), updatedDoc);\n    console.log(\"‚úÖ Documento atualizado com sucesso:\", docId);\n\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"üè¢ Dados atualizados com sucesso!\"],\n      },\n    });\n\n    // Limpa dados e fecha modais\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.editChanges\"],\n        value: [{}],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.a7.editCondo\"],\n        value: [false],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.sideRight\"],\n        value: [false],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao atualizar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"Erro ao atualizar os dados. Verifique o console.\"],\n      },\n    });\n  }\n}\n","newValue":"async () => {\n  const requiredFields = [\n    { path: \"sc.A7.forms.editChanges.owner\", name: \"Nome do Propriet√°rio\" },\n    { path: \"sc.A7.forms.editChanges.email\", name: \"E-mail\" },\n    { path: \"sc.A7.forms.editChanges.lot\", name: \"Obra\" },\n    { path: \"sc.A7.forms.editChanges.area\", name: \"√Årea\" },\n    { path: \"sc.A7.forms.editChanges.totalValue\", name: \"Valor total da obra\" },\n\t\t{ path: \"sc.A7.forms.editChanges.firstInstallment\", name: \"Valor total da entrada\" },\n  ];\n\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  if (emptyFields.length > 0) {\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"Preencha os campos obrigat√≥rios.\"],\n      },\n    });\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return;\n  }\n\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.a7.validationMessage\"],\n      value: [\"‚úÖ Todos os campos foram preenchidos corretamente.\"],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî atualizando documento no Firebase...\");\n\n\n// Inicializar Firebase\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\") ?? {};\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n// Importa Firestore\n  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  const docId = tools.getCtData(\"sc.A7.forms.editChanges.docId\");\n\n  if (!docId || typeof docId !== \"string\") {\n    console.error(\"‚ùå ID do documento inv√°lido:\", docId);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"ID do documento inv√°lido. N√£o foi poss√≠vel atualizar.\"],\n      },\n    });\n    return;\n  }\n\n// Monta os dados a salvar\n  const updatedDoc = {\n    owner: getVal(\"sc.A7.forms.editChanges.owner\"),\n    email: getVal(\"sc.A7.forms.editChanges.email\"),\n    lot: getVal(\"sc.A7.forms.editChanges.lot\"),\n\t\tarea: getVal(\"sc.A7.forms.editChanges.area\"),\n    totalValue: getVal(\"sc.A7.forms.editChanges.totalValue\"),\n    firstInstallment: getVal(\"sc.A7.forms.editChanges.firstInstallment\"),\n\tupdatedAt: serverTimestamp(),\n  };\n\n  try {\n// Salva o doc\n    await updateDoc(doc(db, \"lots\", docId), updatedDoc);\n    console.log(\"‚úÖ Documento atualizado com sucesso:\", docId);\n\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"üè¢ Dados atualizados com sucesso!\"],\n      },\n    });\n\n    // Limpa dados e fecha modais\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.editChanges\"],\n        value: [{}],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.a7.editCondo\"],\n        value: [false],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.sideRight\"],\n        value: [false],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao atualizar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a7.validationMessage\"],\n        value: [\"Erro ao atualizar os dados. Verifique o console.\"],\n      },\n    });\n  }\n}\n"}}