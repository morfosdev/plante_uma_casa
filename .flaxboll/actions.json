{"1755806109201":{"actionType":"saveAll","createdAt":"1755806109201","actionID":"1755806109201","userID":"#TEMP","path":"system.capsules.4a541072-7bf3-4396-87fd-11e9879a9e04.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { TextInput } from 'react-native';\n\n// ---------- import Local Tools\nimport { getVarValue, getStlValues, pathSel, setData } from '../project';\nimport { useData } from '../../..';\n\ntype TFunc = (val: string, args?: any) => any | Promise<any>;\n\ntype Tprops = {\n  pass: {\n    propsArray?: any[];\n    stylesArray?: any[];\n    funcsArray?: TFunc[];      // opcional\n    path: (string | number)[];\n    args?: any;\n  };\n};\n\n// --- máscara exemplo (pode trocar por outra)\nconst maskPhoneBR = (txt: string = '') => {\n  const d = String(txt).replace(/\\D/g, '').slice(0, 11);\n  const ddd = d.slice(0, 2);\n  const isCel = d.length > 10;\n  const first = d.slice(2, isCel ? 7 : 6);\n  const last  = d.slice(isCel ? 7 : 6, isCel ? 11 : 10);\n  return (ddd ? `(${ddd})` : '') + (first ? ` ${first}` : '') + (last ? `-${last}` : '');\n};\n\n// IptTxtEdit - Entrada de Texto com prop value\nexport const IptTxtEdit = (props: Tprops) => {\n  const { propsArray = [], stylesArray = [], funcsArray = [], path, args } = props.pass;\n\n  const joinedPath = path.join();\n\n  // Estado local\n  const [sttText, setText] = React.useState('');\n\n  // Leitura do store (sempre segura; só vamos usar quando for o caso)\n  const editData = useData(ct => pathSel(ct, joinedPath));\n\n  // Tem handlers externos?\n  const hasExternal = Array.isArray(funcsArray) && funcsArray.length > 0;\n\n  // Hidrata do store apenas quando há fluxo externo\n  React.useEffect(() => {\n    if (!hasExternal) return;\n    if (editData !== undefined && editData !== sttText) {\n      setText(String(editData));\n    }\n  }, [editData, hasExternal, sttText]);\n\n  // onChange: decide o “modo”\n  const getTxt = async (val: string) => {\n    const masked = maskPhoneBR(val);\n\n    if (!hasExternal) {\n      // modo interno: só estado local\n      setText(masked);\n      return;\n    }\n\n    // modo externo: mantém input responsivo e sincroniza store\n    setText(masked); // feedback imediato\n    setData({ path: joinedPath, value: masked });\n    for (const fn of funcsArray) {\n      await fn(masked, args);\n    }\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n\n  // ---------- Extra props do usuário\n  const userElProps: Record<string, any> = {};\n  for (const strObj of propsArray) {\n    if (!strObj || typeof strObj !== 'string') continue;\n    const parsed = JSON5.parse(strObj);\n    for (const key in parsed) {\n      const value = parsed[key];\n      const [hasVar, varValue] = getVarValue(value);\n      userElProps[key] = hasVar ? varValue : value;\n    }\n  }\n\n  const allProps = {\n    style: stlsUser,\n    value: sttText,\n    onChangeText: getTxt,\n    placeholder: 'Escreva...',\n    placeholderTextColor: '#ccc',\n    keyboardType: 'phone-pad',\n    maxLength: 16, // \"(11) 99999-9999\"\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { TextInput } from 'react-native';\n\n// ---------- import Local Tools\nimport { getVarValue, getStlValues, pathSel, setData } from '../project';\nimport { useData } from '../../..';\n\ntype TFunc = (val: string, args?: any) => any | Promise<any>;\n\ntype Tprops = {\n  pass: {\n    propsArray?: any[];\n    stylesArray?: any[];\n    funcsArray?: TFunc[]; // opcional\n    path: (string | number)[];\n    args?: any;\n  };\n};\n\n// --- máscara exemplo (pode trocar por outra)\nconst maskPhoneBR = (txt: string = '') => {\n  const d = String(txt).replace(/\\D/g, '').slice(0, 11);\n  const ddd = d.slice(0, 2);\n  const isCel = d.length > 10;\n  const first = d.slice(2, isCel ? 7 : 6);\n  const last = d.slice(isCel ? 7 : 6, isCel ? 11 : 10);\n  return (\n    (ddd ? '(' + ddd + ') ' : '') +\n    (first ? first : '') +\n    (last ? ' - ' + last : '')\n  );\n};\n\n// IptTxtEdit - Entrada de Texto com prop value\nexport const IptTxtEdit = (props: Tprops) => {\n  const {\n    propsArray = [],\n    stylesArray = [],\n    funcsArray = [],\n    path,\n    args,\n  } = props.pass;\n\n  const joinedPath = path.join();\n\n  // Estado local\n  const [sttText, setText] = React.useState('');\n\n  // Leitura do store (sempre segura; só vamos usar quando for o caso)\n  const editData = useData(ct => pathSel(ct, joinedPath));\n\n  // Tem handlers externos?\n  const hasExternal = Array.isArray(funcsArray) && funcsArray.length > 0;\n\n  // Hidrata do store apenas quando há fluxo externo\n  React.useEffect(() => {\n    if (!hasExternal) return;\n    if (editData !== undefined && editData !== sttText) {\n      setText(String(editData));\n    }\n  }, [editData, hasExternal, sttText]);\n\n  // onChange: decide o “modo”\n  const getTxt = async (val: string) => {\n    const masked = maskPhoneBR(val);\n\n    if (!hasExternal) {\n      // modo interno: só estado local\n      setText(masked);\n      return;\n    }\n\n    // modo externo: mantém input responsivo e sincroniza store\n    setText(masked); // feedback imediato\n    setData({ path: joinedPath, value: masked });\n    for (const fn of funcsArray) {\n      await fn(masked, args);\n    }\n  };\n\n  // ---------- Styles\n  const stlsUser = getStlValues(stylesArray);\n\n  // ---------- Extra props do usuário\n  const userElProps: Record<string, any> = {};\n  for (const strObj of propsArray) {\n    if (!strObj || typeof strObj !== 'string') continue;\n    const parsed = JSON5.parse(strObj);\n    for (const key in parsed) {\n      const value = parsed[key];\n      const [hasVar, varValue] = getVarValue(value);\n      userElProps[key] = hasVar ? varValue : value;\n    }\n  }\n\n  const allProps = {\n    style: stlsUser,\n    value: sttText,\n    onChangeText: getTxt,\n    placeholder: 'Escreva...',\n    placeholderTextColor: '#ccc',\n    keyboardType: 'phone-pad',\n    maxLength: 16, // \"(11) 99999-9999\"\n    ...userElProps,\n  };\n\n  return <TextInput {...allProps} />;\n};\n"}}