{"1760537035581":{"actionType":"saveAll","createdAt":"1760537035581","actionID":"1760537035581","userID":"#TEMP","path":"system.capsules.665979e6-3560-46a2-a871-c913d82be2e2.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\ntype Tprops = {\n  pass: {\n    variable: string[];\n    childrenItems: any[];\n    arrFuncs: any[];\n    args: any;\n  };\n};\n\nexport const BtnImagePicker = (props: Tprops) => {\n  const isWeb = RN.Platform.OS === 'web';\n\n  // ---------- set Props\n  const { arrFuncs, args } = props.pass;\n  console.log({ isWeb });\n\n  // ---------- CORREÇÃO: decide uma única vez\n\n  if (isWeb && typeof document !== 'undefined') {\n    return <BtnImgPicWeb arrFuncs={arrFuncs} args={args} />;\n  } else {\n    // vale para android/ios (nativo)\n    return <BtnImgPicNat arrFuncs={arrFuncs} args={args} />;\n  }\n};\n\nconst BtnImgPicWeb = (props: any) => {\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // ---------- set Props\n  const { arrFuncs, args } = props;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickWeb = () => {\n    inputRef.current?.click();\n  };\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const objectUrl = URL.createObjectURL(file);\n      setImage(objectUrl);\n    }\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickWeb()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n      </RN.View>\n\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        onChange={handleWebFile}\n      />\n    </>\n  );\n};\n\nconst BtnImgPicNat = (props: any) => {\n  // ---------- set Props\n  const { arrFuncs, args } = props;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickNative = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Permissão para acessar a galeria foi negada');\n      return;\n    }\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      quality: 1,\n    });\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickNative()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n        <RN.Text style={styles.txt1}>Adicionar Imagens</RN.Text>\n        <RN.Text style={styles.txt1}>\n          Selecione ou tire fotos para mostrar o progresso\n        </RN.Text>\n      </RN.View>\n    </>\n  );\n};\n\nconst styles = RN.StyleSheet.create({\n  container: {\n    width: '100%',\n    minHeight: 100,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n    borderStyle: 'dashed',\n    borderWidth: 2,\n    borderColor: '#DDD',\n    borderRadius: 8,\n    padding: 20,\n  },\n  image: {\n    width: 300,\n    height: 200,\n    resizeMode: 'cover',\n    borderRadius: 10,\n  },\n  txt1: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  txt2: {\n    fontSize: 14,\n  },\n});\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\ntype Tprops = {\n  pass: {\n    variable: string[];\n    childrenItems: any[];\n    arrFuncs: any[];\n    args: any;\n  };\n};\n\nexport const BtnImagePicker = (props: Tprops) => {\n  const isWeb = RN.Platform.OS === 'web';\n\n  // ---------- set Props\n  const { arrFuncs, args } = props.pass;\n  console.log({ isWeb });\n\n  // ---------- CORREÇÃO: decide uma única vez\n\n  if (isWeb && typeof document !== 'undefined') {\n    return <BtnImgPicWeb arrFuncs={arrFuncs} args={args} />;\n  } else {\n    // vale para android/ios (nativo)\n    return <BtnImgPicNat arrFuncs={arrFuncs} args={args} />;\n  }\n};\n\nconst BtnImgPicWeb = (props: any) => {\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // ---------- set Props\n  const { arrFuncs, args } = props;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickWeb = () => {\n    inputRef.current?.click();\n  };\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const objectUrl = URL.createObjectURL(file);\n      setImage(objectUrl);\n    }\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickWeb()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n      </RN.View>\n\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        onChange={handleWebFile}\n      />\n    </>\n  );\n};\n\nconst BtnImgPicNat = (props: any) => {\n  // ---------- set Props\n  const { arrFuncs, args } = props;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickNative = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Permissão para acessar a galeria foi negada');\n      return;\n    }\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      quality: 1,\n    });\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickNative()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n        <RN.Text style={styles.txt1}>Adicionar Imagens</RN.Text>\n        <RN.Text style={styles.txt1}>\n          Selecione ou tire fotos para mostrar o progresso\n        </RN.Text>\n      </RN.View>\n    </>\n  );\n};\n\nconst styles = RN.StyleSheet.create({\n  container: {\n    width: '100%',\n    minHeight: 100,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n    borderStyle: 'dashed',\n    borderWidth: 2,\n    borderColor: '#DDD',\n    borderRadius: 8,\n    padding: 20,\n  },\n  image: {\n    width: 300,\n    height: 200,\n    resizeMode: 'cover',\n    borderRadius: 10,\n  },\n  txt1: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  txt2: {\n    fontSize: 14,\n  },\n});"}}