{"1761145175854":{"actionType":"saveAll","createdAt":"1761145175854","actionID":"1761145175854","userID":"#TEMP","path":"system.capsules.996d3eb0-bb27-414c-b93e-5b130b7ea38e.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  const path = 'sc.A0B.forms.iptsChanges.userEmail';\n  const raw = tools.getCtData(path);\n  const email = (raw ?? '').normalize('NFKC').trim().toLowerCase();\n\n  if (!email) {\n    tools.setData({ path: 'sc.A0B.forms.showErr', value: true });\n    tools.setData({ path: 'sc.A0B.forms.msgs.msg1', value: 'Informe um e-mail válido.' });\n    return;\n  }\n\n  try {\n    const { getAuth, sendPasswordResetEmail } = await import('firebase/auth');\n    const fbInit = tools.getCtData('all.temp.fireInit');\n    const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n    // garanta que não há tenant setado por engano\n    // @ts-ignore\n    auth.tenantId = null;\n\n    const host = \"http://localhost:5173\";\n    const acs = {\n      url: host + \"/auth/complete-signup\",\n      handleCodeInApp: false\n    }\n    await sendPasswordResetEmail(auth, email, acs);\n\n    tools.setData({ path: 'sc.A0B.forms.showErr', value: false });\n    tools.setData({ path: 'sc.A0B.forms.showSuccess', value: true });\n    tools.setData({\n      path: 'sc.A0B.forms.msgs.msg2',\n      value: 'Se o e-mail existir, enviaremos as instruções para redefinir a senha.',\n    });\n  } catch (e: any) {\n    // trate apenas erros realmente bloqueantes\n    let msg = 'Não foi possível enviar o e-mail de redefinição.';\n    if (e?.code === 'auth/invalid-email') msg = 'E-mail inválido.';\n    if (e?.code === 'auth/too-many-requests') msg = 'Muitas tentativas. Tente novamente mais tarde.';\n\n    console.log('Erro reset senha:', e?.code || e?.message);\n    tools.setData({ path: 'sc.A0B.forms.showSuccess', value: false });\n    tools.setData({ path: 'sc.A0B.forms.showErr', value: true });\n    tools.setData({ path: 'sc.A0B.forms.msgs.msg1', value: msg });\n  }\n}","newValue":"async () => {\n  const path = 'sc.A0B.forms.iptsChanges.userEmail';\n  const raw = tools.getCtData(path);\n  const email = (raw ?? '').normalize('NFKC').trim().toLowerCase();\n\n  if (!email) {\n    tools.setData({ path: 'sc.A0B.forms.showErr', value: true });\n    tools.setData({ path: 'sc.A0B.forms.msgs.msg1', value: 'Informe um e-mail válido.' });\n    return;\n  }\n\n  try {\n    const { getAuth, sendPasswordResetEmail } = await import('firebase/auth');\n    const fbInit = tools.getCtData('all.temp.fireInit');\n    const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n    // garanta que não há tenant setado por engano\n    // @ts-ignore\n    auth.tenantId = null;\n\n    const host = \"http://localhost:5173\";\n    const acs = {\n      url: host + \"/auth/complete-signup\",\n      handleCodeInApp: false\n    }\n\n    await sendPasswordResetEmail(auth, email, acs);\n\n    tools.setData({ path: 'sc.A0B.forms.showErr', value: false });\n    tools.setData({ path: 'sc.A0B.forms.showSuccess', value: true });\n    tools.setData({\n      path: 'sc.A0B.forms.msgs.msg2',\n      value: 'Se o e-mail existir, enviaremos as instruções para redefinir a senha.',\n    });\n  } catch (e: any) {\n    // trate apenas erros realmente bloqueantes\n    let msg = 'Não foi possível enviar o e-mail de redefinição.';\n    if (e?.code === 'auth/invalid-email') msg = 'E-mail inválido.';\n    if (e?.code === 'auth/too-many-requests') msg = 'Muitas tentativas. Tente novamente mais tarde.';\n\n    console.log('Erro reset senha:', e?.code || e?.message);\n    tools.setData({ path: 'sc.A0B.forms.showSuccess', value: false });\n    tools.setData({ path: 'sc.A0B.forms.showErr', value: true });\n    tools.setData({ path: 'sc.A0B.forms.msgs.msg1', value: msg });\n  }\n}"}}