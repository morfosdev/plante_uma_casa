{"1761155197027":{"actionType":"saveAll","createdAt":"1761155197027","actionID":"1761155197027","userID":"#TEMP","path":"system.capsules.7d48ab0a-bf32-4fe2-99c6-bc478137fba3.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport {\n  Platform,\n  Pressable,\n  Text,\n  ActivityIndicator,\n  View,\n} from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\n// WebBrowser.maybeCompleteAuthSession();\n\n// ---------- import Local Tools (se usar)\n// import { getStlValues, mapElements } from '../project';\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst GOOGLE_WEB_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\nconst GOOGLE_ANDROID_CLIENT_ID =\n  '1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com';\nconst GOOGLE_IOS_CLIENT_ID = '';\n\n// Opcional (quando executando via Expo Go)\nconst GOOGLE_EXPO_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nconst LoginNative = ({ args }: { args?: Tprops['pass']['args'] }) => {\n  const [loading, setLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    (async () => {})();\n  }, []);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      await promptAsync();\n    } catch (err) {\n      args?.onLoginError?.(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text>{'Native'}</Text>\n    </View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = ({ args }: { args?: Tprops['pass']['args'] }) => {\n  React.useEffect(() => {\n    (async () => {})();\n  }, []);\n\n  const handlePress = async () => {};\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text>{'WEB'}</Text>\n    </View>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  // (Se precisar, aplique estilos vindos de props.pass.styles usando getStlValues)\n  // const baseStyle = getStlValues(props.pass.styles) // exemplo\n\n  if (Platform.OS === 'web') {\n    return <LoginWeb args={args} />;\n  }\n  return <LoginNative args={args} />;\n};\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport {\n  Platform,\n  Pressable,\n  Text,\n  ActivityIndicator,\n  View,\n} from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\n// WebBrowser.maybeCompleteAuthSession();\n\n// ---------- import Local Tools (se usar)\n// import { getStlValues, mapElements } from '../project';\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst GOOGLE_WEB_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\nconst GOOGLE_ANDROID_CLIENT_ID =\n  '1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com';\nconst GOOGLE_IOS_CLIENT_ID = '';\n\n// Opcional (quando executando via Expo Go)\nconst GOOGLE_EXPO_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nconst LoginNative = ({ args }: { args?: Tprops['pass']['args'] }) => {\n  const [loading, setLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    (async () => {})();\n  }, []);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      await promptAsync();\n    } catch (err) {\n      args?.onLoginError?.(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text>{'Native'}</Text>\n    </View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = ({ args }: { args?: Tprops['pass']['args'] }) => {\n  React.useEffect(() => {\n    (async () => {})();\n  }, []);\n\n  const handlePress = async () => {};\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text>{'WEB'}</Text>\n    </View>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  // (Se precisar, aplique estilos vindos de props.pass.styles usando getStlValues)\n  // const baseStyle = getStlValues(props.pass.styles) // exemplo\n\n  if (Platform.OS === 'web') {\n    return <LoginWeb args={args} />;\n  }\n  return <LoginNative args={args} />;\n};"}}