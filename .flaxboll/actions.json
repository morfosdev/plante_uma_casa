{"1760021607876":{"actionType":"saveAll","createdAt":"1760021607876","actionID":"1760021607876","userID":"#TEMP","path":"system.capsules.665979e6-3560-46a2-a871-c913d82be2e2.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\n\ntype Tprops = {\n  pass: {\n    variable: string[];\n    childrenItems: any[];\n    arrFuncs: any[];\n    args: any;\n  };\n};\nconst css =\n  'color: #54ff00; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\nexport const BtnImagePicker = (props: Tprops) => {\n  const isWeb = RN.Platform.OS === 'web';\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // ---------- set Props\n  const { arrFuncs, args } = props.pass;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickNative = async () => {\n    // const ImagePicker = await import('expo-image-picker');\n    // const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    // if (status !== 'granted') {\n    //   alert('Permissão para acessar a galeria foi negada');\n    //   return;\n    // }\n    // const result = await ImagePicker.launchImageLibraryAsync({\n    //   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n    //   allowsEditing: true,\n    //   quality: 1,\n    // });\n    // if (!result.canceled) {\n    //   setImage(result.assets[0].uri);\n    // }\n  };\n\n  const pickWeb = () => {\n    inputRef.current?.click();\n  };\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const objectUrl = URL.createObjectURL(file);\n      setImage(objectUrl);\n    }\n  };\n\n  const pickImage = isWeb ? pickWeb : pickNative;\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickImage()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n      </RN.View>\n\n      {isWeb && typeof document !== 'undefined' && (\n        <input\n          ref={inputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          style={{ display: 'none' }}\n          onChange={handleWebFile}\n        />\n      )}\n    </>\n  );\n};\n\nconst styles = RN.StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  image: {\n    width: 300,\n    height: 200,\n    resizeMode: 'cover',\n    borderRadius: 10,\n  },\n});\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\n\ntype Tprops = {\n  pass: {\n    variable: string[];\n    childrenItems: any[];\n    arrFuncs: any[];\n    args: any;\n  };\n};\nconst css =\n  'color: #54ff00; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\nexport const BtnImagePicker = (props: Tprops) => {\n  const isWeb = RN.Platform.OS === 'web';\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // ---------- set Props\n  const { arrFuncs, args, isWeb } = props.pass;\n  const [image, setImage] = React.useState<string | null>(null);\n\n  console.log({ arrFuncs, args });\n\n  const pickNative = async () => {\n    // const ImagePicker = await import('expo-image-picker');\n    // const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    // if (status !== 'granted') {\n    //   alert('Permissão para acessar a galeria foi negada');\n    //   return;\n    // }\n    // const result = await ImagePicker.launchImageLibraryAsync({\n    //   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n    //   allowsEditing: true,\n    //   quality: 1,\n    // });\n    // if (!result.canceled) {\n    //   setImage(result.assets[0].uri);\n    // }\n  };\n\n  const pickWeb = () => {\n    inputRef.current?.click();\n  };\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const objectUrl = URL.createObjectURL(file);\n      setImage(objectUrl);\n    }\n  };\n\n  const pickImage = isWeb ? pickWeb : pickNative;\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <RN.Button title=\"Escolher imagem\" onPress={() => pickImage()} />\n        {image && <RN.Image source={{ uri: image }} style={styles.image} />}\n      </RN.View>\n\n      {isWeb && typeof document !== 'undefined' && (\n        <input\n          ref={inputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          style={{ display: 'none' }}\n          onChange={handleWebFile}\n        />\n      )}\n    </>\n  );\n};\n\nconst styles = RN.StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 20,\n  },\n  image: {\n    width: 300,\n    height: 200,\n    resizeMode: 'cover',\n    borderRadius: 10,\n  },\n});\n"}}