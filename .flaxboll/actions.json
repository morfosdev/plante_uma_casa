{"1753727107510":{"actionType":"saveAll","createdAt":"1753727107510","actionID":"1753727107510","userID":"#TEMP","path":"system.capsules.e15650d6-f969-425f-8848-62d359a6fdf4.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"import { getCtData, findFlatItem } from './';\n\nexport const testVarType = string => {\n\tlet varType = '';\n\tlet newPath = '';\n\tlet varValue = string;\n\n\tif (string.includes('$var_')){\n\t\tvarType = 'var';\n\t\tnewPath = string.replace('$var_', '');\n\t\tvarValue = getCtData(newPath);\n\t}\n\n\tif (string.includes('$arg_')){\n\t\tvarType = 'arg';\n\t\tnewPath = string.replace('$arg_', '');\nconsole.log({})\nvarValue = findFlatItem(args);\n\t}\n\n  return varValue;\n};","newValue":"import { getCtData, findFlatItem } from './';\n\nexport const testVarType = string => {\n\tlet varType = '';\n\tlet newPath = '';\n\tlet varValue = string;\n\n\tif (string.includes('$var_')){\n\t\tvarType = 'var';\n\t\tnewPath = string.replace('$var_', '');\n\t\tvarValue = getCtData(newPath);\n\t}\n\n\tif (string.includes('$arg_')){\n\t\tvarType = 'arg';\n\t\tnewPath = string.replace('$arg_', '');\nconsole.log({})\nvarValue = findFlatItem(string);\n\t}\n\n  return varValue;\n};"},"1753727107511":{"actionType":"saveAll","createdAt":"1753727107511","actionID":"1753727107511","userID":"#TEMP","path":"system.capsules.9d80e9c7-fd8b-4cca-b0cb-2a0bcfefa089.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"export const findFlatItem = obj => {\nconsole.log({});\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};","newValue":"export const findFlatItem = obj => {\nconsole.log({obj});\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};"}}