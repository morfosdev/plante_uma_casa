{"1761741143567":{"actionType":"saveAll","createdAt":"1761741143567","actionID":"1761741143567","userID":"#TEMP","path":"system.capsules.0ea1cc23-a964-4caf-85d4-dae161c63c36.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  const requiredFields = [\n    { path: \"sc.A11.forms.editChanges.userName\", name: \"Nome\" },\n    { path: \"sc.A11.forms.editChanges.userEmail\", name: \"E-mail\" },\n    { path: \"sc.A11.forms.editChanges.partnerActivity\", name: \"√Årea de Atua√ß√£o\" },\n  ];\n\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  if (emptyFields.length > 0) {\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"Preencha os campos obrigat√≥rios.\"],\n      },\n    });\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return;\n  }\n\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.A11.validationMessage\"],\n      value: [\"‚úÖ Todos os campos foram preenchidos corretamente.\"],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî atualizando documento no Firebase...\");\n\n\n// Inicializar Firebase\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\") ?? {};\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n// Importa Firestore\n  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  const docId = tools.getCtData(\"sc.A11.forms.editChanges.docId\");\n\n  if (!docId || typeof docId !== \"string\") {\n    console.error(\"‚ùå ID do documento inv√°lido:\", docId);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"ID do documento inv√°lido. N√£o foi poss√≠vel atualizar.\"],\n      },\n    });\n    return;\n  }\n\n// Monta os dados a salvar\n  const updatedDoc = {\n    userName: getVal(\"sc.A11.forms.editChanges.userName\"),\n    userEmail: getVal(\"sc.A11.forms.editChanges.userEmail\"),\n    partnerActivity: getVal(\"sc.A11.forms.editChanges.partnerActivity\"),\n\tupdatedAt: serverTimestamp(),\n  };\n\n  try {\n// Salva o doc\n    await updateDoc(doc(db, \"users\", docId), updatedDoc);\n    console.log(\"‚úÖ Documento atualizado com sucesso:\", docId);\n\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"üè¢ Dados atualizados com sucesso!\"],\n      },\n    });\n\n    // Limpa dados e fecha modais\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.forms.editChanges\"],\n        value: [{}],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.a7.editCondo\"],\n        value: [false],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.sideRight\"],\n        value: [false],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao atualizar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"Erro ao atualizar os dados. Verifique o console.\"],\n      },\n    });\n  }\n\n//clean validation message\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"\"],\n      },\n    });\n}\n","newValue":"async () => {\n  const requiredFields = [\n    { path: \"sc.A11.forms.editChanges.userName\", name: \"Nome\" },\n    { path: \"sc.A11.forms.editChanges.userEmail\", name: \"E-mail\" },\n    { path: \"sc.A11.forms.editChanges.partnerActivity\", name: \"√Årea de Atua√ß√£o\" },\n  ];\n\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  if (emptyFields.length > 0) {\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"Preencha os campos obrigat√≥rios.\"],\n      },\n    });\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return;\n  }\n\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.A11.validationMessage\"],\n      value: [\"‚úÖ Todos os campos foram preenchidos corretamente.\"],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî atualizando documento no Firebase...\");\n\n\n// Inicializar Firebase\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\") ?? {};\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n// Importa Firestore\n  const { getFirestore, collection, addDoc, updateDoc, doc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  const docId = tools.getCtData(\"sc.A11.forms.editChanges.docId\");\n\n  if (!docId || typeof docId !== \"string\") {\n    console.error(\"‚ùå ID do documento inv√°lido:\", docId);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"ID do documento inv√°lido. N√£o foi poss√≠vel atualizar.\"],\n      },\n    });\n    return;\n  }\n\n// Monta os dados a salvar\n  const updatedDoc = {\n    userName: getVal(\"sc.A11.forms.editChanges.userName\"),\n    userEmail: getVal(\"sc.A11.forms.editChanges.userEmail\"),\n    partnerActivity: getVal(\"sc.A11.forms.editChanges.partnerActivity\"),\n\tupdatedAt: serverTimestamp(),\n  };\n\n  try {\n// Salva o doc\n    await updateDoc(doc(db, \"users\", docId), updatedDoc);\n    console.log(\"‚úÖ Documento atualizado com sucesso:\", docId);\n\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"üè¢ Dados atualizados com sucesso!\"],\n      },\n    });\n\n    // Limpa dados e fecha modais\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.forms.editChanges\"],\n        value: [{}],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.a11b.editPartner\"],\n        value: [false],\n      },\n    });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.sideRight\"],\n        value: [false],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao atualizar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"Erro ao atualizar os dados. Verifique o console.\"],\n      },\n    });\n  }\n\n//clean validation message\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.A11.validationMessage\"],\n        value: [\"\"],\n      },\n    });\n}\n"}}