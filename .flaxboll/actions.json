{"1760982341416":{"actionType":"saveAll","createdAt":"1760982341416","actionID":"1760982341416","userID":"#TEMP","path":"system.capsules.830af753-f3c2-4ba3-aedb-6e10b6d47170.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  try {\n    const pathName = 'sc.A12.iptsChanges.partnerName';\n    const pathEmail = 'sc.A12.iptsChanges.partnerMail';\n\n    const name = (tools.getCtData(pathName) ?? '').trim();\n    const email = (tools.getCtData(pathEmail) ?? '').trim();\n    console.log({ name, email });\n\n    const validateEmail = (v: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v.toLowerCase());\n\n    if (name === \"\") return; // nome vazio\n    if (email === \"\" || !validateEmail(email)) return; // e-mail inválido\n\n    // Auth\n    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification } =\n      await import('firebase/auth');\n\n    const fbInit = tools.getCtData('all.temp.fireInit');\n    console.log({ fbInit });\n    const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n    const tempPass = '123456'; // ou gere uma senha aleatória\n    console.log({ tempPass });\n    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);\n    console.log({ cred });\n\n    if (name) {\n      await updateProfile(cred.user, { displayName: name });\n    }\n\n    // (opcional) enviar verificação\n    await sendEmailVerification(cred.user);\n\n    // sucesso...\n  } catch (e: any) {\n    // trate erros (email-already-in-use, invalid-email, weak-password, etc.)\n  }\n}\n","newValue":"async () => {\n  try {\n    const pathName = 'sc.A12.iptsChanges.partnerName';\n    const pathEmail = 'sc.A12.iptsChanges.partnerMail';\n\n    const name = (tools.getCtData(pathName) ?? '').trim();\n    const email = (tools.getCtData(pathEmail) ?? '').trim();\n    console.log({ name, email });\n\n    const validateEmail = (v: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v.toLowerCase());\n\n    console.log({ validateEmail: validateEmail(email) });\n\n    if (name === \"\") return; // nome vazio\n    if (email === \"\" || !validateEmail(email)) return; // e-mail inválido\n\n    // Auth\n    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification } =\n      await import('firebase/auth');\n\n    const fbInit = tools.getCtData('all.temp.fireInit');\n    console.log({ fbInit });\n    const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n    const tempPass = '123456'; // ou gere uma senha aleatória\n    console.log({ tempPass });\n    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);\n    console.log({ cred });\n\n    if (name) {\n      await updateProfile(cred.user, { displayName: name });\n    }\n\n    // (opcional) enviar verificação\n    await sendEmailVerification(cred.user);\n\n    // sucesso...\n  } catch (e: any) {\n    // trate erros (email-already-in-use, invalid-email, weak-password, etc.)\n  }\n}"}}