{"1761157712636":{"actionType":"saveAll","createdAt":"1761157712636","actionID":"1761157712636","userID":"#TEMP","path":"system.capsules.7d48ab0a-bf32-4fe2-99c6-bc478137fba3.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport {\n  Platform,\n  Pressable,\n  Text,\n  ActivityIndicator,\n  View,\n} from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\n// WebBrowser.maybeCompleteAuthSession();\n\n// ---------- import Local Tools (se usar)\n// import { getStlValues, mapElements } from '../project';\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst GOOGLE_WEB_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\nconst ANDROID_CLIENT_ID =\n  '1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com';\nconst IOS_CLIENT_ID = '';\n\n// Opcional (quando executando via Expo Go)\nconst EXPO_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nconst LoginNative = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  // hook mais simples → retorna id_token diretamente\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    iosClientId: IOS_CLIENT_ID,\n    expoClientId: EXPO_CLIENT_ID,\n    selectAccount: true,\n  });\n\n  React.useEffect(() => {\n    if (!response) return;\n\n    if (response.type === 'success') {\n      const idToken = response.params?.id_token as string | undefined;\n      setLoading(false);\n      if (idToken) {\n        // aqui você autentica no backend/Firebase se quiser\n        // ex.: GoogleAuthProvider.credential(idToken)\n        console.log('Login OK', `idToken: ${idToken.slice(0, 18)}…`);\n        console.log('[LoginNative] id_token:', idToken);\n      } else {\n        console.log('Aviso', 'Login concluído, mas sem id_token.');\n      }\n    } else if (response.type === 'error') {\n      setLoading(false);\n      const msg = (response as any)?.error ?? 'Erro ao autenticar com Google.';\n      console.log('Erro no login', String(msg));\n      console.error('[LoginNative] error:', msg);\n    } else {\n      // cancelled / dismissed\n      setLoading(false);\n    }\n  }, [response]);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      await promptAsync();\n    } catch (err) {\n      setLoading(false);\n      console.log('Erro', String(err));\n      console.error('[LoginNative] promptAsync error:', err);\n    }\n  };\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Pressable\n        onPress={handlePress}\n        disabled={!request || loading}\n        style={{\n          backgroundColor: '#315e2d',\n          paddingHorizontal: 20,\n          height: 44,\n          borderRadius: 999,\n          alignItems: 'center',\n          justifyContent: 'center',\n          opacity: !request || loading ? 0.7 : 1,\n        }}\n      >\n        <Text style={{ color: '#fff', fontWeight: '700' }}>\n          {loading ? 'Conectando…' : 'Entrar com Google'}\n        </Text>\n      </Pressable>\n      {loading ? <ActivityIndicator style={{ marginTop: 8 }} /> : null}\n    </View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = () => {\n  React.useEffect(() => {\n    (async () => {})();\n  }, []);\n\n  const handlePress = async () => {};\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text>{'WEB'}</Text>\n    </View>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  // (Se precisar, aplique estilos vindos de props.pass.styles usando getStlValues)\n  // const baseStyle = getStlValues(props.pass.styles) // exemplo\n\n  if (Platform.OS === 'web') {\n    return <LoginWeb />;\n  }\n  return <LoginNative />;\n};","newValue":"// ---------- import Packs\nimport React from 'react';\nimport {\n  Platform,\n  Pressable,\n  Text,\n  ActivityIndicator,\n  View,\n} from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\n// WebBrowser.maybeCompleteAuthSession();\n\n// ---------- import Local Tools (se usar)\n// import { getStlValues, mapElements } from '../project';\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst GOOGLE_WEB_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\nconst ANDROID_CLIENT_ID =\n  '1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com';\nconst IOS_CLIENT_ID = '';\n\n// Opcional (quando executando via Expo Go)\nconst EXPO_CLIENT_ID =\n  '1099098264007-sal5p8vma3t5fqk1gqql4sk2sns4iuq7.apps.googleusercontent.com';\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nconst LoginNative = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  // hook mais simples → retorna id_token diretamente\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    iosClientId: IOS_CLIENT_ID,\n    expoClientId: EXPO_CLIENT_ID,\n    selectAccount: true,\n  });\n\n  React.useEffect(() => {\n    if (!response) return;\n\n    if (response.type === 'success') {\n      const idToken = response.params?.id_token as string | undefined;\n      setLoading(false);\n      if (idToken) {\n        // aqui você autentica no backend/Firebase se quiser\n        // ex.: GoogleAuthProvider.credential(idToken)\n        console.log('Login OK', 'idToken: ' + idToken.slice(0, 18));\n        console.log('[LoginNative] id_token:', idToken);\n      } else {\n        console.log('Aviso', 'Login concluído, mas sem id_token.');\n      }\n    } else if (response.type === 'error') {\n      setLoading(false);\n      const msg = (response as any)?.error ?? 'Erro ao autenticar com Google.';\n      console.log('Erro no login', String(msg));\n      console.error('[LoginNative] error:', msg);\n    } else {\n      // cancelled / dismissed\n      setLoading(false);\n    }\n  }, [response]);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      await promptAsync();\n    } catch (err) {\n      setLoading(false);\n      console.log('Erro', String(err));\n      console.error('[LoginNative] promptAsync error:', err);\n    }\n  };\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Pressable\n        onPress={handlePress}\n        disabled={!request || loading}\n        style={{\n          backgroundColor: '#315e2d',\n          paddingHorizontal: 20,\n          height: 44,\n          borderRadius: 999,\n          alignItems: 'center',\n          justifyContent: 'center',\n          opacity: !request || loading ? 0.7 : 1,\n        }}\n      >\n        <Text style={{ color: '#fff', fontWeight: '700' }}>\n          {loading ? 'Conectando…' : 'Entrar com Google'}\n        </Text>\n      </Pressable>\n      {loading ? <ActivityIndicator style={{ marginTop: 8 }} /> : null}\n    </View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = () => {\n  React.useEffect(() => {\n    (async () => {})();\n  }, []);\n\n  const handlePress = async () => {};\n\n  return (\n    <View style={{ alignItems: 'center' }}>\n      <Text>{'WEB'}</Text>\n    </View>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  // (Se precisar, aplique estilos vindos de props.pass.styles usando getStlValues)\n  // const baseStyle = getStlValues(props.pass.styles) // exemplo\n\n  if (Platform.OS === 'web') {\n    return <LoginWeb />;\n  }\n  return <LoginNative />;\n};\n"}}