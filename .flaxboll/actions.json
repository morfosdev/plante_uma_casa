{"1761314340120":{"actionType":"saveAll","createdAt":"1761314340120","actionID":"1761314340120","userID":"#TEMP","path":"system.capsules.09c4c85c-2dd8-439b-a0d8-80eeac65d933.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"import React from \"react\";\nimport * as RN from \"react-native\";\n\n// ---------- import Packs\nimport * as Google from \"expo-auth-session/providers/google\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithRedirect, } from \"firebase/auth\";\nimport { useData } from '../../..';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\nWebBrowser.maybeCompleteAuthSession();\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst IOS_CLIENT_ID = \"\";\nconst ANDROID_CLIENT_ID =\n  \"1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com\";\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nexport const LoginNative = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  // Somente Android nativo\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    selectAccount: true,\n  });\n\n  React.useEffect(() => {\n    if (!response) return;\n    setLoading(false);\n\n    if (response.type === \"success\") {\n      const idToken = response.params?.id_token as string | undefined;\n      console.log(\"[LoginAndroid] id_token:\", idToken);\n      // -> autentique no backend/Firebase se desejar\n    } else if (response.type === \"error\") {\n      console.error(\"[LoginAndroid] error:\", (response as any)?.error);\n    }\n  }, [response]);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      // Nativo: sem proxy\n      await promptAsync();\n    } catch (err) {\n      setLoading(false);\n      console.error(\"[LoginAndroid] promptAsync error:\", err);\n    }\n  };\n\n  return (\n    <RN.View style={{ alignItems: \"center\" }}>\n      <RN.Pressable\n        onPress={handlePress}\n        disabled={!request || loading}\n        style={{\n          backgroundColor: \"#315e2d\",\n          paddingHorizontal: 20,\n          height: 44,\n          borderRadius: 999,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: !request || loading ? 0.7 : 1,\n        }}\n      >\n        <RN.Text style={{ color: \"#fff\", fontWeight: \"700\" }}>\n          {loading ? \"Conectando…\" : \"Entrar com Google\"}\n        </RN.Text>\n      </RN.Pressable>\n\n      {loading ? <RN.ActivityIndicator style={{ marginTop: 8 }} /> : null}\n    </RN.View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = () => {\n  // Renderiza apenas no Web\n  if (RN.Platform.OS !== \"web\") return null;\n\n  const [loading, setLoading] = React.useState(false);\n  const fbInit = useData(ct => ct.all.temp.fireInit);\n  console.log({ fbInit });\n  \n  const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n  const handleLogin = async () => {\n    try {\n      setLoading(true);\n\n      const provider = new GoogleAuthProvider();\n      provider.setCustomParameters({ prompt: \"select_account\" });\n\n      // Pop-up (recomendado). Se o navegador bloquear, cai para redirect.\n      let result;\n      try {\n        result = await signInWithPopup(auth, provider);\n      } catch (popupErr) {\n        // fallback para redirect (útil em bloqueio de pop-up)\n        await signInWithRedirect(auth, provider);\n        return;\n      }\n    } catch (err) {\n      console.error(\"Erro no login Google (web):\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <RN.Pressable\n      onPress={handleLogin}\n      disabled={loading}\n      style={({ pressed }) => [\n        {\n          paddingVertical: 12,\n          paddingHorizontal: 16,\n          borderRadius: 8,\n          borderWidth: 1,\n          borderColor: \"#ccc\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: pressed || loading ? 0.6 : 1,\n          backgroundColor: \"#fff\",\n        },\n      ]}\n      accessibilityRole=\"button\"\n      accessibilityLabel=\"Entrar com conta Google (Web)\"\n    >\n      <RN.Text style={{ fontWeight: \"600\" }}>\n        {loading ? \"Conectando...\" : \"Entrar com Google\"}\n      </RN.Text>\n    </RN.Pressable>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  if (RN.Platform.OS === \"web\") {\n    return <LoginWeb />;\n  }\n  return <LoginNative />;\n};","newValue":"// ---------- import Packs\nimport JSON5 from 'json5';\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, ScrollView, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\nexport const css =\n  'color: lightblue; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\ntype Tconds = '==' | '!=' | '>' | '<' | '<=' | '>=';\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    functions: any[];\n    childrenItems: any;\n    args: any;\n  };\n};\n\nexport const processFunctions = async (arr: any[]) => {\n  const defaultVal = { trigger: '', arrFunctions: [] };\n\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || defaultVal;\n    }\n  }\n\n  return defaultVal;\n};\n\n// DynView / BOX\nexport const DynView = (props: Tprops) => {\n  if (!props) return <></>;\n\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttCondParts, setCondParts] = useState({\n    path: '',\n    operator: '==',\n    compareVal: null,\n  });\n  const [sttPressFuncs, setPressFuncs] = useState<\n    Array<(args: any) => Promise<void>>\n  >([]);\n\n  let varValue = useData(ct => pathSel(ct, sttCondParts.path));\n\n  // ---------- set Props\n  const { elementsProperties, styles, functions } = props.pass;\n  const { childrenItems, args } = props.pass;\n\n  const callFn = async () => {\n    const { trigger, arrFunctions } = await processFunctions(functions);\n    setTypeFunc(trigger);\n    setPressFuncs(arrFunctions);\n\n    // ------- set Init Functions (Capsules)\n    if (trigger === 'on init') {\n      for (const currFunc of arrFunctions) await currFunc(args);\n    }\n    if (trigger === 'on listen') {\n      for (const currFunc of arrFunctions) {\n        const res: [string, Tconds, any] = await currFunc(args);\n        const path = res[0];\n        const operator = res[1];\n        const compareVal = res[2];\n\n        if (typeof path === 'string') {\n          console.log('VarPath', path);\n          setCondParts({ path, operator, compareVal });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    callFn();\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of elementsProperties) {\n    if (!strObj) continue;\n    if (!props) continue;\n    if (typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  const allProps = {\n    style: stl,\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  if (!sttTypeFunc)\n    return <View {...allProps}>{mapElements(childrenItems, args)}</View>;\n\n  if (sttTypeFunc === 'on press') {\n    allProps.children = mapElements(childrenItems, args);\n    allProps.onPress = async () => {\n      for (const currFunc of sttPressFuncs) await currFunc(args);\n    };\n\n    return <Pressable {...allProps} />;\n  }\n\n  if (sttTypeFunc === 'on init')\n    return <View {...allProps}>{mapElements(childrenItems, args)}</View>;\n\n  if (sttTypeFunc === 'on listen') {\n    const operators = {\n      '==': (a, b) => a == b,\n      '!=': (a, b) => a != b,\n      '>': (a, b) => a > b,\n      '>=': (a, b) => a >= b,\n      '<': (a, b) => a < b,\n      '<=': (a, b) => a <= b,\n    };\n\n    const operatorFunc = operators[sttCondParts.operator];\n    const condShow = operatorFunc?.(varValue, sttCondParts.compareVal);\n\n    return (\n      condShow && <View {...allProps}>{mapElements(childrenItems, args)}</View>\n    );\n  }\n};\n"}}