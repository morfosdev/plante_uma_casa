{"1758640404761":{"actionType":"saveAll","createdAt":"1758640404761","actionID":"1758640404761","userID":"#TEMP","path":"system.capsules.268c4fa7-54ea-492e-8f9a-42dddca4d4d6.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// src/components/InputPicker.tsx\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  TextInput,\n  FlatList,\n  Modal,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  useWindowDimensions,\n  Keyboard,\n  LayoutChangeEvent,\n} from \"react-native\";\n\ntype Item = {\n  label: string;\n  value: string | number;\n  disabled?: boolean;\n};\n\ntype InputPickerProps = {\n  items: Item[];\n  value?: Item[\"value\"] | null;\n  onChange: (value: Item[\"value\"] | null, item: Item | null) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  searchable?: boolean;\n  // estilos opcionais\n  style?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  dropdownStyle?: StyleProp<ViewStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  itemTextStyle?: StyleProp<TextStyle>;\n  emptyText?: string;\n  maxVisibleItems?: number; // padrão 6\n  itemHeight?: number; // padrão 44\n  testID?: string;\n};\n\nexport const IptPicker: React.FC<InputPickerProps> = ({\n  items,\n  value = null,\n  onChange,\n  placeholder = \"Selecionar...\",\n  disabled = false,\n  searchable = true,\n  style,\n  inputStyle,\n  dropdownStyle,\n  itemStyle,\n  itemTextStyle,\n  emptyText = \"Nada encontrado\",\n  maxVisibleItems = 6,\n  itemHeight = 44,\n  testID,\n}) => {\n  const { height: winH } = useWindowDimensions();\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [hoverIndex, setHoverIndex] = useState<number>(-1);\n  const wrapRef = useRef<View>(null);\n  const inputRef = useRef<TextInput>(null);\n  const listRef = useRef<FlatList>(null);\n  const [wrapLayout, setWrapLayout] = useState<{ y: number; x: number; h: number }>({\n    y: 0,\n    x: 0,\n    h: 0,\n  });\n\tconst items =   const options = [\n    { label: \"Selecione…\", value: \"\", disabled: true },\n    { label: \"Opção A\", value: \"A\" },\n    { label: \"Opção B\", value: \"B\" },\n    { label: \"Opção C\", value: \"C\" },\n    { label: \"Opção D\", value: \"D\" },\n    { label: \"Opção E (desabilitada)\", value: \"E\", disabled: true },\n  ];\n\n  const currentItem = useMemo(\n    () => items.find((it) => it.value === value) ?? null,\n    [items, value]\n  );\n\n  const normalized = useMemo(() => {\n    const q = query.trim().toLowerCase();\n    if (!q) return items;\n    return items.filter((it) => it.label.toLowerCase().includes(q));\n  }, [items, query]);\n\n  const visibleCount = Math.min(normalized.length || 1, maxVisibleItems);\n  const listHeight = visibleCount * itemHeight;\n\n  const openUpwards = useMemo(() => {\n    // abre pra cima se não há espaço suficiente pra baixo\n    const spaceBelow = winH - (wrapLayout.y + wrapLayout.h);\n    return spaceBelow < listHeight + 8;\n  }, [winH, wrapLayout, listHeight]);\n\n  // medir wrapper\n  const onWrapLayout = (e: LayoutChangeEvent) => {\n    const { y, x, height } = e.nativeEvent.layout;\n    setWrapLayout({ y, x, h: height });\n  };\n\n  // click fora (web)\n  useEffect(() => {\n    if (Platform.OS !== \"web\") return;\n    if (!open) return;\n\n    const onDocMouseDown = (ev: MouseEvent) => {\n      // Fecha se clique fora do wrapper\n      const root = (wrapRef.current as any)?._node ?? (wrapRef.current as any);\n      if (root && ev.target instanceof Node && !root.contains(ev.target)) {\n        setOpen(false);\n        setQuery(\"\");\n        setHoverIndex(-1);\n      }\n    };\n    document.addEventListener(\"mousedown\", onDocMouseDown);\n    return () => document.removeEventListener(\"mousedown\", onDocMouseDown);\n  }, [open]);\n\n  // fechar no back (Android) / teclado Esc (web)\n  useEffect(() => {\n    if (!open) return;\n\n    if (Platform.OS === \"web\") {\n      const onKey = (e: KeyboardEvent) => {\n        if (e.key === \"Escape\") {\n          setOpen(false);\n          setQuery(\"\");\n          setHoverIndex(-1);\n        }\n      };\n      window.addEventListener(\"keydown\", onKey);\n      return () => window.removeEventListener(\"keydown\", onKey);\n    } else {\n      const sub = Keyboard.addListener(\"keyboardDidHide\", () => {\n        // nada obrigatório; mantemos aberto\n      });\n      return () => sub.remove();\n    }\n  }, [open]);\n\n  const commitSelection = useCallback(\n    (item: Item | null) => {\n      onChange(item ? item.value : null, item);\n      setOpen(false);\n      setQuery(\"\");\n      setHoverIndex(-1);\n    },\n    [onChange]\n  );\n\n  const toggleOpen = useCallback(() => {\n    if (disabled) return;\n    setOpen((p) => !p);\n    if (!open && searchable) {\n      // abre focando o input de busca\n      setTimeout(() => inputRef.current?.focus(), 10);\n    }\n  }, [disabled, open, searchable]);\n\n  // navegação por teclado (web)\n  useEffect(() => {\n    if (Platform.OS !== \"web\") return;\n    if (!open) return;\n\n    const onKey = (e: KeyboardEvent) => {\n      if ([\"ArrowDown\", \"ArrowUp\", \"Enter\"].includes(e.key)) e.preventDefault();\n\n      if (e.key === \"ArrowDown\") {\n        setHoverIndex((i) => {\n          const next = Math.min((i < 0 ? -1 : i) + 1, normalized.length - 1);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === \"ArrowUp\") {\n        setHoverIndex((i) => {\n          const next = Math.max(i - 1, 0);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === \"Enter\") {\n        const item = normalized[hoverIndex];\n        if (item && !item.disabled) commitSelection(item);\n      }\n    };\n\n    const scrollIntoView = (idx: number) => {\n      if (!listRef.current) return;\n      listRef.current.scrollToIndex({ index: idx, viewPosition: 0.5, animated: false });\n    };\n\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, [open, normalized, hoverIndex, commitSelection]);\n\n  const renderItem = ({ item, index }: { item: Item; index: number }) => {\n    const isSelected = value === item.value;\n    const isHover = index === hoverIndex;\n    const isDisabled = !!item.disabled;\n\n    return (\n      <Pressable\n        onPress={() => !isDisabled && commitSelection(item)}\n        onHoverIn={() => Platform.OS === \"web\" && setHoverIndex(index)}\n        disabled={isDisabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled: isDisabled, selected: isSelected }}\n        style={[\n          {\n            height: itemHeight,\n            paddingHorizontal: 12,\n            justifyContent: \"center\",\n            backgroundColor: isHover ? \"#f2f2ff\" : \"#fff\",\n            opacity: isDisabled ? 0.5 : 1,\n            borderBottomWidth: 1,\n            borderBottomColor: \"#eee\",\n          },\n          itemStyle,\n        ]}\n      >\n        <Text style={[{ fontSize: 14, color: \"#111\" }, isSelected && { fontWeight: \"600\" }, itemTextStyle]}>\n          {item.label}\n        </Text>\n      </Pressable>\n    );\n  };\n\n  const keyExtractor = (it: Item) => String(it.value);\n\n  // conteúdo do dropdown (web e dentro do Modal no native)\n  const DropdownContent = (\n    <View\n      style={[\n        {\n          width: \"100%\",\n          maxHeight: listHeight + (searchable ? 44 : 0) + 8,\n          borderRadius: 10,\n          borderWidth: 1,\n          borderColor: \"#dcdcdc\",\n          backgroundColor: \"#fff\",\n          overflow: \"hidden\",\n          // sombra cross-plataforma\n          shadowColor: \"#000\",\n          shadowOpacity: 0.15,\n          shadowOffset: { width: 0, height: 6 },\n          shadowRadius: 12,\n          elevation: 8,\n        },\n        dropdownStyle,\n      ]}\n    >\n      {searchable && (\n        <View style={{ padding: 8, borderBottomWidth: 1, borderBottomColor: \"#efefef\" }}>\n          <TextInput\n            ref={inputRef}\n            value={query}\n            onChangeText={(t) => {\n              setQuery(t);\n              setHoverIndex(t ? 0 : -1);\n            }}\n            placeholder=\"Buscar…\"\n            style={{\n              height: 36,\n              paddingHorizontal: 10,\n              borderWidth: 1,\n              borderColor: \"#e2e2e2\",\n              borderRadius: 8,\n              fontSize: 14,\n              outlineStyle: Platform.OS === \"web\" ? \"none\" : undefined,\n            } as any}\n            // web a11y\n            {...(Platform.OS === \"web\"\n              ? { \"aria-label\": \"Campo de busca do seletor\", role: \"searchbox\" }\n              : {})}\n          />\n        </View>\n      )}\n      {normalized.length === 0 ? (\n        <View style={{ height: listHeight, alignItems: \"center\", justifyContent: \"center\" }}>\n          <Text style={{ color: \"#666\", fontSize: 14 }}>{emptyText}</Text>\n        </View>\n      ) : (\n        <FlatList\n          ref={listRef}\n          data={normalized}\n          keyExtractor={keyExtractor}\n          renderItem={renderItem}\n          getItemLayout={(_, index) => ({\n            index,\n            length: itemHeight,\n            offset: index * itemHeight,\n          })}\n          style={{ maxHeight: listHeight }}\n          keyboardShouldPersistTaps=\"handled\"\n        />\n      )}\n    </View>\n  );\n\n  return (\n    <View\n      ref={wrapRef}\n      onLayout={onWrapLayout}\n      style={[{ position: \"relative\" }, style]}\n      // web a11y wrapper\n      {...(Platform.OS === \"web\" ? { role: \"combobox\", \"aria-expanded\": open, \"data-testid\": testID } : {})}\n    >\n      <Pressable\n        onPress={toggleOpen}\n        disabled={disabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled, expanded: open }}\n        style={[\n          {\n            minHeight: 44,\n            paddingHorizontal: 12,\n            borderWidth: 1,\n            borderColor: disabled ? \"#e0e0e0\" : \"#cfcfcf\",\n            backgroundColor: disabled ? \"#f7f7f7\" : \"#fff\",\n            borderRadius: 10,\n            justifyContent: \"center\",\n          },\n          inputStyle as any,\n        ]}\n      >\n        <Text style={{ color: currentItem ? \"#111\" : \"#777\", fontSize: 14 }}>\n          {currentItem?.label ?? placeholder}\n        </Text>\n        {/* “ícone” simples em ASCII para não depender de libs */}\n        <View style={{ position: \"absolute\", right: 10, top: 0, bottom: 0, justifyContent: \"center\" }}>\n          <Text style={{ fontSize: 12 }}>{open ? \"▲\" : \"▼\"}</Text>\n        </View>\n      </Pressable>\n\n      {/* WEB: popover absoluto dentro do wrapper */}\n      {Platform.OS === \"web\" && open && (\n        <View\n          pointerEvents=\"box-none\"\n          style={{\n            position: \"absolute\",\n            left: 0,\n            right: 0,\n            zIndex: 9999, // necessário no web\n            top: openUpwards ? undefined : wrapLayout.h + 6,\n            bottom: openUpwards ? wrapLayout.h + 6 : undefined,\n          }}\n        >\n          {DropdownContent}\n        </View>\n      )}\n\n      {/* NATIVE: Modal de tela cheia com backdrop e popover posicionado relativo ao wrapper */}\n      {Platform.OS !== \"web\" && (\n        <Modal\n          visible={open}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setOpen(false)}\n        >\n          <Pressable\n            onPress={() => {\n              setOpen(false);\n              setQuery(\"\");\n              setHoverIndex(-1);\n            }}\n            style={{\n              flex: 1,\n              backgroundColor: \"rgba(0,0,0,0.15)\",\n              justifyContent: openUpwards ? \"flex-end\" : \"flex-start\",\n            }}\n          >\n            <View style={{ paddingHorizontal: 12, paddingTop: openUpwards ? 0 : 8, paddingBottom: openUpwards ? 8 : 0 }}>\n              {DropdownContent}\n            </View>\n          </Pressable>\n        </Modal>\n      )}\n    </View>\n  );\n};\n","newValue":"// src/components/InputPicker.tsx\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  TextInput,\n  FlatList,\n  Modal,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  useWindowDimensions,\n  Keyboard,\n  LayoutChangeEvent,\n} from \"react-native\";\n\ntype Item = {\n  label: string;\n  value: string | number;\n  disabled?: boolean;\n};\n\ntype InputPickerProps = {\n  items: Item[];\n  value?: Item[\"value\"] | null;\n  onChange: (value: Item[\"value\"] | null, item: Item | null) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  searchable?: boolean;\n  // estilos opcionais\n  style?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  dropdownStyle?: StyleProp<ViewStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  itemTextStyle?: StyleProp<TextStyle>;\n  emptyText?: string;\n  maxVisibleItems?: number; // padrão 6\n  itemHeight?: number; // padrão 44\n  testID?: string;\n};\n\nexport const IptPicker: React.FC<InputPickerProps> = ({\n  items,\n  value = null,\n  onChange,\n  placeholder = \"Selecionar...\",\n  disabled = false,\n  searchable = true,\n  style,\n  inputStyle,\n  dropdownStyle,\n  itemStyle,\n  itemTextStyle,\n  emptyText = \"Nada encontrado\",\n  maxVisibleItems = 6,\n  itemHeight = 44,\n  testID,\n}) => {\n  const { height: winH } = useWindowDimensions();\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [hoverIndex, setHoverIndex] = useState<number>(-1);\n  const wrapRef = useRef<View>(null);\n  const inputRef = useRef<TextInput>(null);\n  const listRef = useRef<FlatList>(null);\n  const [wrapLayout, setWrapLayout] = useState<{ y: number; x: number; h: number }>({\n    y: 0,\n    x: 0,\n    h: 0,\n  });\n\tconst items = [\n    { label: \"Selecione…\", value: \"\", disabled: true },\n    { label: \"Opção A\", value: \"A\" },\n    { label: \"Opção B\", value: \"B\" },\n    { label: \"Opção C\", value: \"C\" },\n    { label: \"Opção D\", value: \"D\" },\n    { label: \"Opção E (desabilitada)\", value: \"E\", disabled: true },\n  ];\n\n  const currentItem = useMemo(\n    () => items.find((it) => it.value === value) ?? null,\n    [items, value]\n  );\n\n  const normalized = useMemo(() => {\n    const q = query.trim().toLowerCase();\n    if (!q) return items;\n    return items.filter((it) => it.label.toLowerCase().includes(q));\n  }, [items, query]);\n\n  const visibleCount = Math.min(normalized.length || 1, maxVisibleItems);\n  const listHeight = visibleCount * itemHeight;\n\n  const openUpwards = useMemo(() => {\n    // abre pra cima se não há espaço suficiente pra baixo\n    const spaceBelow = winH - (wrapLayout.y + wrapLayout.h);\n    return spaceBelow < listHeight + 8;\n  }, [winH, wrapLayout, listHeight]);\n\n  // medir wrapper\n  const onWrapLayout = (e: LayoutChangeEvent) => {\n    const { y, x, height } = e.nativeEvent.layout;\n    setWrapLayout({ y, x, h: height });\n  };\n\n  // click fora (web)\n  useEffect(() => {\n    if (Platform.OS !== \"web\") return;\n    if (!open) return;\n\n    const onDocMouseDown = (ev: MouseEvent) => {\n      // Fecha se clique fora do wrapper\n      const root = (wrapRef.current as any)?._node ?? (wrapRef.current as any);\n      if (root && ev.target instanceof Node && !root.contains(ev.target)) {\n        setOpen(false);\n        setQuery(\"\");\n        setHoverIndex(-1);\n      }\n    };\n    document.addEventListener(\"mousedown\", onDocMouseDown);\n    return () => document.removeEventListener(\"mousedown\", onDocMouseDown);\n  }, [open]);\n\n  // fechar no back (Android) / teclado Esc (web)\n  useEffect(() => {\n    if (!open) return;\n\n    if (Platform.OS === \"web\") {\n      const onKey = (e: KeyboardEvent) => {\n        if (e.key === \"Escape\") {\n          setOpen(false);\n          setQuery(\"\");\n          setHoverIndex(-1);\n        }\n      };\n      window.addEventListener(\"keydown\", onKey);\n      return () => window.removeEventListener(\"keydown\", onKey);\n    } else {\n      const sub = Keyboard.addListener(\"keyboardDidHide\", () => {\n        // nada obrigatório; mantemos aberto\n      });\n      return () => sub.remove();\n    }\n  }, [open]);\n\n  const commitSelection = useCallback(\n    (item: Item | null) => {\n      onChange(item ? item.value : null, item);\n      setOpen(false);\n      setQuery(\"\");\n      setHoverIndex(-1);\n    },\n    [onChange]\n  );\n\n  const toggleOpen = useCallback(() => {\n    if (disabled) return;\n    setOpen((p) => !p);\n    if (!open && searchable) {\n      // abre focando o input de busca\n      setTimeout(() => inputRef.current?.focus(), 10);\n    }\n  }, [disabled, open, searchable]);\n\n  // navegação por teclado (web)\n  useEffect(() => {\n    if (Platform.OS !== \"web\") return;\n    if (!open) return;\n\n    const onKey = (e: KeyboardEvent) => {\n      if ([\"ArrowDown\", \"ArrowUp\", \"Enter\"].includes(e.key)) e.preventDefault();\n\n      if (e.key === \"ArrowDown\") {\n        setHoverIndex((i) => {\n          const next = Math.min((i < 0 ? -1 : i) + 1, normalized.length - 1);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === \"ArrowUp\") {\n        setHoverIndex((i) => {\n          const next = Math.max(i - 1, 0);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === \"Enter\") {\n        const item = normalized[hoverIndex];\n        if (item && !item.disabled) commitSelection(item);\n      }\n    };\n\n    const scrollIntoView = (idx: number) => {\n      if (!listRef.current) return;\n      listRef.current.scrollToIndex({ index: idx, viewPosition: 0.5, animated: false });\n    };\n\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, [open, normalized, hoverIndex, commitSelection]);\n\n  const renderItem = ({ item, index }: { item: Item; index: number }) => {\n    const isSelected = value === item.value;\n    const isHover = index === hoverIndex;\n    const isDisabled = !!item.disabled;\n\n    return (\n      <Pressable\n        onPress={() => !isDisabled && commitSelection(item)}\n        onHoverIn={() => Platform.OS === \"web\" && setHoverIndex(index)}\n        disabled={isDisabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled: isDisabled, selected: isSelected }}\n        style={[\n          {\n            height: itemHeight,\n            paddingHorizontal: 12,\n            justifyContent: \"center\",\n            backgroundColor: isHover ? \"#f2f2ff\" : \"#fff\",\n            opacity: isDisabled ? 0.5 : 1,\n            borderBottomWidth: 1,\n            borderBottomColor: \"#eee\",\n          },\n          itemStyle,\n        ]}\n      >\n        <Text style={[{ fontSize: 14, color: \"#111\" }, isSelected && { fontWeight: \"600\" }, itemTextStyle]}>\n          {item.label}\n        </Text>\n      </Pressable>\n    );\n  };\n\n  const keyExtractor = (it: Item) => String(it.value);\n\n  // conteúdo do dropdown (web e dentro do Modal no native)\n  const DropdownContent = (\n    <View\n      style={[\n        {\n          width: \"100%\",\n          maxHeight: listHeight + (searchable ? 44 : 0) + 8,\n          borderRadius: 10,\n          borderWidth: 1,\n          borderColor: \"#dcdcdc\",\n          backgroundColor: \"#fff\",\n          overflow: \"hidden\",\n          // sombra cross-plataforma\n          shadowColor: \"#000\",\n          shadowOpacity: 0.15,\n          shadowOffset: { width: 0, height: 6 },\n          shadowRadius: 12,\n          elevation: 8,\n        },\n        dropdownStyle,\n      ]}\n    >\n      {searchable && (\n        <View style={{ padding: 8, borderBottomWidth: 1, borderBottomColor: \"#efefef\" }}>\n          <TextInput\n            ref={inputRef}\n            value={query}\n            onChangeText={(t) => {\n              setQuery(t);\n              setHoverIndex(t ? 0 : -1);\n            }}\n            placeholder=\"Buscar…\"\n            style={{\n              height: 36,\n              paddingHorizontal: 10,\n              borderWidth: 1,\n              borderColor: \"#e2e2e2\",\n              borderRadius: 8,\n              fontSize: 14,\n              outlineStyle: Platform.OS === \"web\" ? \"none\" : undefined,\n            } as any}\n            // web a11y\n            {...(Platform.OS === \"web\"\n              ? { \"aria-label\": \"Campo de busca do seletor\", role: \"searchbox\" }\n              : {})}\n          />\n        </View>\n      )}\n      {normalized.length === 0 ? (\n        <View style={{ height: listHeight, alignItems: \"center\", justifyContent: \"center\" }}>\n          <Text style={{ color: \"#666\", fontSize: 14 }}>{emptyText}</Text>\n        </View>\n      ) : (\n        <FlatList\n          ref={listRef}\n          data={normalized}\n          keyExtractor={keyExtractor}\n          renderItem={renderItem}\n          getItemLayout={(_, index) => ({\n            index,\n            length: itemHeight,\n            offset: index * itemHeight,\n          })}\n          style={{ maxHeight: listHeight }}\n          keyboardShouldPersistTaps=\"handled\"\n        />\n      )}\n    </View>\n  );\n\n  return (\n    <View\n      ref={wrapRef}\n      onLayout={onWrapLayout}\n      style={[{ position: \"relative\" }, style]}\n      // web a11y wrapper\n      {...(Platform.OS === \"web\" ? { role: \"combobox\", \"aria-expanded\": open, \"data-testid\": testID } : {})}\n    >\n      <Pressable\n        onPress={toggleOpen}\n        disabled={disabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled, expanded: open }}\n        style={[\n          {\n            minHeight: 44,\n            paddingHorizontal: 12,\n            borderWidth: 1,\n            borderColor: disabled ? \"#e0e0e0\" : \"#cfcfcf\",\n            backgroundColor: disabled ? \"#f7f7f7\" : \"#fff\",\n            borderRadius: 10,\n            justifyContent: \"center\",\n          },\n          inputStyle as any,\n        ]}\n      >\n        <Text style={{ color: currentItem ? \"#111\" : \"#777\", fontSize: 14 }}>\n          {currentItem?.label ?? placeholder}\n        </Text>\n        {/* “ícone” simples em ASCII para não depender de libs */}\n        <View style={{ position: \"absolute\", right: 10, top: 0, bottom: 0, justifyContent: \"center\" }}>\n          <Text style={{ fontSize: 12 }}>{open ? \"▲\" : \"▼\"}</Text>\n        </View>\n      </Pressable>\n\n      {/* WEB: popover absoluto dentro do wrapper */}\n      {Platform.OS === \"web\" && open && (\n        <View\n          pointerEvents=\"box-none\"\n          style={{\n            position: \"absolute\",\n            left: 0,\n            right: 0,\n            zIndex: 9999, // necessário no web\n            top: openUpwards ? undefined : wrapLayout.h + 6,\n            bottom: openUpwards ? wrapLayout.h + 6 : undefined,\n          }}\n        >\n          {DropdownContent}\n        </View>\n      )}\n\n      {/* NATIVE: Modal de tela cheia com backdrop e popover posicionado relativo ao wrapper */}\n      {Platform.OS !== \"web\" && (\n        <Modal\n          visible={open}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setOpen(false)}\n        >\n          <Pressable\n            onPress={() => {\n              setOpen(false);\n              setQuery(\"\");\n              setHoverIndex(-1);\n            }}\n            style={{\n              flex: 1,\n              backgroundColor: \"rgba(0,0,0,0.15)\",\n              justifyContent: openUpwards ? \"flex-end\" : \"flex-start\",\n            }}\n          >\n            <View style={{ paddingHorizontal: 12, paddingTop: openUpwards ? 0 : 8, paddingBottom: openUpwards ? 8 : 0 }}>\n              {DropdownContent}\n            </View>\n          </Pressable>\n        </Modal>\n      )}\n    </View>\n  );\n};\n"}}