{"1761856179879":{"actionType":"saveAll","createdAt":"1761856179879","actionID":"1761856179879","userID":"#TEMP","path":"system.capsules.3266c498-6536-4e6d-a1a0-f614253e06d3.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\ntype Tprops = {\n  pass: {\n    variable?: string[]; // lista inicial de previews (URIs) - só UI\n    childrenItems?: any[]; // não usado\n    arrFuncs?: Array<(payload: any, args?: any) => any | Promise<any>>; // callbacks que recebem FILES/ASSETS\n    args?: any; // args repassados aos callbacks\n    onChange?: (uris: string[]) => void; // callback UI com as URIs (previews)\n    max?: number; // limite de itens\n  };\n};\n\nexport const BtnDocumentPicker = (props: Tprops) => {\n  const isWeb = RN.Platform.OS === 'web';\n  return isWeb ? <BtnWeb {...props} /> : <BtnNat {...props} />;\n};\n\n/* ---------------- WEB ---------------- */\nconst BtnWeb = ({ pass }: Tprops) => {\n  const { variable = [], onChange, max, arrFuncs, args } = pass || {};\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // UI: previews\n  const [images, setImages] = React.useState<string[]>(variable);\n  // Upload: Files reais\n  const [files, setFiles] = React.useState<File[]>([]);\n\n  // Dispara callbacks sempre que os FILES mudam\n  React.useEffect(() => {\n    if (arrFuncs) for (const fn of arrFuncs) fn(files, args);\n    // revoke das URLs quando componente desmontar\n    return () =>\n      images.forEach(u => u.startsWith('blob:') && URL.revokeObjectURL(u));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [files]);\n\n  const pickWeb = () => inputRef.current?.click();\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log('Document Picker - Web - Selected files', event.target.files);\n    const fl = event.target.files;\n    if (!fl) return;\n\n    const newFiles = Array.from(fl);\n    const newPreviews = newFiles.map(f => URL.createObjectURL(f));\n\n    const nextPreviews = max\n      ? [...images, ...newPreviews].slice(0, max)\n      : [...images, ...newPreviews];\n    const nextFiles = max\n      ? [...files, ...newFiles].slice(0, max)\n      : [...files, ...newFiles];\n\n    setImages(nextPreviews);\n    setFiles(nextFiles);\n    onChange?.(nextPreviews);\n\n    // permitir re-selecionar os mesmos arquivos\n    event.target.value = '';\n  };\n\n  const removeAt = (idx: number) => {\n    const imgs = [...images];\n    const fls = [...files];\n    const [rm] = imgs.splice(idx, 1);\n    fls.splice(idx, 1);\n\n    if (rm?.startsWith('blob:')) URL.revokeObjectURL(rm);\n\n    setImages(imgs);\n    setFiles(fls);\n    onChange?.(imgs);\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <ThumbGrid images={images} onRemove={removeAt} />\n        <RN.Text style={styles.title}>Adicionar Imagens</RN.Text>\n        <RN.Text style={styles.subtitle}>\n          Selecione ou tire fotos para mostrar o progresso\n        </RN.Text>\n        <RN.Pressable style={styles.btn} onPress={pickWeb}>\n          <RN.Text style={styles.btnTxt}>Adicionar</RN.Text>\n        </RN.Pressable>\n      </RN.View>\n\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple\n        style={{ display: 'none' }}\n        onChange={handleWebFile}\n      />\n    </>\n  );\n};\n\n/* --------------- NATIVO --------------- */\nconst BtnNat = ({ pass }: Tprops) => {\n  const { variable = [], onChange, max, arrFuncs, args } = pass || {};\n\n  // UI: URIs para miniaturas\n  const [images, setImages] = React.useState<string[]>(variable);\n  // Upload: objetos ricos do ImagePicker\n  const [assets, setAssets] = React.useState<\n    Array<{ uri: string; fileName?: string; mimeType?: string }>\n  >([]);\n\n  // Dispara callbacks sempre que os ASSETS mudam\n  React.useEffect(() => {\n    if (arrFuncs) for (const fn of arrFuncs) fn(assets, args);\n    return () => {\n      /* nada a revogar no nativo */\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [assets]);\n\n  const pickNative = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Permissão para acessar a galeria foi negada');\n      return;\n    }\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsMultipleSelection: true,\n      selectionLimit: max ?? 0, // 0 = sem limite (iOS; pode ser ignorado em algumas versões)\n      allowsEditing: false,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      const newUris = result.assets.map(a => a.uri);\n      const nextUris = max\n        ? [...images, ...newUris].slice(0, max)\n        : [...images, ...newUris];\n\n      const newAssets = result.assets.map(a => ({\n        uri: a.uri,\n        fileName: a.fileName,\n        mimeType: a.mimeType,\n      }));\n      const nextAssets = max\n        ? [...assets, ...newAssets].slice(0, max)\n        : [...assets, ...newAssets];\n\n      setImages(nextUris); // UI\n      setAssets(nextAssets); // Upload\n      onChange?.(nextUris);\n    }\n  };\n\n  const removeAt = (idx: number) => {\n    const imgs = [...images];\n    imgs.splice(idx, 1);\n    const ats = [...assets];\n    ats.splice(idx, 1);\n    setImages(imgs);\n    setAssets(ats);\n    onChange?.(imgs);\n  };\n\n  return (\n    <RN.View style={styles.container}>\n      <ThumbGrid images={images} onRemove={removeAt} />\n      <RN.Text style={styles.title}>Adicionar Imagens</RN.Text>\n      <RN.Text style={styles.subtitle}>\n        Selecione ou tire fotos para mostrar o progresso\n      </RN.Text>\n      <RN.Pressable style={styles.btn} onPress={pickNative}>\n        <RN.Text style={styles.btnTxt}>Adicionar</RN.Text>\n      </RN.Pressable>\n    </RN.View>\n  );\n};\n\n/* ------- Grade de miniaturas reutilizável ------- */\nconst ThumbGrid = ({\n  images,\n  onRemove,\n}: {\n  images: string[];\n  onRemove: (idx: number) => void;\n}) => {\n  if (!images.length) return null;\n  return (\n    <RN.View style={thumb.grid}>\n      {images.map((uri, idx) => (\n        <RN.View key={uri + idx} style={thumb.item}>\n          <RN.Image source={{ uri }} style={thumb.img} />\n          <RN.Pressable\n            hitSlop={8}\n            style={thumb.x}\n            onPress={() => onRemove(idx)}\n          >\n            <RN.Text style={thumb.xTxt}>×</RN.Text>\n          </RN.Pressable>\n        </RN.View>\n      ))}\n    </RN.View>\n  );\n};\n\n/* ---------------- STYLES ---------------- */\nconst styles = RN.StyleSheet.create({\n  container: {\n    width: '100%',\n    minHeight: 180,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderStyle: 'dashed',\n    borderColor: '#D5DBE3',\n    borderRadius: 12,\n    borderWidth: 2,\n    padding: 20,\n    gap: 16,\n    backgroundColor: '#fff',\n  },\n  title: { fontSize: 18, fontWeight: '700', textAlign: 'center' },\n  subtitle: { fontSize: 14, textAlign: 'center', color: '#4B5563' },\n  btn: {\n    backgroundColor: '#E8EDF5',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 10,\n    height: 36,\n    paddingHorizontal: 16,\n  },\n  btnTxt: { fontSize: 14, fontWeight: '700' },\n});\n\nconst thumb = RN.StyleSheet.create({\n  grid: {\n    width: '100%',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    columnGap: 10,\n    rowGap: 10,\n  },\n  item: {\n    position: 'relative',\n    width: '45%',\n    aspectRatio: 1.6,\n    borderRadius: 6,\n    overflow: 'hidden',\n  },\n  img: { width: '100%', height: '100%' },\n  x: {\n    position: 'absolute',\n    top: 4,\n    right: 4,\n    width: 22,\n    height: 22,\n    borderRadius: 11,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  xTxt: { color: '#fff', fontSize: 16, lineHeight: 16, fontWeight: '700' },\n});\n","newValue":"// ---------- import Packs\nimport React from 'react';\nimport * as RN from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\ntype Tprops = {\n  pass: {\n    variable?: string[]; // lista inicial de previews (URIs) - só UI\n    childrenItems?: any[]; // não usado\n    arrFuncs?: Array<(payload: any, args?: any) => any | Promise<any>>; // callbacks que recebem FILES/ASSETS\n    args?: any; // args repassados aos callbacks\n    onChange?: (uris: string[]) => void; // callback UI com as URIs (previews)\n    max?: number; // limite de itens\n  };\n};\n\nexport const BtnDocumentPicker = (props: Tprops) => {\n  const isWeb = RN.Platform.OS === 'web';\n  return isWeb ? <BtnWeb {...props} /> : <BtnNat {...props} />;\n};\n\n/* ---------------- WEB ---------------- */\nconst BtnWeb = ({ pass }: Tprops) => {\n  const { variable = [], onChange, max, arrFuncs, args } = pass || {};\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  // UI: previews\n  const [images, setImages] = React.useState<string[]>(variable);\n  // Upload: Files reais\n  const [files, setFiles] = React.useState<File[]>([]);\n\n  // Dispara callbacks sempre que os FILES mudam\n  React.useEffect(() => {\n    if (arrFuncs) for (const fn of arrFuncs) fn(files, args);\n    // revoke das URLs quando componente desmontar\n    return () =>\n      images.forEach(u => u.startsWith('blob:') && URL.revokeObjectURL(u));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [files]);\n\n  const pickWeb = () => inputRef.current?.click();\n\n  const handleWebFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log('Document Picker - Web - Selected files', event.target.files);\n    const fl = event.target.files;\n    if (!fl) return;\n\n    const newFiles = Array.from(fl);\n    const newPreviews = newFiles.map(f => URL.createObjectURL(f));\n\n    const nextPreviews = max\n      ? [...images, ...newPreviews].slice(0, max)\n      : [...images, ...newPreviews];\n    const nextFiles = max\n      ? [...files, ...newFiles].slice(0, max)\n      : [...files, ...newFiles];\n\n    setImages(nextPreviews);\n    setFiles(nextFiles);\n    onChange?.(nextPreviews);\n\n    // permitir re-selecionar os mesmos arquivos\n    event.target.value = '';\n  };\n\n  const removeAt = (idx: number) => {\n    const imgs = [...images];\n    const fls = [...files];\n    const [rm] = imgs.splice(idx, 1);\n    fls.splice(idx, 1);\n\n    if (rm?.startsWith('blob:')) URL.revokeObjectURL(rm);\n\n    setImages(imgs);\n    setFiles(fls);\n    onChange?.(imgs);\n  };\n\n  return (\n    <>\n      <RN.View style={styles.container}>\n        <ThumbGrid images={images} onRemove={removeAt} />\n        <RN.Text style={styles.title}>Adicionar Imagens</RN.Text>\n        <RN.Text style={styles.subtitle}>\n          Selecione ou tire fotos para mostrar o progresso\n        </RN.Text>\n        <RN.Pressable style={styles.btn} onPress={pickWeb}>\n          <RN.Text style={styles.btnTxt}>Adicionar</RN.Text>\n        </RN.Pressable>\n      </RN.View>\n\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple\n        style={{ display: 'none' }}\n        onChange={handleWebFile}\n      />\n    </>\n  );\n};\n\n/* --------------- NATIVO --------------- */\nconst BtnNat = ({ pass }: Tprops) => {\n  const { variable = [], onChange, max, arrFuncs, args } = pass || {};\n\n  // UI: URIs para miniaturas\n  const [images, setImages] = React.useState<string[]>(variable);\n  // Upload: objetos ricos do ImagePicker\n  const [assets, setAssets] = React.useState<\n    Array<{ uri: string; fileName?: string; mimeType?: string }>\n  >([]);\n\n  // Dispara callbacks sempre que os ASSETS mudam\n  React.useEffect(() => {\n    if (arrFuncs) for (const fn of arrFuncs) fn(assets, args);\n    return () => {\n      /* nada a revogar no nativo */\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [assets]);\n\n  const pickNative = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Permissão para acessar a galeria foi negada');\n      return;\n    }\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsMultipleSelection: true,\n      selectionLimit: max ?? 0, // 0 = sem limite (iOS; pode ser ignorado em algumas versões)\n      allowsEditing: false,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      const newUris = result.assets.map(a => a.uri);\n      const nextUris = max\n        ? [...images, ...newUris].slice(0, max)\n        : [...images, ...newUris];\n\n      const newAssets = result.assets.map(a => ({\n        uri: a.uri,\n        fileName: a.fileName,\n        mimeType: a.mimeType,\n      }));\n      const nextAssets = max\n        ? [...assets, ...newAssets].slice(0, max)\n        : [...assets, ...newAssets];\n\n      setImages(nextUris); // UI\n      setAssets(nextAssets); // Upload\n      onChange?.(nextUris);\n    }\n  };\n\n  const removeAt = (idx: number) => {\n    const imgs = [...images];\n    imgs.splice(idx, 1);\n    const ats = [...assets];\n    ats.splice(idx, 1);\n    setImages(imgs);\n    setAssets(ats);\n    onChange?.(imgs);\n  };\n\n  return (\n    <RN.View style={styles.container}>\n      <ThumbGrid images={images} onRemove={removeAt} />\n      <RN.Text style={styles.title}>Adicionar Imagens</RN.Text>\n      <RN.Text style={styles.subtitle}>\n        Selecione ou tire fotos para mostrar o progresso\n      </RN.Text>\n      <RN.Pressable style={styles.btn} onPress={pickNative}>\n        <RN.Text style={styles.btnTxt}>Adicionar</RN.Text>\n      </RN.Pressable>\n    </RN.View>\n  );\n};\n\n/* ------- Grade de miniaturas reutilizável ------- */\nconst ThumbGrid = ({\n  images,\n  onRemove,\n}: {\n  images: string[];\n  onRemove: (idx: number) => void;\n}) => {\n  if (!images.length) return null;\n  return (\n    <RN.View style={thumb.grid}>\n      {images.map((uri, idx) => (\n        <RN.View key={uri + idx} style={thumb.item}>\n          <RN.Image source={{ uri }} style={thumb.img} />\n          <RN.Pressable\n            hitSlop={8}\n            style={thumb.x}\n            onPress={() => onRemove(idx)}\n          >\n            <RN.Text style={thumb.xTxt}>×</RN.Text>\n          </RN.Pressable>\n        </RN.View>\n      ))}\n    </RN.View>\n  );\n};\n\n/* ---------------- STYLES ---------------- */\nconst styles = RN.StyleSheet.create({\n  container: {\n    width: '100%',\n    minHeight: 180,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderStyle: 'dashed',\n    borderColor: '#D5DBE3',\n    borderRadius: 12,\n    borderWidth: 2,\n    padding: 20,\n    gap: 16,\n    backgroundColor: '#fff',\n  },\n  title: { fontSize: 18, fontWeight: '700', textAlign: 'center' },\n  subtitle: { fontSize: 14, textAlign: 'center', color: '#4B5563' },\n  btn: {\n    backgroundColor: '#E8EDF5',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 10,\n    height: 36,\n    paddingHorizontal: 16,\n  },\n  btnTxt: { fontSize: 14, fontWeight: '700' },\n});\n\nconst thumb = RN.StyleSheet.create({\n  grid: {\n    width: '100%',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    columnGap: 10,\n    rowGap: 10,\n  },\n  item: {\n    position: 'relative',\n    width: '45%',\n    aspectRatio: 1.6,\n    borderRadius: 6,\n    overflow: 'hidden',\n  },\n  img: { width: '100%', height: '100%' },\n  x: {\n    position: 'absolute',\n    top: 4,\n    right: 4,\n    width: 22,\n    height: 22,\n    borderRadius: 11,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  xTxt: { color: '#fff', fontSize: 16, lineHeight: 16, fontWeight: '700' },\n});"}}