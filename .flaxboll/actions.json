{"1758727653896":{"actionType":"saveAll","createdAt":"1758727653896","actionID":"1758727653896","userID":"#TEMP","path":"system.capsules.268c4fa7-54ea-492e-8f9a-42dddca4d4d6.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// src/components/InputPicker.tsx\nimport JSON5 from 'json5';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  View,\n  Text,\n  Pressable,\n  TextInput,\n  FlatList,\n  Modal,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  useWindowDimensions,\n  Keyboard,\n} from 'react-native';\n\nimport { pathSel } from '../project';\nimport { useData } from '../../..';\n\ntype Item = {\n  label: string;\n  value: string | number | null;\n  disabled?: boolean;\n};\n\ntype InputPickerProps = {\n  pathItems: string; // onde estão as opções\n  pathValue?: string; // (opcional) onde está o valor selecionado\n  placeholder?: string;\n  disabled?: boolean;\n  searchable?: boolean;\n\n  style?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  dropdownStyle?: StyleProp<ViewStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  itemTextStyle?: StyleProp<TextStyle>;\n\n  emptyText?: string;\n  maxVisibleItems?: number; // default 6\n  itemHeight?: number; // default 44\n  testID?: string;\n};\n\ntype Tprops = {\n  pass: {\n    args: any;\n    configs: string[]; // configs[0] = JSON5<InputPickerProps>\n    // aceita (value, item, args) ou (value, args)\n    arrFuncs?: Array<\n      (value: Item['value'], item?: Item | null, args?: any) => void\n    >;\n  };\n};\n\nconst EMPTY_ITEMS: Item[] = Object.freeze([]);\nconst isUnset = (v: any) => v === null || v === undefined || v === '';\n\nexport const IptPicker: React.FC<Tprops> = props => {\n  const { configs, arrFuncs = [], args } = props.pass;\n\n  const obj0 = JSON5.parse(configs[0] || '{}') as Partial<InputPickerProps>;\n  const {\n    placeholder = 'Selecionar...',\n    maxVisibleItems = 6,\n    searchable = true,\n    style,\n    inputStyle,\n    dropdownStyle,\n    itemStyle,\n    itemTextStyle,\n    emptyText = 'Nada encontrado',\n    itemHeight = 44,\n    pathItems = '',\n    pathValue,\n    disabled = false,\n    testID,\n  } = obj0;\n\n  const { height: winH } = useWindowDimensions();\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState('');\n  const [hoverIndex, setHoverIndex] = useState<number>(-1);\n  const wrapRef = useRef<View>(null);\n  const inputRef = useRef<TextInput>(null);\n  const listRef = useRef<FlatList<Item>>(null);\n\n  // posição/tamanho do wrapper (medida sob demanda)\n  const [wrapLayout, setWrapLayout] = useState<{\n    y: number;\n    x: number;\n    h: number;\n  }>({\n    y: 0,\n    x: 0,\n    h: 0,\n  });\n\n  // ----- Data bindings\n  const items: Item[] =\n    useData((ct: any) =>\n      pathItems ? (pathSel(ct, pathItems) as Item[]) : EMPTY_ITEMS,\n    ) || EMPTY_ITEMS;\n\n  const selectedValueFromStore: Item['value'] = useData((ct: any) =>\n    pathValue ? (pathSel(ct, pathValue) as Item['value']) : null,\n  );\n\n  // estado local como fallback e para refletir seleção imediatamente\n  const [selectedLocal, setSelectedLocal] = useState<Item['value'] | null>(\n    isUnset(selectedValueFromStore) ? null : selectedValueFromStore,\n  );\n\n  // sincroniza do store apenas quando ele tiver um valor \"definido\"\n  useEffect(() => {\n    if (!pathValue) return;\n    if (!isUnset(selectedValueFromStore))\n      setSelectedLocal(selectedValueFromStore);\n  }, [pathValue, selectedValueFromStore]);\n\n  // valor efetivo a exibir\n  const effectiveValue = pathValue\n    ? !isUnset(selectedValueFromStore)\n      ? selectedValueFromStore\n      : selectedLocal\n    : selectedLocal;\n\n  // emissor para arrFuncs (2 ou 3 parâmetros)\n  const emitChange = useCallback(\n    (val: Item['value'], it: Item | null) => {\n      for (const fn of arrFuncs) {\n        if (typeof fn !== 'function') continue;\n        try {\n          // se o handler espera 2 args, o terceiro é ignorado\n          fn(val, it, args);\n        } catch (err) {\n          console.error('[IptPicker] erro no handler:', err);\n        }\n      }\n    },\n    [arrFuncs, args],\n  );\n\n  const currentItem = useMemo(\n    () => items.find(it => it.value === effectiveValue) ?? null,\n    [items, effectiveValue],\n  );\n\n  const normalized = useMemo(() => {\n    const q = query.trim().toLowerCase();\n    if (!q) return items;\n    return items.filter(it => (it.label ?? '').toLowerCase().includes(q));\n  }, [items, query]);\n\n  const visibleCount = Math.min(normalized.length || 1, maxVisibleItems);\n  const listHeight = visibleCount * itemHeight;\n\n  const openUpwards = useMemo(() => {\n    const spaceBelow = winH - (wrapLayout.y + wrapLayout.h);\n    return spaceBelow < listHeight + (searchable ? 44 : 0) + 8;\n  }, [winH, wrapLayout, listHeight, searchable]);\n\n  // ----- Medição sob demanda (opção B)\n  const measureWrapper = useCallback(() => {\n    const node: any = wrapRef.current;\n\n    if (node?.measureInWindow) {\n      node.measureInWindow((x: number, y: number, w: number, h: number) => {\n        setWrapLayout(prev =>\n          prev.y === y && prev.x === x && prev.h === h ? prev : { y, x, h },\n        );\n      });\n      return;\n    }\n\n    const el = node?._node ?? node;\n    if (el?.getBoundingClientRect) {\n      const r = el.getBoundingClientRect();\n      setWrapLayout(prev =>\n        prev.y === r.top && prev.x === r.left && prev.h === r.height\n          ? prev\n          : { y: r.top, x: r.left, h: r.height },\n      );\n    }\n  }, []);\n\n  const commitSelection = useCallback(\n    (item: Item | null) => {\n      const nextVal = item ? item.value : null;\n\n      // reflete imediatamente\n      setSelectedLocal(nextVal);\n\n      // propaga pra fora (store, etc.)\n      emitChange(nextVal, item);\n\n      // fecha/limpa busca\n      setOpen(false);\n      setQuery('');\n      setHoverIndex(-1);\n    },\n    [emitChange],\n  );\n\n  const toggleOpen = useCallback(() => {\n    if (disabled) return;\n    setOpen(p => !p);\n\n    if (!open) {\n      requestAnimationFrame(() => measureWrapper());\n      if (searchable) setTimeout(() => inputRef.current?.focus(), 10);\n    }\n  }, [disabled, open, searchable, measureWrapper]);\n\n  // remeasure enquanto aberto em resize/scroll no web\n  useEffect(() => {\n    if (Platform.OS !== 'web' || !open) return;\n\n    const onResize = () => measureWrapper();\n    const onScroll = () => measureWrapper();\n\n    window.addEventListener('resize', onResize);\n    window.addEventListener('scroll', onScroll, true);\n    return () => {\n      window.removeEventListener('resize', onResize);\n      window.removeEventListener('scroll', onScroll, true);\n    };\n  }, [open, measureWrapper]);\n\n  // click fora (web)\n  useEffect(() => {\n    if (Platform.OS !== 'web' || !open) return;\n\n    const onDocMouseDown = (ev: any) => {\n      const root = (wrapRef.current as any)?._node ?? (wrapRef.current as any);\n      if (root && ev.target instanceof Node && !root.contains(ev.target)) {\n        setOpen(false);\n        setQuery('');\n        setHoverIndex(-1);\n      }\n    };\n    document.addEventListener('mousedown', onDocMouseDown);\n    return () => document.removeEventListener('mousedown', onDocMouseDown);\n  }, [open]);\n\n  // fechar no back (Android) / Esc (web)\n  useEffect(() => {\n    if (!open) return;\n\n    if (Platform.OS === 'web') {\n      const onKey = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          setOpen(false);\n          setQuery('');\n          setHoverIndex(-1);\n        }\n      };\n      window.addEventListener('keydown', onKey);\n      return () => window.removeEventListener('keydown', onKey);\n    } else {\n      const sub = Keyboard.addListener('keyboardDidHide', () => {});\n      return () => sub.remove();\n    }\n  }, [open]);\n\n  // navegação por teclado (web)\n  useEffect(() => {\n    if (Platform.OS !== 'web' || !open) return;\n\n    const scrollIntoView = (idx: number) => {\n      try {\n        listRef.current?.scrollToIndex({\n          index: idx,\n          viewPosition: 0.5,\n          animated: false,\n        });\n      } catch {}\n    };\n\n    const onKey = (e: KeyboardEvent) => {\n      if (['ArrowDown', 'ArrowUp', 'Enter'].includes(e.key)) e.preventDefault();\n\n      if (e.key === 'ArrowDown') {\n        setHoverIndex(i => {\n          const next = Math.min((i < 0 ? -1 : i) + 1, normalized.length - 1);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === 'ArrowUp') {\n        setHoverIndex(i => {\n          const next = Math.max(i - 1, 0);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === 'Enter') {\n        const item = normalized[hoverIndex];\n        if (item && !item.disabled) commitSelection(item);\n      }\n    };\n\n    window.addEventListener('keydown', onKey);\n    return () => window.removeEventListener('keydown', onKey);\n  }, [open, normalized, hoverIndex, commitSelection]);\n\n  const renderItem = ({ item, index }: { item: Item; index: number }) => {\n    const isSelected = effectiveValue === item.value;\n    const isHover = index === hoverIndex;\n    const isDisabled = !!item.disabled;\n\n    return (\n      <Pressable\n        onPress={() => !isDisabled && commitSelection(item)}\n        onHoverIn={() => Platform.OS === 'web' && setHoverIndex(index)}\n        disabled={isDisabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled: isDisabled, selected: isSelected }}\n        style={[\n          {\n            height: itemHeight,\n            paddingHorizontal: 12,\n            justifyContent: 'center',\n            backgroundColor: isHover ? '#f2f2ff' : '#fff',\n            opacity: isDisabled ? 0.5 : 1,\n            borderBottomWidth: 1,\n            borderBottomColor: '#eee',\n          },\n          itemStyle,\n        ]}\n      >\n        <Text\n          style={[\n            { fontSize: 14, color: '#111' },\n            isSelected && { fontWeight: '600' },\n            itemTextStyle,\n          ]}\n        >\n          {item.label}\n        </Text>\n      </Pressable>\n    );\n  };\n\n  const keyExtractor = (it: Item) => String(it.value);\n\n  const DropdownContent = (\n    <View\n      style={[\n        {\n          width: '100%',\n          maxHeight: listHeight + (searchable ? 44 : 0) + 8,\n          borderRadius: 10,\n          borderWidth: 1,\n          borderColor: '#dcdcdc',\n          backgroundColor: '#fff',\n          overflow: 'hidden',\n          shadowColor: '#000',\n          shadowOpacity: 0.15,\n          shadowOffset: { width: 0, height: 6 },\n          shadowRadius: 12,\n          elevation: 8,\n        },\n        dropdownStyle,\n      ]}\n    >\n      {searchable && (\n        <View\n          style={{\n            padding: 8,\n            borderBottomWidth: 1,\n            borderBottomColor: '#efefef',\n          }}\n        >\n          <TextInput\n            ref={inputRef}\n            value={query}\n            onChangeText={t => {\n              setQuery(t);\n              setHoverIndex(t ? 0 : -1);\n              // não chamar handlers aqui – evita sobrescrever o valor no store\n            }}\n            placeholder=\"Buscar…\"\n            style={\n              {\n                height: 36,\n                paddingHorizontal: 10,\n                borderWidth: 1,\n                borderColor: '#e2e2e2',\n                borderRadius: 8,\n                fontSize: 14,\n                outlineStyle: Platform.OS === 'web' ? 'none' : undefined,\n              } as any\n            }\n            {...(Platform.OS === 'web'\n              ? { 'aria-label': 'Campo de busca do seletor', role: 'searchbox' }\n              : {})}\n          />\n        </View>\n      )}\n      {normalized.length === 0 ? (\n        <View\n          style={{\n            height: listHeight,\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Text style={{ color: '#666', fontSize: 14 }}>{emptyText}</Text>\n        </View>\n      ) : (\n        <FlatList\n          ref={listRef}\n          data={normalized}\n          keyExtractor={keyExtractor}\n          renderItem={renderItem}\n          getItemLayout={(_, index) => ({\n            index,\n            length: itemHeight,\n            offset: index * itemHeight,\n          })}\n          style={{ maxHeight: listHeight }}\n          keyboardShouldPersistTaps=\"handled\"\n        />\n      )}\n    </View>\n  );\n\n  // o input só considera prop disabled (itens desabilitados não travam o input)\n  const inputIsDisabled = !!disabled;\n\n  return (\n    <View\n      ref={wrapRef}\n      style={[{ position: 'relative' }, style]}\n      {...(Platform.OS === 'web'\n        ? { role: 'combobox', 'aria-expanded': open, 'data-testid': testID }\n        : {})}\n    >\n      <Pressable\n        onPress={toggleOpen}\n        disabled={inputIsDisabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled: inputIsDisabled, expanded: open }}\n        style={[\n          {\n            minHeight: 44,\n            paddingHorizontal: 12,\n            borderWidth: 1,\n            borderColor: inputIsDisabled ? '#e0e0e0' : '#cfcfcf',\n            backgroundColor: inputIsDisabled ? '#f7f7f7' : '#fff',\n            borderRadius: 10,\n            justifyContent: 'center',\n          },\n          inputStyle as any,\n        ]}\n      >\n        <Text style={{ color: currentItem ? '#111' : '#777', fontSize: 14 }}>\n          {currentItem?.label ?? placeholder}\n        </Text>\n        <View\n          style={{\n            position: 'absolute',\n            right: 10,\n            top: 0,\n            bottom: 0,\n            justifyContent: 'center',\n          }}\n        >\n          <Text style={{ fontSize: 12 }}>{open ? '▲' : '▼'}</Text>\n        </View>\n      </Pressable>\n\n      {Platform.OS === 'web' && open && (\n        <View\n          pointerEvents=\"box-none\"\n          style={{\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            zIndex: 9999,\n            top: openUpwards ? undefined : wrapLayout.h + 6,\n            bottom: openUpwards ? wrapLayout.h + 6 : undefined,\n          }}\n        >\n          {DropdownContent}\n        </View>\n      )}\n\n      {Platform.OS !== 'web' && (\n        <Modal\n          visible={open}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setOpen(false)}\n        >\n          <Pressable\n            onPress={() => {\n              setOpen(false);\n              setQuery('');\n              setHoverIndex(-1);\n            }}\n            style={{\n              flex: 1,\n              backgroundColor: 'rgba(0,0,0,0.15)',\n              justifyContent: openUpwards ? 'flex-end' : 'flex-start',\n            }}\n          >\n            <View\n              style={{\n                paddingHorizontal: 12,\n                paddingTop: openUpwards ? 0 : 8,\n                paddingBottom: openUpwards ? 8 : 0,\n              }}\n            >\n              {DropdownContent}\n            </View>\n          </Pressable>\n        </Modal>\n      )}\n    </View>\n  );\n};\n","newValue":"// src/components/InputPicker.tsx\nimport JSON5 from 'json5';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  View,\n  Text,\n  Pressable,\n  TextInput,\n  FlatList,\n  Modal,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  useWindowDimensions,\n  Keyboard,\n} from 'react-native';\n\nimport { pathSel } from '../project';\nimport { useData } from '../../..';\n\ntype Item = {\n  label: string;\n  value: string | number | null;\n  disabled?: boolean;\n};\n\ntype InputPickerProps = {\n  pathItems: string; // onde estão as opções\n  pathValue?: string; // (opcional) onde está o valor selecionado\n  placeholder?: string;\n  disabled?: boolean;\n  searchable?: boolean;\n\n  style?: StyleProp<ViewStyle>;\n  inputStyle?: StyleProp<TextStyle>;\n  dropdownStyle?: StyleProp<ViewStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  itemTextStyle?: StyleProp<TextStyle>;\n\n  emptyText?: string;\n  maxVisibleItems?: number; // default 6\n  itemHeight?: number; // default 44\n  testID?: string;\n};\n\ntype Tprops = {\n  pass: {\n    args: any;\n    configs: string[]; // configs[0] = JSON5<InputPickerProps>\n    // aceita (value, item, args) ou (value, args)\n    arrFuncs?: Array<\n      (value: Item['value'], item?: Item | null, args?: any) => void\n    >;\n  };\n};\n\nconst EMPTY_ITEMS: Item[] = Object.freeze([]);\nconst isUnset = (v: any) => v === null || v === undefined || v === '';\n\n// ---- zIndex global para garantir que o aberto fica por cima (WEB)\nlet __Z_INDEX_COUNTER__ = 1000;\n\nexport const IptPicker: React.FC<Tprops> = (props) => {\n  const { configs, arrFuncs = [], args } = props.pass;\n\n  const obj0 = JSON5.parse(configs[0] || '{}') as Partial<InputPickerProps>;\n  const {\n    placeholder = 'Selecionar...',\n    maxVisibleItems = 6,\n    searchable = true,\n    style,\n    inputStyle,\n    dropdownStyle,\n    itemStyle,\n    itemTextStyle,\n    emptyText = 'Nada encontrado',\n    itemHeight = 44,\n    pathItems = '',\n    pathValue,\n    disabled = false,\n    testID,\n  } = obj0;\n\n  const { height: winH } = useWindowDimensions();\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState('');\n  const [hoverIndex, setHoverIndex] = useState<number>(-1);\n  const wrapRef = useRef<View>(null);\n  const inputRef = useRef<TextInput>(null);\n  const listRef = useRef<FlatList<Item>>(null);\n\n  // posição/tamanho do wrapper (medida sob demanda)\n  const [wrapLayout, setWrapLayout] = useState<{ y: number; x: number; h: number }>({\n    y: 0,\n    x: 0,\n    h: 0,\n  });\n\n  // z-index dinâmico (WEB): o picker aberto ganha o maior z\n  const [zTop, setZTop] = useState<number>(0);\n  useEffect(() => {\n    if (Platform.OS === 'web' && open) {\n      setZTop(++__Z_INDEX_COUNTER__);\n    }\n  }, [open]);\n\n  // ----- Data bindings\n  const items: Item[] =\n    useData((ct: any) =>\n      pathItems ? (pathSel(ct, pathItems) as Item[]) : EMPTY_ITEMS,\n    ) || EMPTY_ITEMS;\n\n  const selectedValueFromStore: Item['value'] = useData((ct: any) =>\n    pathValue ? (pathSel(ct, pathValue) as Item['value']) : null,\n  );\n\n  // estado local como fallback e para refletir seleção imediatamente\n  const [selectedLocal, setSelectedLocal] = useState<Item['value'] | null>(\n    isUnset(selectedValueFromStore) ? null : selectedValueFromStore,\n  );\n\n  // sincroniza do store apenas quando ele tiver um valor \"definido\"\n  useEffect(() => {\n    if (!pathValue) return;\n    if (!isUnset(selectedValueFromStore))\n      setSelectedLocal(selectedValueFromStore);\n  }, [pathValue, selectedValueFromStore]);\n\n  // valor efetivo a exibir\n  const effectiveValue = pathValue\n    ? !isUnset(selectedValueFromStore)\n      ? selectedValueFromStore\n      : selectedLocal\n    : selectedLocal;\n\n  // emissor para arrFuncs (2 ou 3 parâmetros)\n  const emitChange = useCallback(\n    (val: Item['value'], it: Item | null) => {\n      for (const fn of arrFuncs) {\n        if (typeof fn !== 'function') continue;\n        try {\n          fn(val, it, args);\n        } catch (err) {\n          console.error('[IptPicker] erro no handler:', err);\n        }\n      }\n    },\n    [arrFuncs, args],\n  );\n\n  const currentItem = useMemo(\n    () => items.find((it) => it.value === effectiveValue) ?? null,\n    [items, effectiveValue],\n  );\n\n  const normalized = useMemo(() => {\n    const q = query.trim().toLowerCase();\n    if (!q) return items;\n    return items.filter((it) => (it.label ?? '').toLowerCase().includes(q));\n  }, [items, query]);\n\n  const visibleCount = Math.min(normalized.length || 1, maxVisibleItems);\n  const listHeight = visibleCount * itemHeight;\n\n  const openUpwards = useMemo(() => {\n    const spaceBelow = winH - (wrapLayout.y + wrapLayout.h);\n    return spaceBelow < listHeight + (searchable ? 44 : 0) + 8;\n  }, [winH, wrapLayout, listHeight, searchable]);\n\n  // ----- Medição sob demanda (opção B)\n  const measureWrapper = useCallback(() => {\n    const node: any = wrapRef.current;\n\n    if (node?.measureInWindow) {\n      node.measureInWindow((x: number, y: number, w: number, h: number) => {\n        setWrapLayout((prev) =>\n          prev.y === y && prev.x === x && prev.h === h ? prev : { y, x, h },\n        );\n      });\n      return;\n    }\n\n    const el = node?._node ?? node;\n    if (el?.getBoundingClientRect) {\n      const r = el.getBoundingClientRect();\n      setWrapLayout((prev) =>\n        prev.y === r.top && prev.x === r.left && prev.h === r.height\n          ? prev\n          : { y: r.top, x: r.left, h: r.height },\n      );\n    }\n  }, []);\n\n  const commitSelection = useCallback(\n    (item: Item | null) => {\n      const nextVal = item ? item.value : null;\n\n      // reflete imediatamente\n      setSelectedLocal(nextVal);\n\n      // propaga pra fora (store, etc.)\n      emitChange(nextVal, item);\n\n      // fecha/limpa busca\n      setOpen(false);\n      setQuery('');\n      setHoverIndex(-1);\n    },\n    [emitChange],\n  );\n\n  const toggleOpen = useCallback(() => {\n    if (disabled) return;\n    setOpen((p) => !p);\n\n    if (!open) {\n      requestAnimationFrame(() => measureWrapper());\n      if (searchable) setTimeout(() => inputRef.current?.focus(), 10);\n    }\n  }, [disabled, open, searchable, measureWrapper]);\n\n  // remeasure enquanto aberto em resize/scroll no web\n  useEffect(() => {\n    if (Platform.OS !== 'web' || !open) return;\n\n    const onResize = () => measureWrapper();\n    const onScroll = () => measureWrapper();\n\n    window.addEventListener('resize', onResize);\n    window.addEventListener('scroll', onScroll, true);\n    return () => {\n      window.removeEventListener('resize', onResize);\n      window.removeEventListener('scroll', onScroll, true);\n    };\n  }, [open, measureWrapper]);\n\n  // click fora (web)\n  useEffect(() => {\n    if (Platform.OS !== 'web' || !open) return;\n\n    const onDocMouseDown = (ev: any) => {\n      const root = (wrapRef.current as any)?._node ?? (wrapRef.current as any);\n      if (root && ev.target instanceof Node && !root.contains(ev.target)) {\n        setOpen(false);\n        setQuery('');\n        setHoverIndex(-1);\n      }\n    };\n    document.addEventListener('mousedown', onDocMouseDown);\n    return () => document.removeEventListener('mousedown', onDocMouseDown);\n  }, [open]);\n\n  // fechar no back (Android) / Esc (web)\n  useEffect(() => {\n    if (!open) return;\n\n    if (Platform.OS === 'web') {\n      const onKey = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          setOpen(false);\n          setQuery('');\n          setHoverIndex(-1);\n        }\n      };\n      window.addEventListener('keydown', onKey);\n      return () => window.removeEventListener('keydown', onKey);\n    } else {\n      const sub = Keyboard.addListener('keyboardDidHide', () => {});\n      return () => sub.remove();\n    }\n  }, [open]);\n\n  // navegação por teclado (web)\n  useEffect(() => {\n    if (Platform.OS !== 'web' || !open) return;\n\n    const scrollIntoView = (idx: number) => {\n      try {\n        listRef.current?.scrollToIndex({\n          index: idx,\n          viewPosition: 0.5,\n          animated: false,\n        });\n      } catch {}\n    };\n\n    const onKey = (e: KeyboardEvent) => {\n      if (['ArrowDown', 'ArrowUp', 'Enter'].includes(e.key)) e.preventDefault();\n\n      if (e.key === 'ArrowDown') {\n        setHoverIndex((i) => {\n          const next = Math.min((i < 0 ? -1 : i) + 1, normalized.length - 1);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === 'ArrowUp') {\n        setHoverIndex((i) => {\n          const next = Math.max(i - 1, 0);\n          scrollIntoView(next);\n          return next;\n        });\n      } else if (e.key === 'Enter') {\n        const item = normalized[hoverIndex];\n        if (item && !item.disabled) commitSelection(item);\n      }\n    };\n\n    window.addEventListener('keydown', onKey);\n    return () => window.removeEventListener('keydown', onKey);\n  }, [open, normalized, hoverIndex, commitSelection]);\n\n  const renderItem = ({ item, index }: { item: Item; index: number }) => {\n    const isSelected = effectiveValue === item.value;\n    const isHover = index === hoverIndex;\n    const isDisabled = !!item.disabled;\n\n    return (\n      <Pressable\n        onPress={() => !isDisabled && commitSelection(item)}\n        onHoverIn={() => Platform.OS === 'web' && setHoverIndex(index)}\n        disabled={isDisabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled: isDisabled, selected: isSelected }}\n        style={[\n          {\n            height: itemHeight,\n            paddingHorizontal: 12,\n            justifyContent: 'center',\n            backgroundColor: isHover ? '#f2f2ff' : '#fff',\n            opacity: isDisabled ? 0.5 : 1,\n            borderBottomWidth: 1,\n            borderBottomColor: '#eee',\n          },\n          itemStyle,\n        ]}\n      >\n        <Text\n          style={[\n            { fontSize: 14, color: '#111' },\n            isSelected && { fontWeight: '600' },\n            itemTextStyle,\n          ]}\n        >\n          {item.label}\n        </Text>\n      </Pressable>\n    );\n  };\n\n  const keyExtractor = (it: Item) => String(it.value);\n\n  const DropdownContent = (\n    <View\n      style={[\n        {\n          width: '100%',\n          maxHeight: listHeight + (searchable ? 44 : 0) + 8,\n          borderRadius: 10,\n          borderWidth: 1,\n          borderColor: '#dcdcdc',\n          backgroundColor: '#fff',\n          overflow: 'hidden',\n          shadowColor: '#000',\n          shadowOpacity: 0.15,\n          shadowOffset: { width: 0, height: 6 },\n          shadowRadius: 12,\n          elevation: 8,\n        },\n        dropdownStyle,\n      ]}\n    >\n      {searchable && (\n        <View\n          style={{\n            padding: 8,\n            borderBottomWidth: 1,\n            borderBottomColor: '#efefef',\n          }}\n        >\n          <TextInput\n            ref={inputRef}\n            value={query}\n            onChangeText={(t) => {\n              setQuery(t);\n              setHoverIndex(t ? 0 : -1);\n              // não chamar handlers aqui – evita sobrescrever o valor no store\n            }}\n            placeholder=\"Buscar…\"\n            style={\n              {\n                height: 36,\n                paddingHorizontal: 10,\n                borderWidth: 1,\n                borderColor: '#e2e2e2',\n                borderRadius: 8,\n                fontSize: 14,\n                outlineStyle: Platform.OS === 'web' ? 'none' : undefined,\n              } as any\n            }\n            {...(Platform.OS === 'web'\n              ? { 'aria-label': 'Campo de busca do seletor', role: 'searchbox' }\n              : {})}\n          />\n        </View>\n      )}\n      {normalized.length === 0 ? (\n        <View\n          style={{\n            height: listHeight,\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Text style={{ color: '#666', fontSize: 14 }}>{emptyText}</Text>\n        </View>\n      ) : (\n        <FlatList\n          ref={listRef}\n          data={normalized}\n          keyExtractor={keyExtractor}\n          renderItem={renderItem}\n          getItemLayout={(_, index) => ({\n            index,\n            length: itemHeight,\n            offset: index * itemHeight,\n          })}\n          style={{ maxHeight: listHeight }}\n          keyboardShouldPersistTaps=\"handled\"\n        />\n      )}\n    </View>\n  );\n\n  // o input só considera prop disabled (itens desabilitados não travam o input)\n  const inputIsDisabled = !!disabled;\n\n  return (\n    <View\n      ref={wrapRef}\n      style={[{ position: 'relative' }, style]}\n      {...(Platform.OS === 'web'\n        ? { role: 'combobox', 'aria-expanded': open, 'data-testid': testID }\n        : {})}\n    >\n      <Pressable\n        onPress={toggleOpen}\n        disabled={inputIsDisabled}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled: inputIsDisabled, expanded: open }}\n        style={[\n          {\n            minHeight: 44,\n            paddingHorizontal: 12,\n            borderWidth: 1,\n            borderColor: inputIsDisabled ? '#e0e0e0' : '#cfcfcf',\n            backgroundColor: inputIsDisabled ? '#f7f7f7' : '#fff',\n            borderRadius: 10,\n            justifyContent: 'center',\n          },\n          inputStyle as any,\n        ]}\n      >\n        <Text style={{ color: currentItem ? '#111' : '#777', fontSize: 14 }}>\n          {currentItem?.label ?? placeholder}\n        </Text>\n        <View\n          style={{\n            position: 'absolute',\n            right: 10,\n            top: 0,\n            bottom: 0,\n            justifyContent: 'center',\n          }}\n        >\n          <Text style={{ fontSize: 12 }}>{open ? '▴' : '▾'}</Text>\n        </View>\n      </Pressable>\n\n      {/* WEB: dropdown absoluto com zIndex dinâmico */}\n      {Platform.OS === 'web' && open && (\n        <View\n          pointerEvents=\"box-none\"\n          style={{\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            zIndex: zTop || 1, // << dinâmico: o aberto ganha o maior z-index\n            top: openUpwards ? undefined : wrapLayout.h + 6,\n            bottom: openUpwards ? wrapLayout.h + 6 : undefined,\n          }}\n        >\n          {DropdownContent}\n        </View>\n      )}\n\n      {/* NATIVE: Modal de tela cheia */}\n      {Platform.OS !== 'web' && (\n        <Modal\n          visible={open}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setOpen(false)}\n        >\n          <Pressable\n            onPress={() => {\n              setOpen(false);\n              setQuery('');\n              setHoverIndex(-1);\n            }}\n            style={{\n              flex: 1,\n              backgroundColor: 'rgba(0,0,0,0.15)',\n              justifyContent: openUpwards ? 'flex-end' : 'flex-start',\n            }}\n          >\n            <View\n              style={{\n                paddingHorizontal: 12,\n                paddingTop: openUpwards ? 0 : 8,\n                paddingBottom: openUpwards ? 8 : 0,\n              }}\n            >\n              {DropdownContent}\n            </View>\n          </Pressable>\n        </Modal>\n      )}\n    </View>\n  );\n};\n"}}