{"1761320211565":{"actionType":"saveAll","createdAt":"1761320211565","actionID":"1761320211565","userID":"#TEMP","path":"system.capsules.ccfc9645-d692-4dc2-acc3-5d84494bb407.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport JSON5 from 'json5';\nimport { Image } from 'react-native';\n\n// ---------- import Local Tools\nimport { useData } from '../../..';\nimport { getStlValues, getVarValue, pathSel } from '../project';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any[];\n    styles: any;\n    URIvariablePath: string[]; // ex.: ['all','authUser','userImage']\n    args: any;\n  };\n};\n\nfunction checkUrl(str?: string) {\n  try { if (typeof str !== 'string') return false; new URL(str); return true; }\n  catch { return false; }\n}\n\nconst defaultUri =\n  'https://www.budgetbatteries.com.au/wp-content/uploads/2021/12/Budget-batteries-placeholder.jpg';\n\nconst findFlatItem = (obj: any): any => {\n  if (typeof obj !== 'object' || obj === null) return null;\n  if ('item' in obj) return obj.item;\n  for (const k in obj) {\n    const v = obj[k];\n    if (Array.isArray(v)) {\n      for (const el of v) {\n        const found = findFlatItem(el);\n        if (found) return found;\n      }\n    } else if (typeof v === 'object') {\n      const found = findFlatItem(v);\n      if (found) return found;\n    }\n  }\n  return null;\n};\n\nconst testArgs = (children: string[], args: any) => {\n  let condChildren: 'arg' | 'var' | '' = '';\n  let newArgChildren = '';\n\n  const joinedChild = children.join('');\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1]; // $arg_key\n    const foundItem = findFlatItem(args);\n    if (foundItem && key in foundItem) newArgChildren = String(foundItem[key]);\n  }\n\n  return { condChildren, newArgChildren };\n};\n\n// Element Image\nexport const ImageBox = (props: Tprops) => {\n  const { elementsProperties = [], styles, URIvariablePath = [], args } = props.pass;\n\n  // 1) Caminho base: use '.' (não vírgula)\n  let keyOrUri = Array.isArray(URIvariablePath)\n    ? URIvariablePath.join('.')\n    : String(URIvariablePath ?? '');\n\n  // 2) Interpretação de $arg_ / $var_\n  const { condChildren, newArgChildren } = testArgs([keyOrUri], args);\n\n  if (condChildren === 'var') {\n    // $var_all.authUser.userImage  -> vira caminho em string\n    keyOrUri = keyOrUri.replace('$var_', '');\n  } else if (condChildren === 'arg' && newArgChildren) {\n    // Pode ser URL direta ou caminho para usar no pathSel\n    keyOrUri = newArgChildren;\n  }\n\n  // 3) Obter valor reativo SEM hook condicional\n  const watchData = useData(ct =>\n    checkUrl(keyOrUri) ? keyOrUri : pathSel(ct, keyOrUri)\n  );\n\n  // 4) Montagem de estilo e props do usuário\n  const stl = getStlValues(styles);\n  const userElProps: Record<string, any> = {};\n  for (const strObj of elementsProperties) {\n    if (!strObj || typeof strObj !== 'string') continue;\n    const parsed = JSON5.parse(strObj);\n    for (const k in parsed) {\n      const v = parsed[k];\n      const [hasVar, varValue] = getVarValue(v, 'Component');\n      userElProps[k] = hasVar ? varValue : v;\n    }\n  }\n\n  // 5) URI final\n  const condFinalURI = checkUrl(keyOrUri) ? keyOrUri : (watchData ?? defaultUri);\n\n  const allProps = {\n    source: { uri: condFinalURI },\n    style: [stl],\n    resizeMode: 'cover' as const,\n    ...userElProps,\n  };\n\n  return <Image {...allProps} />;\n};\n","newValue":"// ---------- import Packs\nimport JSON5 from 'json5';\nimport { Image } from 'react-native';\n\n// ---------- import Local Tools\nimport { useData } from '../../..';\nimport { getStlValues, getVarValue, pathSel } from '../project';\n\ntype Tprops = {\n  pass: {\n    elementsProperties: any[];\n    styles: any;\n    URIvariablePath: string[]; // ex.: ['all','authUser','userImage']\n    args: any;\n  };\n};\n\nfunction checkUrl(str?: string) {\n  try { if (typeof str !== 'string') return false; new URL(str); return true; }\n  catch { return false; }\n}\n\nconst defaultUri =\n  'https://www.budgetbatteries.com.au/wp-content/uploads/2021/12/Budget-batteries-placeholder.jpg';\n\nconst findFlatItem = (obj: any): any => {\n  if (typeof obj !== 'object' || obj === null) return null;\n  if ('item' in obj) return obj.item;\n  for (const k in obj) {\n    const v = obj[k];\n    if (Array.isArray(v)) {\n      for (const el of v) {\n        const found = findFlatItem(el);\n        if (found) return found;\n      }\n    } else if (typeof v === 'object') {\n      const found = findFlatItem(v);\n      if (found) return found;\n    }\n  }\n  return null;\n};\n\nconst testArgs = (children: string[], args: any) => {\n  let condChildren: 'arg' | 'var' | '' = '';\n  let newArgChildren = '';\n\n  const joinedChild = children.join('');\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1]; // $arg_key\n    const foundItem = findFlatItem(args);\n    if (foundItem && key in foundItem) newArgChildren = String(foundItem[key]);\n  }\n\n  return { condChildren, newArgChildren };\n};\n\n// Element Image\nexport const ImageBox = (props: Tprops) => {\n  const { elementsProperties = [], styles, URIvariablePath = [], args } = props.pass;\n\n  // 1) Caminho base: use '.' (não vírgula)\n  let keyOrUri = Array.isArray(URIvariablePath)\n    ? URIvariablePath.join('.')\n    : String(URIvariablePath ?? '');\n\n  // 2) Interpretação de $arg_ / $var_\n  const { condChildren, newArgChildren } = testArgs([keyOrUri], args);\n\n  if (condChildren === 'var') {\n    // $var_all.authUser.userImage  -> vira caminho em string\n    keyOrUri = keyOrUri.replace('$var_', '');\n  } else if (condChildren === 'arg' && newArgChildren) {\n    // Pode ser URL direta ou caminho para usar no pathSel\n    keyOrUri = newArgChildren;\n  }\n\n  // 3) Obter valor reativo SEM hook condicional\n  const watchData = useData(ct =>\n    checkUrl(keyOrUri) ? keyOrUri : pathSel(ct, keyOrUri)\n  );\n\n  // 4) Montagem de estilo e props do usuário\n  const stl = getStlValues(styles);\n  const userElProps: Record<string, any> = {};\n  for (const strObj of elementsProperties) {\n    if (!strObj || typeof strObj !== 'string') continue;\n    const parsed = JSON5.parse(strObj);\n    for (const k in parsed) {\n      const v = parsed[k];\n      const [hasVar, varValue] = getVarValue(v, 'Component');\n      userElProps[k] = hasVar ? varValue : v;\n    }\n  }\n\n  // 5) URI final\n  const condFinalURI = checkUrl(keyOrUri) ? keyOrUri : (watchData ?? defaultUri);\n\n  const allProps = {\n    source: { uri: condFinalURI },\n    style: [stl],\n    resizeMode: 'cover' as const,\n    ...userElProps,\n  };\n\n  return <Image {...allProps} />;\n};"}}