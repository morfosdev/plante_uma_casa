{"1761329574893":{"actionType":"saveAll","createdAt":"1761329574893","actionID":"1761329574893","userID":"#TEMP","path":"system.capsules.a228cf42-4f11-42e1-9cf2-24b90a7f0b46.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  // Lista de campos obrigat√≥rios\n  const requiredFields = [\n    { path: \"sc.a1.editChanges.condo\", name: \"Nome do Condom√≠nio\" },\n    { path: \"sc.a1.editChanges.address\", name: \"Endere√ßo\" },\n    { path: \"sc.a1.editChanges.startDate\", name: \"Data de In√≠cio\" },\n    { path: \"sc.a1.editChanges.endDate\", name: \"Data de Conclus√£o Prevista\" },\n    { path: \"sc.a1.editChanges.description\", name: \"Descri√ß√£o\" },\n  ];\n\n  // Fun√ß√£o auxiliar para obter valor seguro\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  // Checa campos vazios\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  // Define mensagem e estado final\n  let message = \"\";\n\n  if (emptyFields.length > 0) {\n    message = \"Preencha os campos obrigat√≥rios.\";\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [message],\n      },\n    });\n\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return; // ‚ö†Ô∏è Interrompe o processo se houver campos vazios\n  }\n\n  // Se todos os campos estiverem preenchidos\n  message = \"‚úÖ Todos os campos foram preenchidos corretamente.\";\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.a1.validationMessage\"],\n      value: [message],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî atualizando documento no Firebase...\");\n\n  // Garantir app inicializado\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\");\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n  // Importa Firestore e prepara atualiza√ß√£o\n  const { getFirestore, doc, updateDoc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  // ID do documento a atualizar\n  const docId = tools.getCtData(\"sc.a1.editChanges.docId\");\n\n  if (!docId || typeof docId !== \"string\") {\n    console.error(\"‚ùå ID do documento inv√°lido:\", docId);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [\"ID do documento inv√°lido. N√£o foi poss√≠vel atualizar.\"],\n      },\n    });\n    return;\n  }\n\n  // Monta os dados a atualizar\n  const updatedDoc = {\n    condo: getVal(\"sc.a1.editChanges.condo\"),\n    address: getVal(\"sc.a1.editChanges.address\"),\n    startDate: getVal(\"sc.a1.editChanges.startDate\"),\n    endDate: getVal(\"sc.a1.editChanges.endDate\"),\n    description: getVal(\"sc.a1.editChanges.description\"),\n    updatedAt: serverTimestamp(),\n  };\n\n  try {\n    await updateDoc(doc(db, \"condos\", docId), updatedDoc);\n    console.log(\"‚úÖ Documento atualizado com sucesso:\", docId);\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [\"üè¢ Dados atualizados com sucesso!\"],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao atualizar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [\"Erro ao atualizar os dados. Verifique o console.\"],\n      },\n    });\n  }\n\n\n//clean iptsChanges\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.iptChanges\"],\n        value: [\"\"],\n      },\n    });\n\n//close Ed\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.a1.editCondo\"],\n        value: [false],\n      },\n    });\n\n//close sideRight\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.sideRight\"],\n        value: [false],\n      },\n    });\n};","newValue":"async () => {\n  // Lista de campos obrigat√≥rios\n  const requiredFields = [\n    { path: \"sc.a1.editChanges.condo\", name: \"Nome do Condom√≠nio\" },\n    { path: \"sc.a1.editChanges.address\", name: \"Endere√ßo\" },\n    { path: \"sc.a1.editChanges.startDate\", name: \"Data de In√≠cio\" },\n    { path: \"sc.a1.editChanges.endDate\", name: \"Data de Conclus√£o Prevista\" },\n    { path: \"sc.a1.editChanges.description\", name: \"Descri√ß√£o\" },\n  ];\n\n  // Fun√ß√£o auxiliar para obter valor seguro\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  // Checa campos vazios\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  // Define mensagem e estado final\n  let message = \"\";\n\n  if (emptyFields.length > 0) {\n    message = \"Preencha os campos obrigat√≥rios.\";\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [message],\n      },\n    });\n\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return; // ‚ö†Ô∏è Interrompe o processo se houver campos vazios\n  }\n\n  // Se todos os campos estiverem preenchidos\n  message = \"‚úÖ Todos os campos foram preenchidos corretamente.\";\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.a1.validationMessage\"],\n      value: [message],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî atualizando documento no Firebase...\");\n\n  // Garantir app inicializado\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\");\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n  // Importa Firestore e prepara atualiza√ß√£o\n  const { getFirestore, doc, updateDoc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  // ID do documento a atualizar\n  const docId = tools.getCtData(\"sc.a1.editChanges.docId\");\n\n  if (!docId || typeof docId !== \"string\") {\n    console.error(\"‚ùå ID do documento inv√°lido:\", docId);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [\"ID do documento inv√°lido. N√£o foi poss√≠vel atualizar.\"],\n      },\n    });\n    return;\n  }\n\n  // Monta os dados a atualizar\n  const updatedDoc = {\n    condo: getVal(\"sc.a1.editChanges.condo\"),\n    address: getVal(\"sc.a1.editChanges.address\"),\n    startDate: getVal(\"sc.a1.editChanges.startDate\"),\n    endDate: getVal(\"sc.a1.editChanges.endDate\"),\n    description: getVal(\"sc.a1.editChanges.description\"),\n    updatedAt: serverTimestamp(),\n  };\n\n  try {\n    await updateDoc(doc(db, \"condos\", docId), updatedDoc);\n    console.log(\"‚úÖ Documento atualizado com sucesso:\", docId);\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [\"üè¢ Dados atualizados com sucesso!\"],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao atualizar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.validationMessage\"],\n        value: [\"Erro ao atualizar os dados. Verifique o console.\"],\n      },\n    });\n  }\n\n\n//clean iptsChanges\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.a1.iptChanges\"],\n        value: [\"\"],\n      },\n    });\n\n//close Edit\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.a1.editCondo\"],\n        value: [false],\n      },\n    });\n\n//close sideRight\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"all.toggles.sideRight\"],\n        value: [false],\n      },\n    });\n};"}}