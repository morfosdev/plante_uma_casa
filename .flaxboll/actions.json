{"1759254187043":{"actionType":"saveAll","createdAt":"1759254187043","actionID":"1759254187043","userID":"#TEMP","path":"system.capsules.e9a67207-a187-4599-adfd-3cbc410441f4.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"import React from 'react';\nimport JSON5 from 'json5';\nimport { Pressable, View, Text } from 'react-native';\n\nexport const Accordion = props => {\n  const { configs, arrElements } = props.pass ?? {};\n\n  // parse seguro (string/objeto/array)\n  const safeParse = v => {\n    if (!v) return {};\n    if (typeof v === 'string') {\n      try {\n        return JSON5.parse(v) || {};\n      } catch {\n        return {};\n      }\n    }\n    return typeof v === 'object' ? v || {} : {};\n  };\n\n  const cfg0 = Array.isArray(configs)\n    ? safeParse(configs[0])\n    : safeParse(configs);\n  const items = Array.isArray(arrElements) ? arrElements : [];\n\n  const clamp = (n, min, max) => Math.max(min, Math.min(max, n));\n\n  const [openIdx, setOpenIdx] = React.useState(() => {\n    if (!items.length) return null;\n    // troque 0 por null se quiser iniciar fechado quando não vier defaultOpenIdx\n    let idx = Number.isInteger(cfg0?.defaultOpenIdx) ? cfg0.defaultOpenIdx : 0;\n    if (idx == null) return null;\n    return clamp(idx, 0, items.length - 1);\n  });\n\n  const handleToggle = idx => {\n    setOpenIdx(prev => (prev === idx ? null : idx));\n  };\n\n  // Garante que cada entrada vire um React element válido\n  const asChild = (Item, idx) => {\n    try {\n      if (typeof Item === 'function') {\n        const out = Item();\n        if (React.isValidElement(out)) return out;\n        if (typeof out === 'string' || typeof out === 'number')\n          return <Text>{String(out)}</Text>;\n        console.warn(\n          'Accordion: função no idx %s não retornou elemento válido.',\n          idx,\n          out,\n        );\n        return null;\n      }\n      if (React.isValidElement(Item)) return Item;\n      if (typeof Item === 'string' || typeof Item === 'number')\n        return <Text>{String(Item)}</Text>;\n      console.warn('Accordion: item inválido no idx %s.', idx, Item);\n      return null;\n    } catch (e) {\n      console.error('Accordion: erro ao renderizar item %s ->', idx, e);\n      return null;\n    }\n  };\n\n  console.log('Accordion', { props, openIdx, cfg0 });\n\n  return (\n    <>\n      {items.map((Item, idx) => {\n        const isOpen = openIdx === idx;\n        const child = asChild(Item, idx);\n        if (!child) return null;\n        return (\n          <ItemAcc key={idx} open={isOpen} onToggle={() => handleToggle(idx)}>\n            {child}\n          </ItemAcc>\n        );\n      })}\n    </>\n  );\n};\n\nconst ItemAcc = props => {\n  const { open, onToggle } = props;\n\n  return (\n    <Pressable onPress={onToggle}>\n      <View\n        style={{\n          backgroundColor: 'red',\n          width: 260,\n          minHeight: 30,\n          // Em RN nativo evite 'auto'; usar undefined remove a prop.\n          height: open ? undefined : 30,\n          borderRadius: 10,\n          marginBottom: 14,\n          overflow: 'hidden',\n        }}\n      >\n        {props.children}\n      </View>\n    </Pressable>\n  );\n};\n","newValue":"import React from 'react';\nimport JSON5 from 'json5';\nimport { Pressable, View, Text } from 'react-native';\n\nexport const Accordion = props => {\n  const { configs, arrElements } = props.pass ?? {};\n\n  // parse seguro (string/objeto/array)\n  const safeParse = v => {\n    if (!v) return {};\n    if (typeof v === 'string') {\n      try {\n        return JSON5.parse(v) || {};\n      } catch {\n        return {};\n      }\n    }\n    return typeof v === 'object' ? v || {} : {};\n  };\n\n  const cfg0 = Array.isArray(configs)\n    ? safeParse(configs[0])\n    : safeParse(configs);\n  const items = Array.isArray(arrElements) ? arrElements : [];\n\n  const clamp = (n, min, max) => Math.max(min, Math.min(max, n));\n\n  const [openIdx, setOpenIdx] = React.useState(() => {\n    if (!items.length) return null;\n    // troque 0 por null se quiser iniciar fechado quando não vier defaultOpenIdx\n    let idx = Number.isInteger(cfg0?.defaultOpenIdx) ? cfg0.defaultOpenIdx : 0;\n    if (idx == null) return null;\n    return clamp(idx, 0, items.length - 1);\n  });\n\n  const handleToggle = idx => {\n    setOpenIdx(prev => (prev === idx ? null : idx));\n  };\n\n  // Garante que cada entrada vire um React element válido\n  const asChild = (Item, idx) => {\n    try {\n      if (typeof Item === 'function') {\n        const out = Item();\n        if (React.isValidElement(out)) return out;\n        if (typeof out === 'string' || typeof out === 'number')\n          return <Text>{String(out)}</Text>;\n        console.warn(\n          'Accordion: função no idx %s não retornou elemento válido.',\n          idx,\n          out,\n        );\n        return null;\n      }\n      if (React.isValidElement(Item)) return Item;\n      if (typeof Item === 'string' || typeof Item === 'number')\n        return <Text>{String(Item)}</Text>;\n      console.warn('Accordion: item inválido no idx %s.', idx, Item);\n      return null;\n    } catch (e) {\n      console.error('Accordion: erro ao renderizar item %s ->', idx, e);\n      return null;\n    }\n  };\n\n  console.log('Accordion', { props, openIdx, cfg0 });\n  const userStyles = cfg0?.styles ?? {};\n\n  return (\n    <>\n      {items.map((Item, idx) => {\n        const isOpen = openIdx === idx;\n        const child = asChild(Item, idx);\n        if (!child) return null;\n        return (\n          <ItemAcc\n            userStyles={userStyles}\n            key={idx}\n            open={isOpen}\n            onToggle={() => handleToggle(idx)}\n          >\n            {child}\n          </ItemAcc>\n        );\n      })}\n    </>\n  );\n};\n\nconst ItemAcc = props => {\n  const { open, onToggle, userStyles } = props;\n\n  return (\n    <Pressable onPress={onToggle}>\n      <View\n        style={{\n          backgroundColor: 'white',\n          borderRadius: 10,\n          marginBottom: 14,\n          width: 260,\n\n          ...userStyles,\n\n          height: open ? undefined : 30,\n          overflow: 'hidden',\n          minHeight: 30,\n        }}\n      >\n        {props.children}\n      </View>\n    </Pressable>\n  );\n};\n"}}