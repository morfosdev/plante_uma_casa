{"1761576878479":{"actionType":"saveAll","createdAt":"1761576878479","actionID":"1761576878479","userID":"#TEMP","path":"system.capsules.f0e3d976-a165-4998-8be1-55991955fafd.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  // Lista de campos obrigat√≥rios\n  const requiredFields = [\n    { path: \"sc.C2.forms.iptsChanges.userName\", name: \"Nome Completo\" },\n    { path: \"sc.C2.forms.iptsChanges.userRg\", name: \"RG\" },\n    { path: \"sc.C2.forms.iptsChanges.userPhone\", name: \"Telefone\" },\n    { path: \"sc.C2.forms.iptsChanges.userAddress\", name: \"Endere√ßo\" },\n  ];\n\n  // Fun√ß√£o auxiliar para obter valor seguro\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  // Checa campos vazios\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  // Define mensagem e estado final\n  let message = \"\";\n\n  if (emptyFields.length > 0) {\n    message = `Preencha os campos obrigat√≥rios.`;\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.validationMessage\"],\n        value: [message],\n      },\n    });\n\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return; // ‚ö†Ô∏è Interrompe o processo se houver campos vazios\n  }\n\n  // Se todos os campos estiverem preenchidos\n  message = \"‚úÖ Todos os campos foram preenchidos corretamente.\";\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.C2.validationMessage\"],\n      value: [message],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî salvando no Firebase...\");\n\n  // inicializar firebase\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\");\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n  // Importa Firestore e salva o documento\n  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  // Monta os dados a salvar\n  const newDoc = {\n    userName: getVal(\"sc.C2.forms.iptsChanges.userName\"),\n\t\tuserRg: getVal(\"sc.C2.forms.iptsChanges.userRg\"),\n\t\tuserPhone: getVal(\"sc.C2.forms.iptsChanges.userPhone\"),\n    userAddress: getVal(\"sc.C2.forms.iptsChanges.userAddress\"),\n    createdAt: serverTimestamp(),\n  };\n\n  try {\n    const docRef = await addDoc(collection(db, \"condos\"), newDoc);\n    console.log(\"‚úÖ Documento salvo com ID:\", docRef.id);\n\n// Atualiza o documento para incluir o pr√≥prio ID\n    await updateDoc(docRef, { docId: docRef.id });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.validationMessage\"],\n        value: [\"üè¢ Condom√≠nio salvo com sucesso!\"],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao salvar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.validationMessage\"],\n        value: [\"Erro ao salvar dados. Verifique o console.\"],\n      },\n    });\n  }\n\n//clean iptsChanges\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.forms.iptsChanges\"],\n        value: [\"\"],\n      },\n    });\n}\n","newValue":"async () => {\n  // Lista de campos obrigat√≥rios\n  const requiredFields = [\n    { path: \"sc.C2.forms.iptsChanges.userName\", name: \"Nome Completo\" },\n    { path: \"sc.C2.forms.iptsChanges.userRg\", name: \"RG\" },\n    { path: \"sc.C2.forms.iptsChanges.userPhone\", name: \"Telefone\" },\n    { path: \"sc.C2.forms.iptsChanges.userAddress\", name: \"Endere√ßo\" },\n  ];\n\n  // Fun√ß√£o auxiliar para obter valor seguro\n  const getVal = (path) => {\n    const val = tools.getCtData(path);\n    if (Array.isArray(val)) return val[0] ?? \"\";\n    return val ?? \"\";\n  };\n\n  // Checa campos vazios\n  const emptyFields = requiredFields.filter((f) => {\n    const v = getVal(f.path);\n    return v === \"\" || v === null || v === undefined;\n  });\n\n  // Define mensagem e estado final\n  let message = \"\";\n\n  if (emptyFields.length > 0) {\n    message = `Preencha os campos obrigat√≥rios.`;\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.validationMessage\"],\n        value: [message],\n      },\n    });\n\n    console.warn(\"‚ö†Ô∏è Campos vazios detectados:\", emptyFields.map(f => f.name).join(\", \"));\n    return; // ‚ö†Ô∏è Interrompe o processo se houver campos vazios\n  }\n\n  // Se todos os campos estiverem preenchidos\n  message = \"‚úÖ Todos os campos foram preenchidos corretamente.\";\n  tools.functions.setVar({\n    args: \"\",\n    pass: {\n      keyPath: [\"sc.C2.validationMessage\"],\n      value: [message],\n    },\n  });\n\n  console.log(\"üíæ Valida√ß√£o OK ‚Äî salvando no Firebase...\");\n\n  // inicializar firebase\n  let fbInit = tools.getCtData(\"all.temp.fireInit\");\n  if (!fbInit) {\n    const { initializeApp, getApps } = await import(\"firebase/app\");\n    const cfg = tools.getCtData(\"all.temp.fireConfig\");\n    fbInit = getApps().length ? getApps()[0] : initializeApp(cfg);\n    tools.setData({ path: \"all.temp.fireInit\", value: fbInit });\n  }\n\n  // Importa Firestore e salva o documento\n  const { getFirestore, collection, addDoc, updateDoc, serverTimestamp } = await import(\"firebase/firestore\");\n  const db = getFirestore(fbInit);\n\n  // Monta os dados a salvar\n  const newDoc = {\n    userName: getVal(\"sc.C2.forms.iptsChanges.userName\"),\n\t\tuserRg: getVal(\"sc.C2.forms.iptsChanges.userRg\"),\n\t\tuserPhone: getVal(\"sc.C2.forms.iptsChanges.userPhone\"),\n    userAddress: getVal(\"sc.C2.forms.iptsChanges.userAddress\"),\n    createdAt: serverTimestamp(),\n  };\n\n  try {\n    const docRef = await addDoc(collection(db, \"users\"), newDoc);\n    console.log(\"‚úÖ Documento salvo com ID:\", docRef.id);\n\n// Atualiza o documento para incluir o pr√≥prio ID\n    await updateDoc(docRef, { docId: docRef.id });\n\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.validationMessage\"],\n        value: [\"üè¢ Condom√≠nio salvo com sucesso!\"],\n      },\n    });\n  } catch (error) {\n    console.error(\"‚ùå Erro ao salvar documento:\", error);\n    tools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.validationMessage\"],\n        value: [\"Erro ao salvar dados. Verifique o console.\"],\n      },\n    });\n  }\n\n//clean iptsChanges\ntools.functions.setVar({\n      args: \"\",\n      pass: {\n        keyPath: [\"sc.C2.forms.iptsChanges\"],\n        value: [\"\"],\n      },\n    });\n}\n"}}