{"1753639890321":{"actionType":"saveAll","createdAt":"1753639890321","actionID":"1753639890321","userID":"#TEMP","path":"system.capsules.65524307-852d-4c4e-a8f4-7d2a51915f71.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { Text as RNText } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, pathSel, getVarValue } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: { arrProps: any; arrStyles: any; children: any; args?: any };\n};\n\nexport const Text = (props: Tprops) => {\n  // ---------- set Capsules Inputs\n  const { arrProps, arrStyles, args } = props.pass;\n  let { children } = props.pass;\n\n  const { condChildren, newArgChildren } = testArgs(children, args);\n\n  let watchChildren = '';\n\n  if (condChildren === 'arg') children = newArgChildren;\n  if (condChildren === 'var') {\n    const joinedChld = children.join().replace('$var_', '');\n\n    watchChildren = useData(ct => pathSel(ct, joinedChld));\n\n    children = watchChildren;\n  }\n\n  // Não existe mais leitor de var leitor de args\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of arrProps) {\n    if (!strObj) continue;\n    if (!props) continue;\n    if (typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp, 'Component');\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(arrStyles);\n\n  const allProps = {\n    style: stl,\n    children,\n\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  return <RNText {...allProps} />;\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgs = (children, args) => {\n  let condChildren = '';\n  let newArgChildren = 'undefined';\n\n  const joinedChild = children.join();\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      newArgChildren = foundItem[key];\n    }\n  }\n\n  if (newArgChildren === 'undefined') console.log('EL TEXTARG NOT FOUND');\n\n  return { condChildren, newArgChildren };\n};","newValue":"// ---------- import Packs\nimport React from 'react';\nimport JSON5 from 'json5';\nimport { Text as RNText } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, pathSel, getVarValue } from '../project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: { arrProps: any; arrStyles: any; children: any; args?: any };\n};\n\nexport const Text = (props: Tprops) => {\n  // ---------- set Capsules Inputs\n  const { arrProps, arrStyles, args } = props.pass;\n  let { children } = props.pass;\n\n  const { condChildren, newArgChildren } = testArgs(children, args);\n\n  let watchChildren = '';\n\n  if (condChildren === 'arg') children = newArgChildren;\n  if (condChildren === 'var') {\n    const joinedChld = children.join().replace('$var_', '');\n\n    watchChildren = useData(ct => pathSel(ct, joinedChld));\n\n    children = watchChildren;\n  }\n\n  // Não existe mais leitor de var leitor de args\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of arrProps) {\n    if (!strObj) continue;\n    if (!props) continue;\n    if (typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp, 'Component');\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(arrStyles);\n\n  const allProps = {\n    style: stl,\n    children,\n\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  return <RNText {...allProps} />;\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgs = (children, args) => {\n  let condChildren = '';\n  let newArgChildren = 'undefined';\n\n  const joinedChild = children.join();\n  if (joinedChild.includes('$var_')) condChildren = 'var';\n  if (joinedChild.includes('$arg_')) condChildren = 'arg';\n\n  if (condChildren === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      newArgChildren = foundItem[key];\n    }\n  }\n\n  if (newArgChildren === 'undefined') console.log('EL TEXT - ARG NOT FOUND');\n\n  return { condChildren, newArgChildren };\n};"}}