{"1761061133594":{"actionType":"saveAll","createdAt":"1761061133594","actionID":"1761061133594","userID":"#TEMP","path":"system.capsules.7afb4a91-2a5b-42ff-aebd-05b195034998.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import React Packs\nimport React from 'react';\nimport * as RN from 'react-native';\n\nimport { SafeAreaView, Platform, View } from 'react-native';\nimport { StatusBar } from 'react-native';\n\n// ---------- import Variables Pack\n\n// ---------- import Local Tools\nimport { mapElements } from './mapElements';\nimport { setData } from './setData';\nimport { goTo } from './goTo';\n\n// ---------- set Caps Inputs\ntype Tprops = {\n  configData: {\n    screens: any[];\n    initCt: Record<string, any>;\n    arrInitFuncs: (() => void)[];\n  };\n};\n\n// ---------- set Main Component\nexport const Project = ({ configData }: Tprops) => {\n  // ---------- set Data\n  const { screens, arrInitFuncs } = configData;\n  const condWeb = Platform.OS === 'web';\n\n  // ---------- call Redirects (If Exists)\n  React.useEffect(() => {\n    if (condWeb) {\n      const { pathname, search } = window.location;\n      if (pathname.startsWith('/auth/setpassword')) {\n        const qs = Object.fromEntries(new URLSearchParams(search).entries());\n\n        // guarde params para a tela usar (confirmPasswordReset etc.)\n        setData({\n          path: 'all.authData.passwordReset',\n          value: {\n            mode: qs.mode,\n            oobCode: qs.oobCode,\n            continueUrl: qs.continueUrl,\n          },\n        });\n\n        goTo('a0dsetpass');\n      }\n    }\n  }, []);\n\n  // ---------- call Functions (If Exists)\n  React.useEffect(() => {\n    const callFn = async () => {\n      for (const currFunc of arrInitFuncs) await currFunc();\n    };\n\n    callFn().catch(err => console.log('Project Start Functions', { err }));\n  }, []);\n\n  const baseStl: RN.ViewStyle = {\n    flexDirection: 'column',\n    width: '100%',\n    height: '100%',\n  };\n\n  return (\n    <RN.View style={baseStl}>\n      <SafeAreaView\n        style={{ width: '100%', height: '100%', overflow: 'hidden' }}\n      >\n        {mapElements(screens)}\n\n        <StatusBar barStyle={'light-content'} />\n      </SafeAreaView>\n    </RN.View>\n  );\n};","newValue":"// ---------- import React Packs\nimport React from 'react';\nimport * as RN from 'react-native';\n\nimport { SafeAreaView, Platform, View } from 'react-native';\nimport { StatusBar } from 'react-native';\n\n// ---------- import Variables Pack\n\n// ---------- import Local Tools\nimport { mapElements } from './mapElements';\nimport { setData } from './setData';\nimport { goTo } from './goTo';\n\n// ---------- set Caps Inputs\ntype Tprops = {\n  configData: {\n    screens: any[];\n    initCt: Record<string, any>;\n    arrInitFuncs: (() => void)[];\n  };\n};\n\n// ---------- set Main Component\nexport const Project = ({ configData }: Tprops) => {\n  // ---------- set Data\n  const { screens, arrInitFuncs } = configData;\n  const condWeb = Platform.OS === 'web';\n\n  // ---------- call Redirects (If Exists)\n  React.useEffect(() => {\n    if (condWeb) {\n      const { pathname, search } = window.location;\n      console.log({ pathname, search });\n\n      if (pathname.startsWith('/auth/setpassword')) {\n        const qs = Object.fromEntries(new URLSearchParams(search).entries());\n\n        // guarde params para a tela usar (confirmPasswordReset etc.)\n        setData({\n          path: 'sc.A0D.forms.iptsChanges',\n          value: {\n            mode: qs.mode,\n            oobCode: qs.oobCode,\n            continueUrl: qs.continueUrl,\n          },\n        });\n\n        // goTo('a0dsetpass');\n      }\n    }\n  }, []);\n\n  // ---------- call Functions (If Exists)\n  React.useEffect(() => {\n    const callFn = async () => {\n      for (const currFunc of arrInitFuncs) await currFunc();\n    };\n\n    callFn().catch(err => console.log('Project Start Functions', { err }));\n  }, []);\n\n  const baseStl: RN.ViewStyle = {\n    flexDirection: 'column',\n    width: '100%',\n    height: '100%',\n  };\n\n  return (\n    <RN.View style={baseStl}>\n      <SafeAreaView\n        style={{ width: '100%', height: '100%', overflow: 'hidden' }}\n      >\n        {mapElements(screens)}\n\n        <StatusBar barStyle={'light-content'} />\n      </SafeAreaView>\n    </RN.View>\n  );\n};\n"}}