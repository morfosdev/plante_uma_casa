{"1761314380201":{"actionType":"saveAll","createdAt":"1761314380201","actionID":"1761314380201","userID":"#TEMP","path":"system.capsules.7d48ab0a-bf32-4fe2-99c6-bc478137fba3.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport * as Google from \"expo-auth-session/providers/google\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n    getAuth,\n    GoogleAuthProvider,\n    signInWithPopup,\n    signInWithRedirect,\n} from \"firebase/auth\";\nimport React from \"react\";\nimport * as RN from \"react-native\";\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\nWebBrowser.maybeCompleteAuthSession();\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst IOS_CLIENT_ID = \"\";\nconst ANDROID_CLIENT_ID =\n  \"1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com\";\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nexport const LoginNative = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  // Somente Android nativo\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    selectAccount: true,\n  });\n\n  React.useEffect(() => {\n    if (!response) return;\n    setLoading(false);\n\n    if (response.type === \"success\") {\n      const idToken = response.params?.id_token as string | undefined;\n      console.log(\"[LoginAndroid] id_token:\", idToken);\n      // -> autentique no backend/Firebase se desejar\n    } else if (response.type === \"error\") {\n      console.error(\"[LoginAndroid] error:\", (response as any)?.error);\n    }\n  }, [response]);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      // Nativo: sem proxy\n      await promptAsync();\n    } catch (err) {\n      setLoading(false);\n      console.error(\"[LoginAndroid] promptAsync error:\", err);\n    }\n  };\n\n  return (\n    <RN.View style={{ alignItems: \"center\" }}>\n      <RN.Pressable\n        onPress={handlePress}\n        disabled={!request || loading}\n        style={{\n          backgroundColor: \"#315e2d\",\n          paddingHorizontal: 20,\n          height: 44,\n          borderRadius: 999,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: !request || loading ? 0.7 : 1,\n        }}\n      >\n        <RN.Text style={{ color: \"#fff\", fontWeight: \"700\" }}>\n          {loading ? \"Conectando…\" : \"Entrar com Google\"}\n        </RN.Text>\n      </RN.Pressable>\n\n      {loading ? <RN.ActivityIndicator style={{ marginTop: 8 }} /> : null}\n    </RN.View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = () => {\n  // Renderiza apenas no Web\n  if (RN.Platform.OS !== \"web\") return null;\n\n  const [loading, setLoading] = React.useState(false);\n  const fbInit = tools.getCtData(\"all.temp.fireInit\");\n  console.log({ fbInit });\n  const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n  const handleLogin = async () => {\n    try {\n      setLoading(true);\n\n      const provider = new GoogleAuthProvider();\n      provider.setCustomParameters({ prompt: \"select_account\" });\n\n      // Pop-up (recomendado). Se o navegador bloquear, cai para redirect.\n      let result;\n      try {\n        result = await signInWithPopup(auth, provider);\n      } catch (popupErr) {\n        // fallback para redirect (útil em bloqueio de pop-up)\n        await signInWithRedirect(auth, provider);\n        return;\n      }\n    } catch (err) {\n      console.error(\"Erro no login Google (web):\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <RN.Pressable\n      onPress={handleLogin}\n      disabled={loading}\n      style={({ pressed }) => [\n        {\n          paddingVertical: 12,\n          paddingHorizontal: 16,\n          borderRadius: 8,\n          borderWidth: 1,\n          borderColor: \"#ccc\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: pressed || loading ? 0.6 : 1,\n          backgroundColor: \"#fff\",\n        },\n      ]}\n      accessibilityRole=\"button\"\n      accessibilityLabel=\"Entrar com conta Google (Web)\"\n    >\n      <RN.Text style={{ fontWeight: \"600\" }}>\n        {loading ? \"Conectando...\" : \"Entrar com Google\"}\n      </RN.Text>\n    </RN.Pressable>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  if (RN.Platform.OS === \"web\") {\n    return <LoginWeb />;\n  }\n  return <LoginNative />;\n};\n","newValue":""},"1761314380202":{"actionType":"saveAll","createdAt":"1761314380202","actionID":"1761314380202","userID":"#TEMP","path":"system.capsules.7d48ab0a-bf32-4fe2-99c6-bc478137fba3.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"import React from \"react\";\nimport * as RN from \"react-native\";\n\n// ---------- import Packs\nimport * as Google from \"expo-auth-session/providers/google\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithRedirect, } from \"firebase/auth\";\nimport { useData } from '../../..';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\nWebBrowser.maybeCompleteAuthSession();\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst IOS_CLIENT_ID = \"\";\nconst ANDROID_CLIENT_ID =\n  \"1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com\";\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nexport const LoginNative = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  // Somente Android nativo\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    selectAccount: true,\n  });\n\n  React.useEffect(() => {\n    if (!response) return;\n    setLoading(false);\n\n    if (response.type === \"success\") {\n      const idToken = response.params?.id_token as string | undefined;\n      console.log(\"[LoginAndroid] id_token:\", idToken);\n      // -> autentique no backend/Firebase se desejar\n    } else if (response.type === \"error\") {\n      console.error(\"[LoginAndroid] error:\", (response as any)?.error);\n    }\n  }, [response]);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      // Nativo: sem proxy\n      await promptAsync();\n    } catch (err) {\n      setLoading(false);\n      console.error(\"[LoginAndroid] promptAsync error:\", err);\n    }\n  };\n\n  return (\n    <RN.View style={{ alignItems: \"center\" }}>\n      <RN.Pressable\n        onPress={handlePress}\n        disabled={!request || loading}\n        style={{\n          backgroundColor: \"#315e2d\",\n          paddingHorizontal: 20,\n          height: 44,\n          borderRadius: 999,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: !request || loading ? 0.7 : 1,\n        }}\n      >\n        <RN.Text style={{ color: \"#fff\", fontWeight: \"700\" }}>\n          {loading ? \"Conectando…\" : \"Entrar com Google\"}\n        </RN.Text>\n      </RN.Pressable>\n\n      {loading ? <RN.ActivityIndicator style={{ marginTop: 8 }} /> : null}\n    </RN.View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = () => {\n  // Renderiza apenas no Web\n  if (RN.Platform.OS !== \"web\") return null;\n\n  const [loading, setLoading] = React.useState(false);\n  const fbInit = useData(ct => ct.all.temp.fireInit);\n  console.log({ fbInit });\n  \n  const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n  const handleLogin = async () => {\n    try {\n      setLoading(true);\n\n      const provider = new GoogleAuthProvider();\n      provider.setCustomParameters({ prompt: \"select_account\" });\n\n      // Pop-up (recomendado). Se o navegador bloquear, cai para redirect.\n      let result;\n      try {\n        result = await signInWithPopup(auth, provider);\n      } catch (popupErr) {\n        // fallback para redirect (útil em bloqueio de pop-up)\n        await signInWithRedirect(auth, provider);\n        return;\n      }\n    } catch (err) {\n      console.error(\"Erro no login Google (web):\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <RN.Pressable\n      onPress={handleLogin}\n      disabled={loading}\n      style={({ pressed }) => [\n        {\n          paddingVertical: 12,\n          paddingHorizontal: 16,\n          borderRadius: 8,\n          borderWidth: 1,\n          borderColor: \"#ccc\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: pressed || loading ? 0.6 : 1,\n          backgroundColor: \"#fff\",\n        },\n      ]}\n      accessibilityRole=\"button\"\n      accessibilityLabel=\"Entrar com conta Google (Web)\"\n    >\n      <RN.Text style={{ fontWeight: \"600\" }}>\n        {loading ? \"Conectando...\" : \"Entrar com Google\"}\n      </RN.Text>\n    </RN.Pressable>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  if (RN.Platform.OS === \"web\") {\n    return <LoginWeb />;\n  }\n  return <LoginNative />;\n};\n","newValue":"import React from \"react\";\nimport * as RN from \"react-native\";\n\n// ---------- import Packs\nimport * as Google from \"expo-auth-session/providers/google\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithRedirect, } from \"firebase/auth\";\nimport { useData } from '../../..';\n\n// Finaliza sessões pendentes (necessário para Web/Expo)\nWebBrowser.maybeCompleteAuthSession();\n\ntype Tprops = {\n  pass: {\n    arrFuncs?: {};\n    configs?: string[];\n    args?: {};\n  };\n};\n\n// ---------- IDs do Google OAuth por plataforma (preencha!)\nconst IOS_CLIENT_ID = \"\";\nconst ANDROID_CLIENT_ID =\n  \"1099098264007-thb39j1g2ilg74mvrquruu01iaifj9e1.apps.googleusercontent.com\";\n\n// =========================================\n// Componente: Login para Nativo (Android/iOS)\n// =========================================\nexport const LoginNative = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  // Somente Android nativo\n  const [request, response, promptAsync] = Google.useIdTokenAuthRequest({\n    androidClientId: ANDROID_CLIENT_ID,\n    selectAccount: true,\n  });\n\n  React.useEffect(() => {\n    if (!response) return;\n    setLoading(false);\n\n    if (response.type === \"success\") {\n      const idToken = response.params?.id_token as string | undefined;\n      console.log(\"[LoginAndroid] id_token:\", idToken);\n      // -> autentique no backend/Firebase se desejar\n    } else if (response.type === \"error\") {\n      console.error(\"[LoginAndroid] error:\", (response as any)?.error);\n    }\n  }, [response]);\n\n  const handlePress = async () => {\n    try {\n      setLoading(true);\n      // Nativo: sem proxy\n      await promptAsync();\n    } catch (err) {\n      setLoading(false);\n      console.error(\"[LoginAndroid] promptAsync error:\", err);\n    }\n  };\n\n  return (\n    <RN.View style={{ alignItems: \"center\" }}>\n      <RN.Pressable\n        onPress={handlePress}\n        disabled={!request || loading}\n        style={{\n          backgroundColor: \"#315e2d\",\n          paddingHorizontal: 20,\n          height: 44,\n          borderRadius: 999,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: !request || loading ? 0.7 : 1,\n        }}\n      >\n        <RN.Text style={{ color: \"#fff\", fontWeight: \"700\" }}>\n          {loading ? \"Conectando…\" : \"Entrar com Google\"}\n        </RN.Text>\n      </RN.Pressable>\n\n      {loading ? <RN.ActivityIndicator style={{ marginTop: 8 }} /> : null}\n    </RN.View>\n  );\n};\n\n// =========================================\n// Componente: Login para Web\n// =========================================\nconst LoginWeb = () => {\n  // Renderiza apenas no Web\n  if (RN.Platform.OS !== \"web\") return null;\n\n  const [loading, setLoading] = React.useState(false);\n  const fbInit = useData(ct => ct.all.temp.fireInit);\n  console.log({ fbInit });\n  \n  const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n  const handleLogin = async () => {\n    try {\n      setLoading(true);\n\n      const provider = new GoogleAuthProvider();\n      provider.setCustomParameters({ prompt: \"select_account\" });\n\n      // Pop-up (recomendado). Se o navegador bloquear, cai para redirect.\n      let result;\n      try {\n        result = await signInWithPopup(auth, provider);\n      } catch (popupErr) {\n        // fallback para redirect (útil em bloqueio de pop-up)\n        await signInWithRedirect(auth, provider);\n        return;\n      }\n    } catch (err) {\n      console.error(\"Erro no login Google (web):\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <RN.Pressable\n      onPress={handleLogin}\n      disabled={loading}\n      style={({ pressed }) => [\n        {\n          paddingVertical: 12,\n          paddingHorizontal: 16,\n          borderRadius: 8,\n          borderWidth: 1,\n          borderColor: \"#ccc\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: pressed || loading ? 0.6 : 1,\n          backgroundColor: \"#fff\",\n        },\n      ]}\n      accessibilityRole=\"button\"\n      accessibilityLabel=\"Entrar com conta Google (Web)\"\n    >\n      <RN.Text style={{ fontWeight: \"600\" }}>\n        {loading ? \"Conectando...\" : \"Entrar com Google\"}\n      </RN.Text>\n    </RN.Pressable>\n  );\n};\n\n// =========================================\n// Wrapper: decide por plataforma\n// =========================================\nexport const Login = (props: Tprops) => {\n  const args = props?.pass?.args;\n  const [loading, setLoading] = React.useState(false);\n\n  if (RN.Platform.OS === \"web\") {\n    return <LoginWeb />;\n  }\n  return <LoginNative />;\n};"}}