{"1760993446799":{"actionType":"saveAll","createdAt":"1760993446799","actionID":"1760993446799","userID":"#TEMP","path":"system.capsules.830af753-f3c2-4ba3-aedb-6e10b6d47170.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n  try {\n    const pathName = 'sc.A12.forms.iptsChanges.partnerName';\n    const pathEmail = 'sc.A12.forms.iptsChanges.partnerMail';\n    const pathPartner = 'sc.A12.forms.iptsChanges.partnerActivity';\n\n    const name = (tools.getCtData(pathName) ?? '').trim();\n    const email = (tools.getCtData(pathEmail) ?? '').trim();\n    const partnerActivity = (tools.getCtData(pathPartner) ?? '').trim();\n    console.log({ name, email });\n\n    const validateEmail = (v: string) => v.includes('@') && v.includes('.');\n    console.log({ validateEmail: validateEmail(email) });\n\n    if (name === \"\") {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Nome.' });\n      return;\n    }\n    if (email === \"\") {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Email.' });\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Email inválido.' });\n      return;\n    }\n\n    // Auth\n    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification, sendPasswordResetEmail, fetchSignInMethodsForEmail } =\n      await import('firebase/auth');\n\n    const fbInit = tools.getCtData('all.temp.fireInit');\n    console.log({ fbInit });\n    const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n    // ---- Pré-checagem opcional: já existe?\n    const methods = await fetchSignInMethodsForEmail(auth, email);\n    console.log({ methods });\n    if (methods.length > 0) {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });\n      return; // quebra o fluxo\n    }\n\n    const tempPass = '123456'; // ou gere uma senha aleatória\n    console.log({ tempPass });\n    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);\n    console.log({ cred });\n\n\n    if (name) {\n      await updateProfile(cred.user, { displayName: name });\n    }\n\n    // >>>>>>>>>>>>>>> ADIÇÃO: criar/atualizar doc em 'users'\n    {\n      const { getFirestore, doc, setDoc, serverTimestamp } = await import('firebase/firestore');\n      const db = fbInit ? getFirestore(fbInit) : getFirestore();\n\n      const uid = cred.user.uid;\n      const dataToSet = {\n        docId: uid,\n        createdAt: serverTimestamp(),\n        userName: name,\n        userEmail: email,\n        partnerActivity,\n        typeAccount: \"partner\",\n      };\n\n      await setDoc(doc(db, 'users', uid), dataToSet, { merge: true });\n      console.log('users doc criado/atualizado:', { uid, dataToSet });\n    }\n    // <<<<<<<<<<<<<<< FIM DA ADIÇÃO\n\n    // (opcional) enviar verificação\n    const host = \"http://localhost:5173\";\n    // const host = \"http://projeto-plante-uma-casa.web.app\";\n\n    const acs = {\n      url: host + \"/auth/complete-signup\",\n      handleCodeInApp: false\n    }\n    // await sendEmailVerification(cred.user);\n    await sendPasswordResetEmail(auth, email, acs);\n    const link = await auth.generatePasswordResetLink(email, acs);\n    console.log({ link });\n\n\n    tools.setData({ path: 'sc.A12.forms.showErr', value: false });\n    tools.setData({ path: 'sc.A12.forms.showSuccess', value: true });\n    tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: 'Usuário criado com sucesso!' });\n\n\n    // Limpar mensagens após 2 segundos\n    const delay = () => {\n      tools.setData({ path: 'all.toggles.sideRight', value: false });\n      tools.setData({ path: 'all.toggles.a12.add', value: false });\n      tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: '' });\n      tools.setData({ path: 'sc.A12.forms.iptsChanges', value: { partnerName: \"\", partnerMail: \"\", partnerActivity: \"\" } });\n    }\n\n    setTimeout(delay, 2500);\n\n    // sucesso...\n  } catch (e: any) {\n    if (e?.code === 'auth/email-already-in-use') {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });\n      return;\n    }\n\n    tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n    tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Erro ao Criar Parceiro. ' + (e?.message ?? '') });\n  }\n}","newValue":"async () => {\n  try {\n    const pathName = 'sc.A12.forms.iptsChanges.partnerName';\n    const pathEmail = 'sc.A12.forms.iptsChanges.partnerMail';\n    const pathPartner = 'sc.A12.forms.iptsChanges.partnerActivity';\n\n    const name = (tools.getCtData(pathName) ?? '').trim();\n    const email = (tools.getCtData(pathEmail) ?? '').trim();\n    const partnerActivity = (tools.getCtData(pathPartner) ?? '').trim();\n    console.log({ name, email });\n\n    const validateEmail = (v: string) => v.includes('@') && v.includes('.');\n    console.log({ validateEmail: validateEmail(email) });\n\n    if (name === \"\") {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Nome.' });\n      return;\n    }\n    if (email === \"\") {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Preencha o Email.' });\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Email inválido.' });\n      return;\n    }\n\n    // Auth\n    const { getAuth, createUserWithEmailAndPassword, updateProfile, sendEmailVerification, sendPasswordResetEmail, fetchSignInMethodsForEmail } =\n      await import('firebase/auth');\n\n    const fbInit = tools.getCtData('all.temp.fireInit');\n    console.log({ fbInit });\n    const auth = fbInit ? getAuth(fbInit) : getAuth();\n\n    // ---- Pré-checagem opcional: já existe?\n    const methods = await fetchSignInMethodsForEmail(auth, email);\n    console.log({ methods });\n    if (methods.length > 0) {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });\n      return; // quebra o fluxo\n    }\n\n    const tempPass = '123456'; // ou gere uma senha aleatória\n    console.log({ tempPass });\n    const cred = await createUserWithEmailAndPassword(auth, email, tempPass);\n    console.log({ cred });\n\n\n    if (name) {\n      await updateProfile(cred.user, { displayName: name });\n    }\n\n    // >>>>>>>>>>>>>>> ADIÇÃO: criar/atualizar doc em 'users'\n    {\n      const { getFirestore, doc, setDoc, serverTimestamp } = await import('firebase/firestore');\n      const db = fbInit ? getFirestore(fbInit) : getFirestore();\n\n      const uid = cred.user.uid;\n      const dataToSet = {\n        docId: uid,\n        createdAt: serverTimestamp(),\n        userName: name,\n        userEmail: email,\n        partnerActivity,\n        typeAccount: \"partner\",\n      };\n\n      await setDoc(doc(db, 'users', uid), dataToSet, { merge: true });\n      console.log('users doc criado/atualizado:', { uid, dataToSet });\n    }\n    // <<<<<<<<<<<<<<< FIM DA ADIÇÃO\n\n    // (opcional) enviar verificação\n    const host = \"http://localhost:5173\";\n    // const host = \"http://projeto-plante-uma-casa.web.app\";\n\n    const acs = {\n      url: host + \"/auth/complete-signup\",\n      handleCodeInApp: false\n    }\n    // await sendEmailVerification(cred.user);\n    await sendPasswordResetEmail(auth, email, acs);\n    const link = await getAuth().generatePasswordResetLink(email, acs);\n    console.log({ link });\n\n\n    tools.setData({ path: 'sc.A12.forms.showErr', value: false });\n    tools.setData({ path: 'sc.A12.forms.showSuccess', value: true });\n    tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: 'Usuário criado com sucesso!' });\n\n\n    // Limpar mensagens após 2 segundos\n    const delay = () => {\n      tools.setData({ path: 'all.toggles.sideRight', value: false });\n      tools.setData({ path: 'all.toggles.a12.add', value: false });\n      tools.setData({ path: 'sc.A12.forms.msgs.msg1', value: '' });\n      tools.setData({ path: 'sc.A12.forms.iptsChanges', value: { partnerName: \"\", partnerMail: \"\", partnerActivity: \"\" } });\n    }\n\n    setTimeout(delay, 2500);\n\n    // sucesso...\n  } catch (e: any) {\n    if (e?.code === 'auth/email-already-in-use') {\n      tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n      tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Esse usuário já foi criado anteriormente' });\n      return;\n    }\n\n    tools.setData({ path: 'sc.A12.forms.showErr', value: true });\n    tools.setData({ path: 'sc.A12.msgs.msg1', value: 'Erro ao Criar Parceiro. ' + (e?.message ?? '') });\n  }\n}"}}