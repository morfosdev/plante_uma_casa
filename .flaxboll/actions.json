{"1753813157477":{"actionType":"saveAll","createdAt":"1753813157477","actionID":"1753813157477","userID":"#TEMP","path":"system.capsules.5bbf809b-5c91-4d02-9677-ffec28704efe.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"import { getCtData, testVarType } from '../../project';\nimport * as firestore from 'firebase/firestore';\n\ntype Tprops = {\n  args: any;\n  pass: {\n    fbInit: any;\n    arrRefStrings: string[];\n    arrWhere: any;\n    arrFuncs: any[];\n  };\n};\n\nexport const css1 =\n  'color: green; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: yellow; background-color: green; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const where = async (props: Tprops) => {\n  // ---------- set Props\n  const { args, pass } = props;\n  const { arrRefStrings, arrWhere, arrFuncs } = pass;\n  const newArrStringRefs = arrRefStrings.map(i => {\n    console.log('1', { i });\n    const varValue = testVarType(i, args);\n    console.log('2', { varValue });\n\n    return varValue;\n  });\n\n  console.log('3', { newArrStringRefs });\n\n  // ---------- set Local Imports\n  const { getFirestore, getDocs, collection, where, query } = firestore;\n  // ---------- set Caps Inputs\n\n  // ---------- set Short Str\n  const fbErrMsg1 = 'Alguma entrada where foi preenchida errado.';\n  const par1 = 'noComponent';\n\n  // -----------------------------\n  // ---------- set Init Firestore\n  // -----------------------------\n  const fbInit = getCtData('all.temp.fireInit');\n  if (!fbInit) return console.log(fbErrMsg1, { fbInit });\n  const fireInit: any = getFirestore(fbInit);\n\n  const arrConds: any = [];\n\n  const refColl = collection(fireInit, ...newArrStringRefs);\n\n  let currQuery = refColl;\n\n  arrWhere.forEach((capsCond: any) => {\n    const resolve = capsCond();\n    const field = resolve.field;\n    const operator = resolve.operator;\n    const value = resolve.value;\n\n    arrConds.push({ field, operator, value });\n\n    currQuery = query(currQuery, where(field, operator, value));\n  });\n\n  const snapshot = await getDocs(currQuery);\n\n  const arrDocs = [];\n  snapshot.forEach((doc: any) => {\n    arrDocs.push(doc.data());\n  });\n\n  console.log('%cWhere Cond', css1, { arrConds });\n\n  console.log('%cWhere Cond', css1, { newArrStringRefs });\n\n  console.log('%cWhere Docs Found', css2, { arrDocs });\n\n  for (const currFunc of arrFuncs) currFunc(arrDocs, args);\n};","newValue":"import { getCtData, testVarType } from '../../project';\nimport * as firestore from 'firebase/firestore';\n\ntype Tprops = {\n  args: any;\n  pass: {\n    fbInit: any;\n    arrRefStrings: string[];\n    arrWhere: any;\n    arrFuncs: any[];\n  };\n};\n\nexport const css1 =\n  'color: green; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: yellow; background-color: green; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const where = (props: Tprops) => {\n  // ---------- set Props\n  const { args, pass } = props;\n  const { arrRefStrings, arrWhere, arrFuncs } = pass;\n  const newArrStringRefs = arrRefStrings.map(i => {\n    console.log('1', { i });\n    const varValue = testVarType(i, args);\n    console.log('2', { varValue });\n    return varValue;\n  });\n\n  console.log('3', { newArrStringRefs });\n\n  // ---------- set Local Imports\n  const {\n    getFirestore,\n    collection,\n    where,\n    query,\n    onSnapshot,\n  } = firestore;\n\n  // ---------- set Short Str\n  const fbErrMsg1 = 'Alguma entrada where foi preenchida errado.';\n\n  // ---------- set Init Firestore\n  const fbInit = getCtData('all.temp.fireInit');\n  if (!fbInit) return console.log(fbErrMsg1, { fbInit });\n  const fireInit: any = getFirestore(fbInit);\n\n  const arrConds: any[] = [];\n  const refColl = collection(fireInit, ...newArrStringRefs);\n\n  let currQuery: any = refColl;\n\n  arrWhere.forEach((capsCond: any) => {\n    const resolve = capsCond();\n    const field = resolve.field;\n    const operator = resolve.operator;\n    const value = resolve.value;\n\n    arrConds.push({ field, operator, value });\n\n    currQuery = query(currQuery, where(field, operator, value));\n  });\n\n  // ---------- onSnapshot\n  onSnapshot(currQuery, snapshot => {\n    const arrDocs: any[] = [];\n    snapshot.forEach(doc => {\n      arrDocs.push(doc.data());\n    });\n\n    console.log('%cWhere Cond', css1, { arrConds });\n    console.log('%cWhere Cond', css1, { newArrStringRefs });\n    console.log('%cWhere Docs Found (Real-Time)', css2, { arrDocs });\n\n    for (const currFunc of arrFuncs) currFunc(arrDocs, args);\n  });\n};\n"}}